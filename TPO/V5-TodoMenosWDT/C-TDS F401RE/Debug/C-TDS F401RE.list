
C-TDS F401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005064  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b0  080052b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b8  080052b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080052c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002558  20000010  080052d0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002568  080052d0  00022568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b1e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003396  00000000  00000000  00032b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00035ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  00037088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001965e  00000000  00000000  00038078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001855c  00000000  00000000  000516d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099902  00000000  00000000  00069c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004690  00000000  00000000  00103584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080051e0 	.word	0x080051e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080051e0 	.word	0x080051e0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HD44780_Clear>:
uint8_t dpRows;
uint8_t dpBacklight;


void HD44780_Clear()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 f898 	bl	8000612 <SendCommand>
  DelayUS(10);
 80004e2:	200a      	movs	r0, #10
 80004e4:	f000 f956 	bl	8000794 <DelayUS>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <HD44780_Home>:

void HD44780_Home()
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80004f0:	2002      	movs	r0, #2
 80004f2:	f000 f88e 	bl	8000612 <SendCommand>
  DelayUS(10);
 80004f6:	200a      	movs	r0, #10
 80004f8:	f000 f94c 	bl	8000794 <DelayUS>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <HD44780_SetCursor>:
void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b087      	sub	sp, #28
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	460a      	mov	r2, r1
 800050a:	71fb      	strb	r3, [r7, #7]
 800050c:	4613      	mov	r3, r2
 800050e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HD44780_SetCursor+0x5c>)
 8000512:	f107 0408 	add.w	r4, r7, #8
 8000516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800051c:	4b10      	ldr	r3, [pc, #64]	; (8000560 <HD44780_SetCursor+0x60>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	79ba      	ldrb	r2, [r7, #6]
 8000522:	429a      	cmp	r2, r3
 8000524:	d303      	bcc.n	800052e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HD44780_SetCursor+0x60>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	3b01      	subs	r3, #1
 800052c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	3318      	adds	r3, #24
 8000534:	443b      	add	r3, r7
 8000536:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	4413      	add	r3, r2
 8000540:	b2db      	uxtb	r3, r3
 8000542:	b25b      	sxtb	r3, r3
 8000544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000548:	b25b      	sxtb	r3, r3
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f860 	bl	8000612 <SendCommand>
}
 8000552:	bf00      	nop
 8000554:	371c      	adds	r7, #28
 8000556:	46bd      	mov	sp, r7
 8000558:	bd90      	pop	{r4, r7, pc}
 800055a:	bf00      	nop
 800055c:	080051f8 	.word	0x080051f8
 8000560:	2000002f 	.word	0x2000002f

08000564 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <HD44780_Display+0x28>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HD44780_Display+0x28>)
 8000574:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <HD44780_Display+0x28>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	f043 0308 	orr.w	r3, r3, #8
 800057e:	b2db      	uxtb	r3, r3
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f846 	bl	8000612 <SendCommand>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2000002d 	.word	0x2000002d

08000590 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <HD44780_NoCursor+0x28>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f023 0302 	bic.w	r3, r3, #2
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HD44780_NoCursor+0x28>)
 80005a0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <HD44780_NoCursor+0x28>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f830 	bl	8000612 <SendCommand>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	2000002d 	.word	0x2000002d

080005bc <HD44780_Cursor>:

void HD44780_Cursor()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <HD44780_Cursor+0x28>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HD44780_Cursor+0x28>)
 80005cc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HD44780_Cursor+0x28>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f81a 	bl	8000612 <SendCommand>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000002d 	.word	0x2000002d

080005e8 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80005f0:	e006      	b.n	8000600 <HD44780_PrintStr+0x18>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	607a      	str	r2, [r7, #4]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f82c 	bl	8000658 <SendChar>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d1f4      	bne.n	80005f2 <HD44780_PrintStr+0xa>
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

void SendCommand(uint8_t cmd)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f827 	bl	8000674 <Send>
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <WriteValue>:

void WriteValue(uint16_t value)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b088      	sub	sp, #32
 8000632:	af00      	add	r7, sp, #0
 8000634:	4603      	mov	r3, r0
 8000636:	80fb      	strh	r3, [r7, #6]
	   char strvalue[20];
	   itoa(value,strvalue,10);
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	f107 010c 	add.w	r1, r7, #12
 800063e:	220a      	movs	r2, #10
 8000640:	4618      	mov	r0, r3
 8000642:	f004 fd81 	bl	8005148 <itoa>
	   HD44780_PrintStr(strvalue);
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffcc 	bl	80005e8 <HD44780_PrintStr>
}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <SendChar>:

void SendChar(uint8_t ch)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2101      	movs	r1, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f804 	bl	8000674 <Send>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <Send>:

void Send(uint8_t value, uint8_t mode)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	460a      	mov	r2, r1
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	4613      	mov	r3, r2
 8000682:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f023 030f 	bic.w	r3, r3, #15
 800068a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000692:	7bfa      	ldrb	r2, [r7, #15]
 8000694:	79bb      	ldrb	r3, [r7, #6]
 8000696:	4313      	orrs	r3, r2
 8000698:	b2db      	uxtb	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f80b 	bl	80006b6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80006a0:	7bba      	ldrb	r2, [r7, #14]
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f804 	bl	80006b6 <Write4Bits>
}
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <Write4Bits>:

void Write4Bits(uint8_t value)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	4603      	mov	r3, r0
 80006be:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f808 	bl	80006d8 <ExpanderWrite>
  PulseEnable(value);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f820 	bl	8000710 <PulseEnable>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <ExpanderWrite>:

void ExpanderWrite(uint8_t _data)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af02      	add	r7, sp, #8
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <ExpanderWrite+0x30>)
 80006e4:	781a      	ldrb	r2, [r3, #0]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80006ee:	f107 020f 	add.w	r2, r7, #15
 80006f2:	230a      	movs	r3, #10
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2301      	movs	r3, #1
 80006f8:	214e      	movs	r1, #78	; 0x4e
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <ExpanderWrite+0x34>)
 80006fc:	f002 fd1e 	bl	800313c <HAL_I2C_Master_Transmit>
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000030 	.word	0x20000030
 800070c:	2000012c 	.word	0x2000012c

08000710 <PulseEnable>:

void PulseEnable(uint8_t _data)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE_DISPLAY);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ffd8 	bl	80006d8 <ExpanderWrite>
  //DelayUS(1);//Normalmente 20

  ExpanderWrite(_data & ~ENABLE_DISPLAY);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f023 0304 	bic.w	r3, r3, #4
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ffd1 	bl	80006d8 <ExpanderWrite>
  //DelayUS(1);//Normalmente 20
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <DelayInit>:

void DelayInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <DelayInit+0x4c>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <DelayInit+0x4c>)
 800074a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800074e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <DelayInit+0x4c>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <DelayInit+0x4c>)
 8000756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800075a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <DelayInit+0x50>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <DelayInit+0x50>)
 8000762:	f023 0301 	bic.w	r3, r3, #1
 8000766:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <DelayInit+0x50>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <DelayInit+0x50>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <DelayInit+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800077a:	bf00      	nop
  __ASM volatile ("NOP");
 800077c:	bf00      	nop
  __ASM volatile ("NOP");
 800077e:	bf00      	nop
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000edf0 	.word	0xe000edf0
 8000790:	e0001000 	.word	0xe0001000

08000794 <DelayUS>:

void DelayUS(uint32_t us) {
 8000794:	b480      	push	{r7}
 8000796:	b087      	sub	sp, #28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <DelayUS+0x44>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <DelayUS+0x48>)
 80007a2:	fba2 2303 	umull	r2, r3, r2, r3
 80007a6:	0c9a      	lsrs	r2, r3, #18
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	fb02 f303 	mul.w	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <DelayUS+0x4c>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <DelayUS+0x4c>)
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d8f6      	bhi.n	80007b6 <DelayUS+0x22>
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000004 	.word	0x20000004
 80007dc:	431bde83 	.word	0x431bde83
 80007e0:	e0001000 	.word	0xe0001000

080007e4 <Pin_Config>:
 */

#include <pin_functions_stm32f401.h>

void Pin_Config(GPIO_TypeDef *port, uint32_t pin, uint32_t mode, uint32_t pull, uint32_t speed)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	603b      	str	r3, [r7, #0]
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = pull;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = speed;
 800080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000810:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f002 f97b 	bl	8002b14 <HAL_GPIO_Init>
}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <Pin_Write>:

void Pin_Write(GPIO_TypeDef *port, uint32_t pin, uint32_t state)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b084      	sub	sp, #16
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(port, pin, state);
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	b29b      	uxth	r3, r3
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	4619      	mov	r1, r3
 800083c:	68f8      	ldr	r0, [r7, #12]
 800083e:	f002 fb05 	bl	8002e4c <HAL_GPIO_WritePin>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <Pin_Toggle>:

void Pin_Toggle(GPIO_TypeDef *port, uint32_t pin)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(port, pin);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	b29b      	uxth	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f002 fb0f 	bl	8002e7e <HAL_GPIO_TogglePin>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <Pin_Read>:

GPIO_PinState Pin_Read(GPIO_TypeDef *port, uint32_t pin)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
	return HAL_GPIO_ReadPin(port, pin);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b29b      	uxth	r3, r3
 8000876:	4619      	mov	r1, r3
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f002 facf 	bl	8002e1c <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <READ_ADC_Init>:
extern ADC_HandleTypeDef hadc1;
int flag_sumar_uno = 0;
int conteo_positivos = 0;

void READ_ADC_Init(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
	int i=0;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
	for(i=0; i < ADC_BUF_LEN; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	e007      	b.n	80008a8 <READ_ADC_Init+0x20>
	{
		adc_buf[i]=0;
 8000898:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <READ_ADC_Init+0x38>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2100      	movs	r1, #0
 800089e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0; i < ADC_BUF_LEN; i++)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008ae:	dbf3      	blt.n	8000898 <READ_ADC_Init+0x10>
	}
	return;
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
	Pin_Write(LD2_GPIO_Port, LD2_Pin, OFF);
}
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	200001dc 	.word	0x200001dc

080008c4 <READ_ADC_Update>:
void READ_ADC_Update(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
	int i = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
	int suma = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
	uint32_t prom = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
	int resta = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]


	HAL_ADC_Stop_DMA(&hadc1);
 80008da:	4828      	ldr	r0, [pc, #160]	; (800097c <READ_ADC_Update+0xb8>)
 80008dc:	f001 f90e 	bl	8001afc <HAL_ADC_Stop_DMA>

	for(i=0; i < ADC_BUF_LEN; i++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	e013      	b.n	800090e <READ_ADC_Update+0x4a>
	{
		resta =  ((int) adc_buf[i])-OFFSET;
 80008e6:	4a26      	ldr	r2, [pc, #152]	; (8000980 <READ_ADC_Update+0xbc>)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ee:	f5a3 6348 	sub.w	r3, r3, #3200	; 0xc80
 80008f2:	607b      	str	r3, [r7, #4]

		if(resta<0)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	da02      	bge.n	8000900 <READ_ADC_Update+0x3c>
		{
			resta *= -1;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	425b      	negs	r3, r3
 80008fe:	607b      	str	r3, [r7, #4]
		}
		suma += resta;
 8000900:	68ba      	ldr	r2, [r7, #8]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
	for(i=0; i < ADC_BUF_LEN; i++)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000914:	dbe7      	blt.n	80008e6 <READ_ADC_Update+0x22>
	}
	prom = suma/ADC_BUF_LEN;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	2b00      	cmp	r3, #0
 800091a:	da01      	bge.n	8000920 <READ_ADC_Update+0x5c>
 800091c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000920:	131b      	asrs	r3, r3, #12
 8000922:	603b      	str	r3, [r7, #0]
	//Verificar si el promedio de datos capturados supera el umbral seteado
	if(prom > THRESHOLD)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800092a:	d90a      	bls.n	8000942 <READ_ADC_Update+0x7e>
	{
		conteo_positivos++;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <READ_ADC_Update+0xc0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <READ_ADC_Update+0xc0>)
 8000934:	6013      	str	r3, [r2, #0]
		Pin_Write(LD2_GPIO_Port, LD2_Pin, ON);
 8000936:	2201      	movs	r2, #1
 8000938:	2120      	movs	r1, #32
 800093a:	4813      	ldr	r0, [pc, #76]	; (8000988 <READ_ADC_Update+0xc4>)
 800093c:	f7ff ff73 	bl	8000826 <Pin_Write>
 8000940:	e007      	b.n	8000952 <READ_ADC_Update+0x8e>
	}
	else
	{
		conteo_positivos = 0;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <READ_ADC_Update+0xc0>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
		Pin_Write(LD2_GPIO_Port, LD2_Pin, OFF);
 8000948:	2200      	movs	r2, #0
 800094a:	2120      	movs	r1, #32
 800094c:	480e      	ldr	r0, [pc, #56]	; (8000988 <READ_ADC_Update+0xc4>)
 800094e:	f7ff ff6a 	bl	8000826 <Pin_Write>
	}

	if(conteo_positivos >=5)
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <READ_ADC_Update+0xc0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b04      	cmp	r3, #4
 8000958:	dd05      	ble.n	8000966 <READ_ADC_Update+0xa2>
	{
		flag_sumar_uno = 1;	//este flag se debe poner en 0 al sumar al conteo de pulsos
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <READ_ADC_Update+0xc8>)
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
		conteo_positivos=0;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <READ_ADC_Update+0xc0>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buf, ADC_BUF_LEN);
 8000966:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800096a:	4905      	ldr	r1, [pc, #20]	; (8000980 <READ_ADC_Update+0xbc>)
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <READ_ADC_Update+0xb8>)
 800096e:	f000 ffd5 	bl	800191c <HAL_ADC_Start_DMA>
	return;
 8000972:	bf00      	nop
}
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000084 	.word	0x20000084
 8000980:	200001dc 	.word	0x200001dc
 8000984:	20000038 	.word	0x20000038
 8000988:	40020000 	.word	0x40020000
 800098c:	20000034 	.word	0x20000034

08000990 <DISPLAY_Init>:
extern int flag_resetear_mediciones;
extern int flag_medir;
static int pasada=0;

void DISPLAY_Init(uint8_t rows)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800099a:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <DISPLAY_Init+0xc8>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80009a0:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <DISPLAY_Init+0xcc>)
 80009a2:	2208      	movs	r2, #8
 80009a4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 80009a6:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <DISPLAY_Init+0xd0>)
 80009a8:	2208      	movs	r2, #8
 80009aa:	701a      	strb	r2, [r3, #0]

  /* Wait for initialization */
  DelayInit();
 80009ac:	f7ff fec8 	bl	8000740 <DelayInit>
  HAL_Delay(50);
 80009b0:	2032      	movs	r0, #50	; 0x32
 80009b2:	f000 ff4b 	bl	800184c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80009b6:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <DISPLAY_Init+0xcc>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fe8c 	bl	80006d8 <ExpanderWrite>
  HAL_Delay(1000);
 80009c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c4:	f000 ff42 	bl	800184c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80009c8:	2030      	movs	r0, #48	; 0x30
 80009ca:	f7ff fe74 	bl	80006b6 <Write4Bits>
  DelayUS(4500);
 80009ce:	f241 1094 	movw	r0, #4500	; 0x1194
 80009d2:	f7ff fedf 	bl	8000794 <DelayUS>

  Write4Bits(0x03 << 4);
 80009d6:	2030      	movs	r0, #48	; 0x30
 80009d8:	f7ff fe6d 	bl	80006b6 <Write4Bits>
  DelayUS(4500);
 80009dc:	f241 1094 	movw	r0, #4500	; 0x1194
 80009e0:	f7ff fed8 	bl	8000794 <DelayUS>

  Write4Bits(0x03 << 4);
 80009e4:	2030      	movs	r0, #48	; 0x30
 80009e6:	f7ff fe66 	bl	80006b6 <Write4Bits>
  DelayUS(4500);
 80009ea:	f241 1094 	movw	r0, #4500	; 0x1194
 80009ee:	f7ff fed1 	bl	8000794 <DelayUS>

  Write4Bits(0x02 << 4);
 80009f2:	2020      	movs	r0, #32
 80009f4:	f7ff fe5f 	bl	80006b6 <Write4Bits>
  DelayUS(100);
 80009f8:	2064      	movs	r0, #100	; 0x64
 80009fa:	f7ff fecb 	bl	8000794 <DelayUS>

  // Control del display
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <DISPLAY_Init+0xd0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	f043 0320 	orr.w	r3, r3, #32
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fe02 	bl	8000612 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <DISPLAY_Init+0xd4>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000a14:	f7ff fda6 	bl	8000564 <HD44780_Display>
  HD44780_Clear();
 8000a18:	f7ff fd5e 	bl	80004d8 <HD44780_Clear>

  // Modo del display
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <DISPLAY_Init+0xd8>)
 8000a1e:	2202      	movs	r2, #2
 8000a20:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <DISPLAY_Init+0xd8>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fdf0 	bl	8000612 <SendCommand>
  DelayUS(4500);
 8000a32:	f241 1094 	movw	r0, #4500	; 0x1194
 8000a36:	f7ff fead 	bl	8000794 <DelayUS>

  HD44780_Home();
 8000a3a:	f7ff fd57 	bl	80004ec <HD44780_Home>

  HD44780_Cursor();
 8000a3e:	f7ff fdbd 	bl	80005bc <HD44780_Cursor>
  HD44780_SetCursor(0,0);
 8000a42:	2100      	movs	r1, #0
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fd5b 	bl	8000500 <HD44780_SetCursor>
  HD44780_PrintStr("Iniciando...");
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <DISPLAY_Init+0xdc>)
 8000a4c:	f7ff fdcc 	bl	80005e8 <HD44780_PrintStr>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000002f 	.word	0x2000002f
 8000a5c:	20000030 	.word	0x20000030
 8000a60:	2000002c 	.word	0x2000002c
 8000a64:	2000002d 	.word	0x2000002d
 8000a68:	2000002e 	.word	0x2000002e
 8000a6c:	08005208 	.word	0x08005208

08000a70 <DISPLAY_Update>:

void DISPLAY_Update()
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	// En cada pasada se envia una parte de los datos al display, sino tarda mucho
	switch(pasada)
 8000a74:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <DISPLAY_Update+0x140>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b06      	cmp	r3, #6
 8000a7a:	f200 808b 	bhi.w	8000b94 <DISPLAY_Update+0x124>
 8000a7e:	a201      	add	r2, pc, #4	; (adr r2, 8000a84 <DISPLAY_Update+0x14>)
 8000a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a84:	08000aa1 	.word	0x08000aa1
 8000a88:	08000aab 	.word	0x08000aab
 8000a8c:	08000ad3 	.word	0x08000ad3
 8000a90:	08000afb 	.word	0x08000afb
 8000a94:	08000b23 	.word	0x08000b23
 8000a98:	08000b49 	.word	0x08000b49
 8000a9c:	08000b6f 	.word	0x08000b6f
	{
		case 0:
			HD44780_Clear();
 8000aa0:	f7ff fd1a 	bl	80004d8 <HD44780_Clear>
			HD44780_NoCursor();
 8000aa4:	f7ff fd74 	bl	8000590 <HD44780_NoCursor>
			break;
 8000aa8:	e074      	b.n	8000b94 <DISPLAY_Update+0x124>
		case 1:
			HD44780_SetCursor(0,0);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff fd27 	bl	8000500 <HD44780_SetCursor>

			if(medicion_activa==0 && flag_medir)
 8000ab2:	4b40      	ldr	r3, [pc, #256]	; (8000bb4 <DISPLAY_Update+0x144>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d107      	bne.n	8000aca <DISPLAY_Update+0x5a>
 8000aba:	4b3f      	ldr	r3, [pc, #252]	; (8000bb8 <DISPLAY_Update+0x148>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <DISPLAY_Update+0x5a>
			{
				HD44780_PrintStr("ME1*");
 8000ac2:	483e      	ldr	r0, [pc, #248]	; (8000bbc <DISPLAY_Update+0x14c>)
 8000ac4:	f7ff fd90 	bl	80005e8 <HD44780_PrintStr>
			}
			else
			{
				HD44780_PrintStr("ME1 ");
			}
			break;
 8000ac8:	e064      	b.n	8000b94 <DISPLAY_Update+0x124>
				HD44780_PrintStr("ME1 ");
 8000aca:	483d      	ldr	r0, [pc, #244]	; (8000bc0 <DISPLAY_Update+0x150>)
 8000acc:	f7ff fd8c 	bl	80005e8 <HD44780_PrintStr>
			break;
 8000ad0:	e060      	b.n	8000b94 <DISPLAY_Update+0x124>
		case 2:
			HD44780_SetCursor(6,0);
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2006      	movs	r0, #6
 8000ad6:	f7ff fd13 	bl	8000500 <HD44780_SetCursor>
			if(medicion_activa==1 && flag_medir)
 8000ada:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <DISPLAY_Update+0x144>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d107      	bne.n	8000af2 <DISPLAY_Update+0x82>
 8000ae2:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <DISPLAY_Update+0x148>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <DISPLAY_Update+0x82>
			{
				HD44780_PrintStr("ME2*");
 8000aea:	4836      	ldr	r0, [pc, #216]	; (8000bc4 <DISPLAY_Update+0x154>)
 8000aec:	f7ff fd7c 	bl	80005e8 <HD44780_PrintStr>
			}
			else
			{
				HD44780_PrintStr("ME2 ");
			}
			break;
 8000af0:	e050      	b.n	8000b94 <DISPLAY_Update+0x124>
				HD44780_PrintStr("ME2 ");
 8000af2:	4835      	ldr	r0, [pc, #212]	; (8000bc8 <DISPLAY_Update+0x158>)
 8000af4:	f7ff fd78 	bl	80005e8 <HD44780_PrintStr>
			break;
 8000af8:	e04c      	b.n	8000b94 <DISPLAY_Update+0x124>
		case 3:
			HD44780_SetCursor(12, 0);
 8000afa:	2100      	movs	r1, #0
 8000afc:	200c      	movs	r0, #12
 8000afe:	f7ff fcff 	bl	8000500 <HD44780_SetCursor>
			if(medicion_activa==2 && flag_medir)
 8000b02:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <DISPLAY_Update+0x144>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d107      	bne.n	8000b1a <DISPLAY_Update+0xaa>
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <DISPLAY_Update+0x148>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <DISPLAY_Update+0xaa>
			{
				HD44780_PrintStr("ME3*");
 8000b12:	482e      	ldr	r0, [pc, #184]	; (8000bcc <DISPLAY_Update+0x15c>)
 8000b14:	f7ff fd68 	bl	80005e8 <HD44780_PrintStr>
			}
			else
			{
				HD44780_PrintStr("ME3 ");
			}
			break;
 8000b18:	e03c      	b.n	8000b94 <DISPLAY_Update+0x124>
				HD44780_PrintStr("ME3 ");
 8000b1a:	482d      	ldr	r0, [pc, #180]	; (8000bd0 <DISPLAY_Update+0x160>)
 8000b1c:	f7ff fd64 	bl	80005e8 <HD44780_PrintStr>
			break;
 8000b20:	e038      	b.n	8000b94 <DISPLAY_Update+0x124>
		case 4:
			HD44780_SetCursor(0, 1);
 8000b22:	2101      	movs	r1, #1
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fceb 	bl	8000500 <HD44780_SetCursor>
			if(mediciones[0] == 0)
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <DISPLAY_Update+0x164>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d103      	bne.n	8000b3a <DISPLAY_Update+0xca>
			{
				HD44780_PrintStr("0  ");
 8000b32:	4829      	ldr	r0, [pc, #164]	; (8000bd8 <DISPLAY_Update+0x168>)
 8000b34:	f7ff fd58 	bl	80005e8 <HD44780_PrintStr>
			}
			else
			{
				WriteValue(mediciones[0]);
			}
			break;
 8000b38:	e02c      	b.n	8000b94 <DISPLAY_Update+0x124>
				WriteValue(mediciones[0]);
 8000b3a:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <DISPLAY_Update+0x164>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fd74 	bl	800062e <WriteValue>
			break;
 8000b46:	e025      	b.n	8000b94 <DISPLAY_Update+0x124>
		case 5:
			HD44780_SetCursor(6, 1);
 8000b48:	2101      	movs	r1, #1
 8000b4a:	2006      	movs	r0, #6
 8000b4c:	f7ff fcd8 	bl	8000500 <HD44780_SetCursor>
			if(mediciones[1] == 0)
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <DISPLAY_Update+0x164>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d103      	bne.n	8000b60 <DISPLAY_Update+0xf0>
			{
				HD44780_PrintStr("0  ");
 8000b58:	481f      	ldr	r0, [pc, #124]	; (8000bd8 <DISPLAY_Update+0x168>)
 8000b5a:	f7ff fd45 	bl	80005e8 <HD44780_PrintStr>
			}
			else
			{
				WriteValue(mediciones[1]);
			}
			break;
 8000b5e:	e019      	b.n	8000b94 <DISPLAY_Update+0x124>
				WriteValue(mediciones[1]);
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <DISPLAY_Update+0x164>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fd61 	bl	800062e <WriteValue>
			break;
 8000b6c:	e012      	b.n	8000b94 <DISPLAY_Update+0x124>
		case 6:
			HD44780_SetCursor(12, 1);
 8000b6e:	2101      	movs	r1, #1
 8000b70:	200c      	movs	r0, #12
 8000b72:	f7ff fcc5 	bl	8000500 <HD44780_SetCursor>
			if(mediciones[2] == 0)
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <DISPLAY_Update+0x164>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d103      	bne.n	8000b86 <DISPLAY_Update+0x116>
			{
				HD44780_PrintStr("0  ");
 8000b7e:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <DISPLAY_Update+0x168>)
 8000b80:	f7ff fd32 	bl	80005e8 <HD44780_PrintStr>
			}
			else
			{
				WriteValue(mediciones[2]);
			}
			break;
 8000b84:	e005      	b.n	8000b92 <DISPLAY_Update+0x122>
				WriteValue(mediciones[2]);
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <DISPLAY_Update+0x164>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fd4e 	bl	800062e <WriteValue>
			break;
 8000b92:	bf00      	nop
	}
	pasada++;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <DISPLAY_Update+0x140>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <DISPLAY_Update+0x140>)
 8000b9c:	6013      	str	r3, [r2, #0]
	if(pasada >MAX)
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <DISPLAY_Update+0x140>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	dd02      	ble.n	8000bac <DISPLAY_Update+0x13c>
	{
		pasada=1;
 8000ba6:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <DISPLAY_Update+0x140>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
	}
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000003c 	.word	0x2000003c
 8000bb4:	20000040 	.word	0x20000040
 8000bb8:	20000080 	.word	0x20000080
 8000bbc:	08005218 	.word	0x08005218
 8000bc0:	08005220 	.word	0x08005220
 8000bc4:	08005228 	.word	0x08005228
 8000bc8:	08005230 	.word	0x08005230
 8000bcc:	08005238 	.word	0x08005238
 8000bd0:	08005240 	.word	0x08005240
 8000bd4:	20000048 	.word	0x20000048
 8000bd8:	08005248 	.word	0x08005248

08000bdc <HEARTBEAT_Init>:
#include "task-heartbeat.h"

void HEARTBEAT_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	//Pin_Config(Heartbeat_GPIO_Port, Heartbeat_Pin, GPIO_MODE_OUTPUT_PP, GPIO_PULLDOWN, GPIO_SPEED_FREQ_LOW);
	Pin_Write(Heartbeat_GPIO_Port, Heartbeat_Pin, ON);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be6:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <HEARTBEAT_Init+0x14>)
 8000be8:	f7ff fe1d 	bl	8000826 <Pin_Write>
	return;
 8000bec:	bf00      	nop
}
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <HEARTBEAT_Update>:

void HEARTBEAT_Update(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	Pin_Toggle(Heartbeat_GPIO_Port, Heartbeat_Pin);
 8000bf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <HEARTBEAT_Update+0x14>)
 8000bfe:	f7ff fe24 	bl	800084a <Pin_Toggle>
	return;
 8000c02:	bf00      	nop
}
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40020000 	.word	0x40020000

08000c0c <MEDICIONES_Update>:

	return;
}

void MEDICIONES_Update(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
	if(flag_resetear_mediciones)
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <MEDICIONES_Update+0xa4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d014      	beq.n	8000c42 <MEDICIONES_Update+0x36>
	{
		flag_resetear_mediciones=0;
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <MEDICIONES_Update+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
		mediciones[0]=0;
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <MEDICIONES_Update+0xa8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
		mediciones[1]=0;
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <MEDICIONES_Update+0xa8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
		mediciones[2]=0;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MEDICIONES_Update+0xa8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
		flag_medir=0;
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <MEDICIONES_Update+0xac>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
		timer_conteo=0;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <MEDICIONES_Update+0xb0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
		medicion_activa=0;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <MEDICIONES_Update+0xb4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
	}

	if(flag_medir)
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MEDICIONES_Update+0xac>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d02c      	beq.n	8000ca4 <MEDICIONES_Update+0x98>
	{
		//Si se detecta un pulso, sumar a medicion activa
		if(flag_sumar_uno)
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MEDICIONES_Update+0xb8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00b      	beq.n	8000c6a <MEDICIONES_Update+0x5e>
		{
			flag_sumar_uno=0; 	//Se resetea flag
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MEDICIONES_Update+0xb8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
			mediciones[medicion_activa]++;
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MEDICIONES_Update+0xb4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a15      	ldr	r2, [pc, #84]	; (8000cb4 <MEDICIONES_Update+0xa8>)
 8000c5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c62:	3201      	adds	r2, #1
 8000c64:	4913      	ldr	r1, [pc, #76]	; (8000cb4 <MEDICIONES_Update+0xa8>)
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		//Timer de mediciones (1 minuto, 6000 ticks, 3 veces)
		timer_conteo++;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MEDICIONES_Update+0xb0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MEDICIONES_Update+0xb0>)
 8000c72:	6013      	str	r3, [r2, #0]
		if(timer_conteo > CICLOS_CONTEO)	//Si termina el minuto, ver si se pasa a siguiente medicion o se termina
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MEDICIONES_Update+0xb0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c7c:	dd12      	ble.n	8000ca4 <MEDICIONES_Update+0x98>
		{
			timer_conteo=0;
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MEDICIONES_Update+0xb0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
			medicion_activa++;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MEDICIONES_Update+0xb4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <MEDICIONES_Update+0xb4>)
 8000c8c:	6013      	str	r3, [r2, #0]
			if(medicion_activa > 2)	//finalizar mediciones o continuar
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MEDICIONES_Update+0xb4>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	dd06      	ble.n	8000ca4 <MEDICIONES_Update+0x98>
			{
				flag_medir = 0;		//Se deja de medir
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MEDICIONES_Update+0xac>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
				medicion_activa = 0; //Se resetea medición activa
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MEDICIONES_Update+0xb4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
			}
		}
	}
	return;
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
}
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000048 	.word	0x20000048
 8000cb8:	20000080 	.word	0x20000080
 8000cbc:	20000044 	.word	0x20000044
 8000cc0:	20000040 	.word	0x20000040
 8000cc4:	20000034 	.word	0x20000034

08000cc8 <ANTIRREBOTE_Init>:
static GPIO_PinState estado_actual_B1;
GPIO_PinState estado_anterior_B1;
GPIO_PinState vector_entradas[] = {0,0,0,0,0};

void ANTIRREBOTE_Init(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <ANTIRREBOTE_Update>:

//Update cada 10 ms, 5 lecturas
void ANTIRREBOTE_Update(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
	GPIO_PinState entradaB1;

	int suma_entradas=0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
	int j=0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]

	entradaB1 = Pin_Read(B1_GPIO_Port, B1_Pin);
 8000ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cea:	4825      	ldr	r0, [pc, #148]	; (8000d80 <ANTIRREBOTE_Update+0xa8>)
 8000cec:	f7ff fdbc 	bl	8000868 <Pin_Read>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]

	//Agrego valor de entrada actual
	vector_entradas[cont_estados_B1] = entradaB1;
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <ANTIRREBOTE_Update+0xac>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4923      	ldr	r1, [pc, #140]	; (8000d88 <ANTIRREBOTE_Update+0xb0>)
 8000cfa:	79fa      	ldrb	r2, [r7, #7]
 8000cfc:	54ca      	strb	r2, [r1, r3]
	cont_estados_B1++;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <ANTIRREBOTE_Update+0xac>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <ANTIRREBOTE_Update+0xac>)
 8000d06:	6013      	str	r3, [r2, #0]
	if(cont_estados_B1>4)
 8000d08:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <ANTIRREBOTE_Update+0xac>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	dd02      	ble.n	8000d16 <ANTIRREBOTE_Update+0x3e>
	{
		cont_estados_B1 = 0;
 8000d10:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <ANTIRREBOTE_Update+0xac>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
	}

	//sumo todos los valores del vector
	for(j=0; j<5; j++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	e00a      	b.n	8000d32 <ANTIRREBOTE_Update+0x5a>
	{
		suma_entradas += vector_entradas[j];
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <ANTIRREBOTE_Update+0xb0>)
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	4413      	add	r3, r2
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
	for(j=0; j<5; j++)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	ddf1      	ble.n	8000d1c <ANTIRREBOTE_Update+0x44>
	}

	//Comparo ultimos valores de entrada con la actual
	estado_anterior_B1 = estado_actual_B1;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <ANTIRREBOTE_Update+0xb4>)
 8000d3a:	781a      	ldrb	r2, [r3, #0]
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <ANTIRREBOTE_Update+0xb8>)
 8000d3e:	701a      	strb	r2, [r3, #0]
	if((estado_anterior_B1 == OFF) && (suma_entradas > 3))
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <ANTIRREBOTE_Update+0xb8>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d106      	bne.n	8000d56 <ANTIRREBOTE_Update+0x7e>
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	dd03      	ble.n	8000d56 <ANTIRREBOTE_Update+0x7e>
	{
		estado_actual_B1 = ON;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <ANTIRREBOTE_Update+0xb4>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			j=j;
		}
	}
}
 8000d54:	e00f      	b.n	8000d76 <ANTIRREBOTE_Update+0x9e>
	else if((estado_anterior_B1 == ON) && (suma_entradas < 2))
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <ANTIRREBOTE_Update+0xb8>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d10b      	bne.n	8000d76 <ANTIRREBOTE_Update+0x9e>
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	dc08      	bgt.n	8000d76 <ANTIRREBOTE_Update+0x9e>
		estado_actual_B1 = OFF;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <ANTIRREBOTE_Update+0xb4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
		Pin_Write(LD2_GPIO_Port, LD2_Pin, ON); //Parece que el pulsador on-board es normal cerrado
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	4809      	ldr	r0, [pc, #36]	; (8000d94 <ANTIRREBOTE_Update+0xbc>)
 8000d70:	f7ff fd59 	bl	8000826 <Pin_Write>
			j=j;
 8000d74:	e7fe      	b.n	8000d74 <ANTIRREBOTE_Update+0x9c>
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40020800 	.word	0x40020800
 8000d84:	20000054 	.word	0x20000054
 8000d88:	2000005c 	.word	0x2000005c
 8000d8c:	20000058 	.word	0x20000058
 8000d90:	20000059 	.word	0x20000059
 8000d94:	40020000 	.word	0x40020000

08000d98 <PULSADOR_MEDIR_Init>:
int flag_medir = 0;
int flag_resetear_mediciones = 1;


void PULSADOR_MEDIR_Init(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
	int i=0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
	for(i=0; i<ENTRADAS; i++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	e007      	b.n	8000db8 <PULSADOR_MEDIR_Init+0x20>
	{
		vector_entradas_B2[i]=0;
 8000da8:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <PULSADOR_MEDIR_Init+0x34>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
	for(i=0; i<ENTRADAS; i++)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3301      	adds	r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b13      	cmp	r3, #19
 8000dbc:	ddf4      	ble.n	8000da8 <PULSADOR_MEDIR_Init+0x10>
	}
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	2000006c 	.word	0x2000006c

08000dd0 <PULSADOR_MEDIR_Update>:

//Update cada 10 ms, 5 lecturas
void PULSADOR_MEDIR_Update(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
		GPIO_PinState entradaB2;

		int suma_entradas=0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
		int j=0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]

		entradaB2 = Pin_Read(B2_GPIO_Port, B2_Pin);
 8000dde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de2:	4827      	ldr	r0, [pc, #156]	; (8000e80 <PULSADOR_MEDIR_Update+0xb0>)
 8000de4:	f7ff fd40 	bl	8000868 <Pin_Read>
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]

		//Agrego valor de entrada actual
		vector_entradas_B2[cont_estados_B2] = entradaB2;
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <PULSADOR_MEDIR_Update+0xb4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4925      	ldr	r1, [pc, #148]	; (8000e88 <PULSADOR_MEDIR_Update+0xb8>)
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	54ca      	strb	r2, [r1, r3]
		cont_estados_B2++;
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <PULSADOR_MEDIR_Update+0xb4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <PULSADOR_MEDIR_Update+0xb4>)
 8000dfe:	6013      	str	r3, [r2, #0]
		if(cont_estados_B2>9)
 8000e00:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <PULSADOR_MEDIR_Update+0xb4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b09      	cmp	r3, #9
 8000e06:	dd02      	ble.n	8000e0e <PULSADOR_MEDIR_Update+0x3e>
		{
			cont_estados_B2 = 0;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <PULSADOR_MEDIR_Update+0xb4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
		}

		//sumo todos los valores del vector
		for(j=0; j<10; j++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	e00a      	b.n	8000e2a <PULSADOR_MEDIR_Update+0x5a>
		{
			suma_entradas += vector_entradas_B2[j];
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <PULSADOR_MEDIR_Update+0xb8>)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4413      	add	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
		for(j=0; j<10; j++)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	3301      	adds	r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	ddf1      	ble.n	8000e14 <PULSADOR_MEDIR_Update+0x44>
		}

		//Comparo ultimos valores de entrada con la actual
		estado_anterior_B2 = estado_actual_B2;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <PULSADOR_MEDIR_Update+0xbc>)
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <PULSADOR_MEDIR_Update+0xc0>)
 8000e36:	701a      	strb	r2, [r3, #0]
		if((estado_anterior_B2 == OFF) && (suma_entradas > 8))
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <PULSADOR_MEDIR_Update+0xc0>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d105      	bne.n	8000e4c <PULSADOR_MEDIR_Update+0x7c>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	dd02      	ble.n	8000e4c <PULSADOR_MEDIR_Update+0x7c>
		{
			estado_actual_B2 = ON;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <PULSADOR_MEDIR_Update+0xbc>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
		}

		if(estado_actual_B2== ON)
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <PULSADOR_MEDIR_Update+0xbc>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d110      	bne.n	8000e76 <PULSADOR_MEDIR_Update+0xa6>
		{
			estado_actual_B2 = OFF;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <PULSADOR_MEDIR_Update+0xbc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]

			if(!flag_medir)
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <PULSADOR_MEDIR_Update+0xc4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d103      	bne.n	8000e6a <PULSADOR_MEDIR_Update+0x9a>
			{
				flag_medir = ON;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <PULSADOR_MEDIR_Update+0xc4>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
				flag_medir = OFF;
				flag_resetear_mediciones = ON;
			}
		}

}
 8000e68:	e005      	b.n	8000e76 <PULSADOR_MEDIR_Update+0xa6>
				flag_medir = OFF;
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <PULSADOR_MEDIR_Update+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
				flag_resetear_mediciones = ON;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <PULSADOR_MEDIR_Update+0xc8>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	601a      	str	r2, [r3, #0]
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40020800 	.word	0x40020800
 8000e84:	20000064 	.word	0x20000064
 8000e88:	2000006c 	.word	0x2000006c
 8000e8c:	20000068 	.word	0x20000068
 8000e90:	20000069 	.word	0x20000069
 8000e94:	20000080 	.word	0x20000080
 8000e98:	20000000 	.word	0x20000000

08000e9c <WATCHDOG_Init>:
#include "task-watchdog.h"

extern WWDG_HandleTypeDef hwwdg;

void WATCHDOG_Init(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <WATCHDOG_Update>:

void WATCHDOG_Update(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_WWDG_Refresh(&hwwdg);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <WATCHDOG_Update+0x10>)
 8000eb2:	f003 fc33 	bl	800471c <HAL_WWDG_Refresh>
	return;
 8000eb6:	bf00      	nop
}
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200001c8 	.word	0x200001c8

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f000 fc80 	bl	80017c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f822 	bl	8000f10 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8000ecc:	f000 f96e 	bl	80011ac <MX_GPIO_Init>
  SYSTEM_Init();
 8000ed0:	f003 fff8 	bl	8004ec4 <SYSTEM_Init>
  SCH_Start();
 8000ed4:	f003 ff14 	bl	8004d00 <SCH_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 f968 	bl	80011ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000edc:	f000 f946 	bl	800116c <MX_DMA_Init>
  MX_TIM11_Init();
 8000ee0:	f000 f902 	bl	80010e8 <MX_TIM11_Init>
  MX_WWDG_Init();
 8000ee4:	f000 f924 	bl	8001130 <MX_WWDG_Init>
  MX_ADC1_Init();
 8000ee8:	f000 f87e 	bl	8000fe8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000eec:	f000 f8ce 	bl	800108c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buf, ADC_BUF_LEN);
 8000ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ef4:	4904      	ldr	r1, [pc, #16]	; (8000f08 <main+0x48>)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <main+0x4c>)
 8000ef8:	f000 fd10 	bl	800191c <HAL_ADC_Start_DMA>
  DISPLAY_Init(2);														//DISPLAY
 8000efc:	2002      	movs	r0, #2
 8000efe:	f7ff fd47 	bl	8000990 <DISPLAY_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 SCH_Dispatch_Tasks();
 8000f02:	f003 fd4f 	bl	80049a4 <SCH_Dispatch_Tasks>
 8000f06:	e7fc      	b.n	8000f02 <main+0x42>
 8000f08:	200001dc 	.word	0x200001dc
 8000f0c:	20000084 	.word	0x20000084

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b094      	sub	sp, #80	; 0x50
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	2230      	movs	r2, #48	; 0x30
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f004 f914 	bl	800514c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <SystemClock_Config+0xd0>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	4a28      	ldr	r2, [pc, #160]	; (8000fe0 <SystemClock_Config+0xd0>)
 8000f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f42:	6413      	str	r3, [r2, #64]	; 0x40
 8000f44:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <SystemClock_Config+0xd0>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <SystemClock_Config+0xd4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <SystemClock_Config+0xd4>)
 8000f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <SystemClock_Config+0xd4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f84:	2310      	movs	r3, #16
 8000f86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f88:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f92:	2307      	movs	r3, #7
 8000f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 fbd6 	bl	800374c <HAL_RCC_OscConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fa6:	f000 f9b5 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	230f      	movs	r3, #15
 8000fac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 fe37 	bl	8003c3c <HAL_RCC_ClockConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000fd4:	f000 f99e 	bl	8001314 <Error_Handler>
  }
}
 8000fd8:	bf00      	nop
 8000fda:	3750      	adds	r7, #80	; 0x50
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_ADC1_Init+0x98>)
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <MX_ADC1_Init+0x9c>)
 8000ffe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_ADC1_Init+0x98>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_ADC1_Init+0x98>)
 800100e:	2201      	movs	r2, #1
 8001010:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_ADC1_Init+0x98>)
 8001014:	2201      	movs	r2, #1
 8001016:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_ADC1_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_ADC1_Init+0x98>)
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <MX_ADC1_Init+0xa0>)
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_ADC1_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_ADC1_Init+0x98>)
 8001034:	2201      	movs	r2, #1
 8001036:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_ADC1_Init+0x98>)
 800103a:	2201      	movs	r2, #1
 800103c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_ADC1_Init+0x98>)
 8001042:	2201      	movs	r2, #1
 8001044:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001046:	480e      	ldr	r0, [pc, #56]	; (8001080 <MX_ADC1_Init+0x98>)
 8001048:	f000 fc24 	bl	8001894 <HAL_ADC_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001052:	f000 f95f 	bl	8001314 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_ADC1_Init+0x98>)
 8001068:	f000 fdc0 	bl	8001bec <HAL_ADC_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001072:	f000 f94f 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000084 	.word	0x20000084
 8001084:	40012000 	.word	0x40012000
 8001088:	0f000001 	.word	0x0f000001

0800108c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_I2C1_Init+0x50>)
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_I2C1_Init+0x54>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_I2C1_Init+0x50>)
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x58>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_I2C1_Init+0x50>)
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_I2C1_Init+0x50>)
 80010ca:	f001 fef3 	bl	8002eb4 <HAL_I2C_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d4:	f000 f91e 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000012c 	.word	0x2000012c
 80010e0:	40005400 	.word	0x40005400
 80010e4:	000186a0 	.word	0x000186a0

080010e8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_TIM11_Init+0x40>)
 80010ee:	4a0f      	ldr	r2, [pc, #60]	; (800112c <MX_TIM11_Init+0x44>)
 80010f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <MX_TIM11_Init+0x40>)
 80010f4:	2253      	movs	r2, #83	; 0x53
 80010f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_TIM11_Init+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_TIM11_Init+0x40>)
 8001100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001104:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_TIM11_Init+0x40>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_TIM11_Init+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_TIM11_Init+0x40>)
 8001114:	f002 ffe4 	bl	80040e0 <HAL_TIM_Base_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800111e:	f000 f8f9 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000180 	.word	0x20000180
 800112c:	40014800 	.word	0x40014800

08001130 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <MX_WWDG_Init+0x34>)
 8001136:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <MX_WWDG_Init+0x38>)
 8001138:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_2;
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <MX_WWDG_Init+0x34>)
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = WWDG_WINDOW;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_WWDG_Init+0x34>)
 8001142:	2263      	movs	r2, #99	; 0x63
 8001144:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = WWDG_TICKS;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <MX_WWDG_Init+0x34>)
 8001148:	2273      	movs	r2, #115	; 0x73
 800114a:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <MX_WWDG_Init+0x34>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8001152:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_WWDG_Init+0x34>)
 8001154:	f003 fabe 	bl	80046d4 <HAL_WWDG_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 800115e:	f000 f8d9 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200001c8 	.word	0x200001c8
 8001168:	40002c00 	.word	0x40002c00

0800116c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_DMA_Init+0x3c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <MX_DMA_Init+0x3c>)
 800117c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_DMA_Init+0x3c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2038      	movs	r0, #56	; 0x38
 8001194:	f001 f8a6 	bl	80022e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001198:	2038      	movs	r0, #56	; 0x38
 800119a:	f001 f8bf 	bl	800231c <HAL_NVIC_EnableIRQ>

}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b43      	ldr	r3, [pc, #268]	; (80012d4 <MX_GPIO_Init+0x128>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a42      	ldr	r2, [pc, #264]	; (80012d4 <MX_GPIO_Init+0x128>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <MX_GPIO_Init+0x128>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <MX_GPIO_Init+0x128>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a3b      	ldr	r2, [pc, #236]	; (80012d4 <MX_GPIO_Init+0x128>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <MX_GPIO_Init+0x128>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <MX_GPIO_Init+0x128>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a34      	ldr	r2, [pc, #208]	; (80012d4 <MX_GPIO_Init+0x128>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <MX_GPIO_Init+0x128>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <MX_GPIO_Init+0x128>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a2d      	ldr	r2, [pc, #180]	; (80012d4 <MX_GPIO_Init+0x128>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <MX_GPIO_Init+0x128>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|LD2_Pin|Heartbeat_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001238:	4827      	ldr	r0, [pc, #156]	; (80012d8 <MX_GPIO_Init+0x12c>)
 800123a:	f001 fe07 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800123e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001244:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4821      	ldr	r0, [pc, #132]	; (80012dc <MX_GPIO_Init+0x130>)
 8001256:	f001 fc5d 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800125a:	2308      	movs	r3, #8
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4819      	ldr	r0, [pc, #100]	; (80012d8 <MX_GPIO_Init+0x12c>)
 8001272:	f001 fc4f 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001276:	2320      	movs	r3, #32
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4812      	ldr	r0, [pc, #72]	; (80012d8 <MX_GPIO_Init+0x12c>)
 800128e:	f001 fc41 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Heartbeat_Pin */
  GPIO_InitStruct.Pin = Heartbeat_Pin;
 8001292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800129c:	2302      	movs	r3, #2
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Heartbeat_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <MX_GPIO_Init+0x12c>)
 80012ac:	f001 fc32 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80012b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0x130>)
 80012c6:	f001 fc25 	bl	8002b14 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020800 	.word	0x40020800

080012e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM11) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_TIM_PeriodElapsedCallback+0x16>
	MONITOR_IRQHandler();
 80012f2:	f003 fab7 	bl	8004864 <MONITOR_IRQHandler>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8001300:	f000 fa84 	bl	800180c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40014800 	.word	0x40014800
 8001310:	40010000 	.word	0x40010000

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	e7fe      	b.n	800131c <Error_Handler+0x8>
	...

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a0f      	ldr	r2, [pc, #60]	; (800136c <HAL_MspInit+0x4c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135e:	2007      	movs	r0, #7
 8001360:	f000 ffb5 	bl	80022ce <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2f      	ldr	r2, [pc, #188]	; (800144c <HAL_ADC_MspInit+0xdc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d158      	bne.n	8001444 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_ADC_MspInit+0xe0>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a2d      	ldr	r2, [pc, #180]	; (8001450 <HAL_ADC_MspInit+0xe0>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_ADC_MspInit+0xe0>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_ADC_MspInit+0xe0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a26      	ldr	r2, [pc, #152]	; (8001450 <HAL_ADC_MspInit+0xe0>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_ADC_MspInit+0xe0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ca:	2301      	movs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ce:	2303      	movs	r3, #3
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	481d      	ldr	r0, [pc, #116]	; (8001454 <HAL_ADC_MspInit+0xe4>)
 80013de:	f001 fb99 	bl	8002b14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 80013e4:	4a1d      	ldr	r2, [pc, #116]	; (800145c <HAL_ADC_MspInit+0xec>)
 80013e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 80013fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001400:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 8001404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001408:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 800140c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001410:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 8001414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001418:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 800141c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001420:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 800142a:	f000 ff93 	bl	8002354 <HAL_DMA_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001434:	f7ff ff6e 	bl	8001314 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 800143c:	639a      	str	r2, [r3, #56]	; 0x38
 800143e:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_ADC_MspInit+0xe8>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	200000cc 	.word	0x200000cc
 800145c:	40026410 	.word	0x40026410

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_I2C_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12c      	bne.n	80014dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800149e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a4:	2312      	movs	r3, #18
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b0:	2304      	movs	r3, #4
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <HAL_I2C_MspInit+0x8c>)
 80014bc:	f001 fb2a 	bl	8002b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40005400 	.word	0x40005400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020400 	.word	0x40020400

080014f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_TIM_Base_MspInit+0x48>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d115      	bne.n	800152e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_TIM_Base_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a0c      	ldr	r2, [pc, #48]	; (800153c <HAL_TIM_Base_MspInit+0x4c>)
 800150c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_TIM_Base_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	201a      	movs	r0, #26
 8001524:	f000 fede 	bl	80022e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001528:	201a      	movs	r0, #26
 800152a:	f000 fef7 	bl	800231c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40014800 	.word	0x40014800
 800153c:	40023800 	.word	0x40023800

08001540 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_TIM_Base_MspDeInit+0x2c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d108      	bne.n	8001564 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM11_MspDeInit 0 */

  /* USER CODE END TIM11_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM11_CLK_DISABLE();
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <HAL_TIM_Base_MspDeInit+0x30>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a06      	ldr	r2, [pc, #24]	; (8001570 <HAL_TIM_Base_MspDeInit+0x30>)
 8001558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44

    /* TIM11 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800155e:	201a      	movs	r0, #26
 8001560:	f000 feea 	bl	8002338 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM11_MspDeInit 1 */

  /* USER CODE END TIM11_MspDeInit 1 */
  }

}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40014800 	.word	0x40014800
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <HAL_WWDG_MspInit+0x48>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d115      	bne.n	80015b2 <HAL_WWDG_MspInit+0x3e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_WWDG_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <HAL_WWDG_MspInit+0x4c>)
 8001590:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_WWDG_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /* WWDG interrupt Init */
    HAL_NVIC_SetPriority(WWDG_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 fe9c 	bl	80022e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WWDG_IRQn);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f000 feb5 	bl	800231c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40002c00 	.word	0x40002c00
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	; 0x30
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_InitTick+0xd4>)
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <HAL_InitTick+0xd4>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6453      	str	r3, [r2, #68]	; 0x44
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <HAL_InitTick+0xd4>)
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f0:	f107 020c 	add.w	r2, r7, #12
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 fd3e 	bl	800407c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001600:	f002 fd28 	bl	8004054 <HAL_RCC_GetPCLK2Freq>
 8001604:	4603      	mov	r3, r0
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800160a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160c:	4a23      	ldr	r2, [pc, #140]	; (800169c <HAL_InitTick+0xd8>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	3b01      	subs	r3, #1
 8001616:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001618:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <HAL_InitTick+0xdc>)
 800161a:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <HAL_InitTick+0xe0>)
 800161c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_InitTick+0xdc>)
 8001620:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001624:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001626:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <HAL_InitTick+0xdc>)
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_InitTick+0xdc>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_InitTick+0xdc>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_InitTick+0xdc>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800163e:	4818      	ldr	r0, [pc, #96]	; (80016a0 <HAL_InitTick+0xdc>)
 8001640:	f002 fd4e 	bl	80040e0 <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800164a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800164e:	2b00      	cmp	r3, #0
 8001650:	d11b      	bne.n	800168a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <HAL_InitTick+0xdc>)
 8001654:	f002 fde8 	bl	8004228 <HAL_TIM_Base_Start_IT>
 8001658:	4603      	mov	r3, r0
 800165a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800165e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001662:	2b00      	cmp	r3, #0
 8001664:	d111      	bne.n	800168a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001666:	2019      	movs	r0, #25
 8001668:	f000 fe58 	bl	800231c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	d808      	bhi.n	8001684 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001672:	2200      	movs	r2, #0
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	2019      	movs	r0, #25
 8001678:	f000 fe34 	bl	80022e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_InitTick+0xe4>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e002      	b.n	800168a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800168a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800168e:	4618      	mov	r0, r3
 8001690:	3730      	adds	r7, #48	; 0x30
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	431bde83 	.word	0x431bde83
 80016a0:	200021dc 	.word	0x200021dc
 80016a4:	40010000 	.word	0x40010000
 80016a8:	20000008 	.word	0x20000008

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SCH_SysTick_Handler();
 80016f8:	f003 fbc2 	bl	8004e80 <SCH_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <WWDG_IRQHandler+0x10>)
 8001706:	f003 f819 	bl	800473c <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200001c8 	.word	0x200001c8

08001714 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800171a:	f002 fe16 	bl	800434a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200021dc 	.word	0x200021dc

08001728 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800172e:	f002 fe0c 	bl	800434a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000180 	.word	0x20000180

0800173c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <DMA2_Stream0_IRQHandler+0x10>)
 8001742:	f000 ff7d 	bl	8002640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200000cc 	.word	0x200000cc

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800177a:	490e      	ldr	r1, [pc, #56]	; (80017b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800177c:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001790:	4c0b      	ldr	r4, [pc, #44]	; (80017c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800179e:	f7ff ffd7 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a2:	f003 fc95 	bl	80050d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7ff fb8b 	bl	8000ec0 <main>
  bx  lr    
 80017aa:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 80017ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017b8:	080052c0 	.word	0x080052c0
  ldr r2, =_sbss
 80017bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017c0:	20002568 	.word	0x20002568

080017c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <HAL_Init+0x40>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_Init+0x40>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_Init+0x40>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 fd6c 	bl	80022ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff fee4 	bl	80015c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fd90 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x20>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_IncTick+0x24>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_IncTick+0x24>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	2000000c 	.word	0x2000000c
 8001830:	20002224 	.word	0x20002224

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20002224 	.word	0x20002224

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff ffee 	bl	8001834 <HAL_GetTick>
 8001858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d005      	beq.n	8001872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_Delay+0x44>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001872:	bf00      	nop
 8001874:	f7ff ffde 	bl	8001834 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d8f7      	bhi.n	8001874 <HAL_Delay+0x28>
  {
  }
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000000c 	.word	0x2000000c

08001894 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e033      	b.n	8001912 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fd5c 	bl	8001370 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d118      	bne.n	8001904 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018da:	f023 0302 	bic.w	r3, r3, #2
 80018de:	f043 0202 	orr.w	r2, r3, #2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 faa2 	bl	8001e30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	f043 0201 	orr.w	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
 8001902:	e001      	b.n	8001908 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001910:	7bfb      	ldrb	r3, [r7, #15]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_ADC_Start_DMA+0x1e>
 8001936:	2302      	movs	r3, #2
 8001938:	e0ce      	b.n	8001ad8 <HAL_ADC_Start_DMA+0x1bc>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d018      	beq.n	8001982 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001960:	4b5f      	ldr	r3, [pc, #380]	; (8001ae0 <HAL_ADC_Start_DMA+0x1c4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a5f      	ldr	r2, [pc, #380]	; (8001ae4 <HAL_ADC_Start_DMA+0x1c8>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9a      	lsrs	r2, r3, #18
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001974:	e002      	b.n	800197c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	3b01      	subs	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f9      	bne.n	8001976 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001990:	d107      	bne.n	80019a2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	f040 8086 	bne.w	8001abe <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f0:	d106      	bne.n	8001a00 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f023 0206 	bic.w	r2, r3, #6
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	645a      	str	r2, [r3, #68]	; 0x44
 80019fe:	e002      	b.n	8001a06 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a0e:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <HAL_ADC_Start_DMA+0x1cc>)
 8001a10:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a16:	4a35      	ldr	r2, [pc, #212]	; (8001aec <HAL_ADC_Start_DMA+0x1d0>)
 8001a18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	4a34      	ldr	r2, [pc, #208]	; (8001af0 <HAL_ADC_Start_DMA+0x1d4>)
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	4a33      	ldr	r2, [pc, #204]	; (8001af4 <HAL_ADC_Start_DMA+0x1d8>)
 8001a28:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a32:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a42:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a52:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	334c      	adds	r3, #76	; 0x4c
 8001a5e:	4619      	mov	r1, r3
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f000 fd24 	bl	80024b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10f      	bne.n	8001a94 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d129      	bne.n	8001ad6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	e020      	b.n	8001ad6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_ADC_Start_DMA+0x1dc>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_ADC_Start_DMA+0x1ba>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d114      	bne.n	8001ad6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	e00b      	b.n	8001ad6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f043 0210 	orr.w	r2, r3, #16
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f043 0201 	orr.w	r2, r3, #1
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	40012300 	.word	0x40012300
 8001aec:	08002029 	.word	0x08002029
 8001af0:	080020e3 	.word	0x080020e3
 8001af4:	080020ff 	.word	0x080020ff
 8001af8:	40012000 	.word	0x40012000

08001afc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Stop_DMA+0x1a>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e048      	b.n	8001ba8 <HAL_ADC_Stop_DMA+0xac>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0201 	bic.w	r2, r2, #1
 8001b2c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d130      	bne.n	8001b9e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b4a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d10f      	bne.n	8001b7a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fcfe 	bl	8002560 <HAL_DMA_Abort>
 8001b64:	4603      	mov	r3, r0
 8001b66:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001b88:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	f043 0201 	orr.w	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x1c>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e105      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x228>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b09      	cmp	r3, #9
 8001c16:	d925      	bls.n	8001c64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68d9      	ldr	r1, [r3, #12]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b1e      	subs	r3, #30
 8001c2e:	2207      	movs	r2, #7
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43da      	mvns	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68d9      	ldr	r1, [r3, #12]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4603      	mov	r3, r0
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4403      	add	r3, r0
 8001c56:	3b1e      	subs	r3, #30
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	e022      	b.n	8001caa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6919      	ldr	r1, [r3, #16]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	2207      	movs	r2, #7
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	400a      	ands	r2, r1
 8001c86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6919      	ldr	r1, [r3, #16]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4403      	add	r3, r0
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d824      	bhi.n	8001cfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b05      	subs	r3, #5
 8001cc4:	221f      	movs	r2, #31
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	3b05      	subs	r3, #5
 8001cee:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cfa:	e04c      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b0c      	cmp	r3, #12
 8001d02:	d824      	bhi.n	8001d4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	3b23      	subs	r3, #35	; 0x23
 8001d16:	221f      	movs	r2, #31
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	400a      	ands	r2, r1
 8001d24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3b23      	subs	r3, #35	; 0x23
 8001d40:	fa00 f203 	lsl.w	r2, r0, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d4c:	e023      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b41      	subs	r3, #65	; 0x41
 8001d60:	221f      	movs	r2, #31
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	3b41      	subs	r3, #65	; 0x41
 8001d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_ADC_ConfigChannel+0x234>)
 8001d98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <HAL_ADC_ConfigChannel+0x238>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d109      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x1cc>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b12      	cmp	r3, #18
 8001daa:	d105      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <HAL_ADC_ConfigChannel+0x238>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d123      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x21e>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d003      	beq.n	8001dd2 <HAL_ADC_ConfigChannel+0x1e6>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b11      	cmp	r3, #17
 8001dd0:	d11b      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d111      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_ADC_ConfigChannel+0x23c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <HAL_ADC_ConfigChannel+0x240>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	0c9a      	lsrs	r2, r3, #18
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dfc:	e002      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f9      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40012300 	.word	0x40012300
 8001e24:	40012000 	.word	0x40012000
 8001e28:	20000004 	.word	0x20000004
 8001e2c:	431bde83 	.word	0x431bde83

08001e30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e38:	4b79      	ldr	r3, [pc, #484]	; (8002020 <ADC_Init+0x1f0>)
 8001e3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	021a      	lsls	r2, r3, #8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6899      	ldr	r1, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	4a58      	ldr	r2, [pc, #352]	; (8002024 <ADC_Init+0x1f4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d022      	beq.n	8001f0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6899      	ldr	r1, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ef8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	e00f      	b.n	8001f2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0202 	bic.w	r2, r2, #2
 8001f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6899      	ldr	r1, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7e1b      	ldrb	r3, [r3, #24]
 8001f48:	005a      	lsls	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01b      	beq.n	8001f94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6859      	ldr	r1, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	3b01      	subs	r3, #1
 8001f88:	035a      	lsls	r2, r3, #13
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	e007      	b.n	8001fa4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	051a      	lsls	r2, r3, #20
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6899      	ldr	r1, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fe6:	025a      	lsls	r2, r3, #9
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6899      	ldr	r1, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	029a      	lsls	r2, r3, #10
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	609a      	str	r2, [r3, #8]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40012300 	.word	0x40012300
 8002024:	0f000001 	.word	0x0f000001

08002028 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002034:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800203e:	2b00      	cmp	r3, #0
 8002040:	d13c      	bne.n	80020bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d12b      	bne.n	80020b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002060:	2b00      	cmp	r3, #0
 8002062:	d127      	bne.n	80020b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	d006      	beq.n	8002080 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800207c:	2b00      	cmp	r3, #0
 800207e:	d119      	bne.n	80020b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0220 	bic.w	r2, r2, #32
 800208e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff fd7b 	bl	8001bb0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020ba:	e00e      	b.n	80020da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff fd85 	bl	8001bd8 <HAL_ADC_ErrorCallback>
}
 80020ce:	e004      	b.n	80020da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f7ff fd67 	bl	8001bc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2240      	movs	r2, #64	; 0x40
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f043 0204 	orr.w	r2, r3, #4
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7ff fd5a 	bl	8001bd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <__NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	db0b      	blt.n	80021ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	4907      	ldr	r1, [pc, #28]	; (80021c8 <__NVIC_EnableIRQ+0x38>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2001      	movs	r0, #1
 80021b2:	fa00 f202 	lsl.w	r2, r0, r2
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000e100 	.word	0xe000e100

080021cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db12      	blt.n	8002204 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	490a      	ldr	r1, [pc, #40]	; (8002210 <__NVIC_DisableIRQ+0x44>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	3320      	adds	r3, #32
 80021f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021f8:	f3bf 8f4f 	dsb	sy
}
 80021fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021fe:	f3bf 8f6f 	isb	sy
}
 8002202:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100

08002214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	db0a      	blt.n	800223e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	490c      	ldr	r1, [pc, #48]	; (8002260 <__NVIC_SetPriority+0x4c>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	0112      	lsls	r2, r2, #4
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	440b      	add	r3, r1
 8002238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800223c:	e00a      	b.n	8002254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4908      	ldr	r1, [pc, #32]	; (8002264 <__NVIC_SetPriority+0x50>)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	3b04      	subs	r3, #4
 800224c:	0112      	lsls	r2, r2, #4
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	440b      	add	r3, r1
 8002252:	761a      	strb	r2, [r3, #24]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000e100 	.word	0xe000e100
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f1c3 0307 	rsb	r3, r3, #7
 8002282:	2b04      	cmp	r3, #4
 8002284:	bf28      	it	cs
 8002286:	2304      	movcs	r3, #4
 8002288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3304      	adds	r3, #4
 800228e:	2b06      	cmp	r3, #6
 8002290:	d902      	bls.n	8002298 <NVIC_EncodePriority+0x30>
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3b03      	subs	r3, #3
 8002296:	e000      	b.n	800229a <NVIC_EncodePriority+0x32>
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	401a      	ands	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43d9      	mvns	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	4313      	orrs	r3, r2
         );
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ff28 	bl	800212c <__NVIC_SetPriorityGrouping>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f6:	f7ff ff3d 	bl	8002174 <__NVIC_GetPriorityGrouping>
 80022fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	6978      	ldr	r0, [r7, #20]
 8002302:	f7ff ffb1 	bl	8002268 <NVIC_EncodePriority>
 8002306:	4602      	mov	r2, r0
 8002308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff80 	bl	8002214 <__NVIC_SetPriority>
}
 8002314:	bf00      	nop
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff30 	bl	8002190 <__NVIC_EnableIRQ>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff40 	bl	80021cc <__NVIC_DisableIRQ>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff fa68 	bl	8001834 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e099      	b.n	80024a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002390:	e00f      	b.n	80023b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002392:	f7ff fa4f 	bl	8001834 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b05      	cmp	r3, #5
 800239e:	d908      	bls.n	80023b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2203      	movs	r2, #3
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e078      	b.n	80024a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e8      	bne.n	8002392 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	4b38      	ldr	r3, [pc, #224]	; (80024ac <HAL_DMA_Init+0x158>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	2b04      	cmp	r3, #4
 800240a:	d107      	bne.n	800241c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	4313      	orrs	r3, r2
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f023 0307 	bic.w	r3, r3, #7
 8002432:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	2b04      	cmp	r3, #4
 8002444:	d117      	bne.n	8002476 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00e      	beq.n	8002476 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fadf 	bl	8002a1c <DMA_CheckFifoParam>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002472:	2301      	movs	r3, #1
 8002474:	e016      	b.n	80024a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fa96 	bl	80029b0 <DMA_CalcBaseAndBitshift>
 8002484:	4603      	mov	r3, r0
 8002486:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	223f      	movs	r2, #63	; 0x3f
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	f010803f 	.word	0xf010803f

080024b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_DMA_Start_IT+0x26>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e040      	b.n	8002558 <HAL_DMA_Start_IT+0xa8>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d12f      	bne.n	800254a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2202      	movs	r2, #2
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fa28 	bl	8002954 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	223f      	movs	r2, #63	; 0x3f
 800250a:	409a      	lsls	r2, r3
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0216 	orr.w	r2, r2, #22
 800251e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0208 	orr.w	r2, r2, #8
 8002536:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e005      	b.n	8002556 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002552:	2302      	movs	r3, #2
 8002554:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002556:	7dfb      	ldrb	r3, [r7, #23]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800256e:	f7ff f961 	bl	8001834 <HAL_GetTick>
 8002572:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d008      	beq.n	8002592 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2280      	movs	r2, #128	; 0x80
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e052      	b.n	8002638 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0216 	bic.w	r2, r2, #22
 80025a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d103      	bne.n	80025c2 <HAL_DMA_Abort+0x62>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d007      	beq.n	80025d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0208 	bic.w	r2, r2, #8
 80025d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e2:	e013      	b.n	800260c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025e4:	f7ff f926 	bl	8001834 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	d90c      	bls.n	800260c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2203      	movs	r2, #3
 80025fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e015      	b.n	8002638 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1e4      	bne.n	80025e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	223f      	movs	r2, #63	; 0x3f
 8002620:	409a      	lsls	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800264c:	4b8e      	ldr	r3, [pc, #568]	; (8002888 <HAL_DMA_IRQHandler+0x248>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a8e      	ldr	r2, [pc, #568]	; (800288c <HAL_DMA_IRQHandler+0x24c>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0a9b      	lsrs	r3, r3, #10
 8002658:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	2208      	movs	r2, #8
 800266c:	409a      	lsls	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01a      	beq.n	80026ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	2208      	movs	r2, #8
 800269a:	409a      	lsls	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	2201      	movs	r2, #1
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d012      	beq.n	80026e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	2201      	movs	r2, #1
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f043 0202 	orr.w	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	2204      	movs	r2, #4
 80026e8:	409a      	lsls	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d012      	beq.n	8002718 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00b      	beq.n	8002718 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	2204      	movs	r2, #4
 8002706:	409a      	lsls	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f043 0204 	orr.w	r2, r3, #4
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	2210      	movs	r2, #16
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d043      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d03c      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2210      	movs	r2, #16
 800273c:	409a      	lsls	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d018      	beq.n	8002782 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d108      	bne.n	8002770 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d024      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
 800276e:	e01f      	b.n	80027b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01b      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
 8002780:	e016      	b.n	80027b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0208 	bic.w	r2, r2, #8
 800279e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	2220      	movs	r2, #32
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 808f 	beq.w	80028e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8087 	beq.w	80028e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2220      	movs	r2, #32
 80027d8:	409a      	lsls	r2, r3
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d136      	bne.n	8002858 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0216 	bic.w	r2, r2, #22
 80027f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002808:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <HAL_DMA_IRQHandler+0x1da>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0208 	bic.w	r2, r2, #8
 8002828:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	223f      	movs	r2, #63	; 0x3f
 8002830:	409a      	lsls	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284a:	2b00      	cmp	r3, #0
 800284c:	d07e      	beq.n	800294c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
        }
        return;
 8002856:	e079      	b.n	800294c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01d      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10d      	bne.n	8002890 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	2b00      	cmp	r3, #0
 800287a:	d031      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
 8002884:	e02c      	b.n	80028e0 <HAL_DMA_IRQHandler+0x2a0>
 8002886:	bf00      	nop
 8002888:	20000004 	.word	0x20000004
 800288c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d023      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
 80028a0:	e01e      	b.n	80028e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10f      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0210 	bic.w	r2, r2, #16
 80028be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d032      	beq.n	800294e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d022      	beq.n	800293a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2205      	movs	r2, #5
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	3301      	adds	r3, #1
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	429a      	cmp	r2, r3
 8002916:	d307      	bcc.n	8002928 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f2      	bne.n	800290c <HAL_DMA_IRQHandler+0x2cc>
 8002926:	e000      	b.n	800292a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002928:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
 800294a:	e000      	b.n	800294e <HAL_DMA_IRQHandler+0x30e>
        return;
 800294c:	bf00      	nop
    }
  }
}
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002970:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d108      	bne.n	8002994 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002992:	e007      	b.n	80029a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	3b10      	subs	r3, #16
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <DMA_CalcBaseAndBitshift+0x64>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ca:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <DMA_CalcBaseAndBitshift+0x68>)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d909      	bls.n	80029f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029e6:	f023 0303 	bic.w	r3, r3, #3
 80029ea:	1d1a      	adds	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	659a      	str	r2, [r3, #88]	; 0x58
 80029f0:	e007      	b.n	8002a02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	aaaaaaab 	.word	0xaaaaaaab
 8002a18:	08005280 	.word	0x08005280

08002a1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11f      	bne.n	8002a76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d856      	bhi.n	8002aea <DMA_CheckFifoParam+0xce>
 8002a3c:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <DMA_CheckFifoParam+0x28>)
 8002a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a42:	bf00      	nop
 8002a44:	08002a55 	.word	0x08002a55
 8002a48:	08002a67 	.word	0x08002a67
 8002a4c:	08002a55 	.word	0x08002a55
 8002a50:	08002aeb 	.word	0x08002aeb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d046      	beq.n	8002aee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a64:	e043      	b.n	8002aee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a6e:	d140      	bne.n	8002af2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a74:	e03d      	b.n	8002af2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7e:	d121      	bne.n	8002ac4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d837      	bhi.n	8002af6 <DMA_CheckFifoParam+0xda>
 8002a86:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <DMA_CheckFifoParam+0x70>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002aa3 	.word	0x08002aa3
 8002a94:	08002a9d 	.word	0x08002a9d
 8002a98:	08002ab5 	.word	0x08002ab5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa0:	e030      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d025      	beq.n	8002afa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab2:	e022      	b.n	8002afa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002abc:	d11f      	bne.n	8002afe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ac2:	e01c      	b.n	8002afe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d903      	bls.n	8002ad2 <DMA_CheckFifoParam+0xb6>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d003      	beq.n	8002ad8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ad0:	e018      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad6:	e015      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00e      	beq.n	8002b02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e00b      	b.n	8002b02 <DMA_CheckFifoParam+0xe6>
      break;
 8002aea:	bf00      	nop
 8002aec:	e00a      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002aee:	bf00      	nop
 8002af0:	e008      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
 8002af4:	e006      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002af6:	bf00      	nop
 8002af8:	e004      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002afa:	bf00      	nop
 8002afc:	e002      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;   
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
    }
  } 
  
  return status; 
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	e159      	b.n	8002de4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b30:	2201      	movs	r2, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	f040 8148 	bne.w	8002dde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d005      	beq.n	8002b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d130      	bne.n	8002bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	2203      	movs	r2, #3
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 0201 	and.w	r2, r3, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d017      	beq.n	8002c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d123      	bne.n	8002c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	08da      	lsrs	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3208      	adds	r2, #8
 8002c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	220f      	movs	r2, #15
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	08da      	lsrs	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3208      	adds	r2, #8
 8002c52:	69b9      	ldr	r1, [r7, #24]
 8002c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0203 	and.w	r2, r3, #3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a2 	beq.w	8002dde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b57      	ldr	r3, [pc, #348]	; (8002dfc <HAL_GPIO_Init+0x2e8>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a56      	ldr	r2, [pc, #344]	; (8002dfc <HAL_GPIO_Init+0x2e8>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b54      	ldr	r3, [pc, #336]	; (8002dfc <HAL_GPIO_Init+0x2e8>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb6:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_GPIO_Init+0x2ec>)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a49      	ldr	r2, [pc, #292]	; (8002e04 <HAL_GPIO_Init+0x2f0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d019      	beq.n	8002d16 <HAL_GPIO_Init+0x202>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a48      	ldr	r2, [pc, #288]	; (8002e08 <HAL_GPIO_Init+0x2f4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_GPIO_Init+0x1fe>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a47      	ldr	r2, [pc, #284]	; (8002e0c <HAL_GPIO_Init+0x2f8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00d      	beq.n	8002d0e <HAL_GPIO_Init+0x1fa>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a46      	ldr	r2, [pc, #280]	; (8002e10 <HAL_GPIO_Init+0x2fc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <HAL_GPIO_Init+0x1f6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a45      	ldr	r2, [pc, #276]	; (8002e14 <HAL_GPIO_Init+0x300>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_GPIO_Init+0x1f2>
 8002d02:	2304      	movs	r3, #4
 8002d04:	e008      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d06:	2307      	movs	r3, #7
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e004      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d16:	2300      	movs	r3, #0
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f002 0203 	and.w	r2, r2, #3
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	4093      	lsls	r3, r2
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d28:	4935      	ldr	r1, [pc, #212]	; (8002e00 <HAL_GPIO_Init+0x2ec>)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b38      	ldr	r3, [pc, #224]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a2f      	ldr	r2, [pc, #188]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a24      	ldr	r2, [pc, #144]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d8a:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dae:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db4:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd8:	4a0f      	ldr	r2, [pc, #60]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	f67f aea2 	bls.w	8002b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020c00 	.word	0x40020c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40013c00 	.word	0x40013c00

08002e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	887b      	ldrh	r3, [r7, #2]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e001      	b.n	8002e3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e5c:	787b      	ldrb	r3, [r7, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e68:	e003      	b.n	8002e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	041a      	lsls	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	619a      	str	r2, [r3, #24]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e90:	887a      	ldrh	r2, [r7, #2]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4013      	ands	r3, r2
 8002e96:	041a      	lsls	r2, r3, #16
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43d9      	mvns	r1, r3
 8002e9c:	887b      	ldrh	r3, [r7, #2]
 8002e9e:	400b      	ands	r3, r1
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e12b      	b.n	800311e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe fac0 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2224      	movs	r2, #36	; 0x24
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f18:	f001 f888 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8002f1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a81      	ldr	r2, [pc, #516]	; (8003128 <HAL_I2C_Init+0x274>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d807      	bhi.n	8002f38 <HAL_I2C_Init+0x84>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a80      	ldr	r2, [pc, #512]	; (800312c <HAL_I2C_Init+0x278>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	bf94      	ite	ls
 8002f30:	2301      	movls	r3, #1
 8002f32:	2300      	movhi	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e006      	b.n	8002f46 <HAL_I2C_Init+0x92>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a7d      	ldr	r2, [pc, #500]	; (8003130 <HAL_I2C_Init+0x27c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	bf94      	ite	ls
 8002f40:	2301      	movls	r3, #1
 8002f42:	2300      	movhi	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0e7      	b.n	800311e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4a78      	ldr	r2, [pc, #480]	; (8003134 <HAL_I2C_Init+0x280>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9b      	lsrs	r3, r3, #18
 8002f58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a6a      	ldr	r2, [pc, #424]	; (8003128 <HAL_I2C_Init+0x274>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d802      	bhi.n	8002f88 <HAL_I2C_Init+0xd4>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	3301      	adds	r3, #1
 8002f86:	e009      	b.n	8002f9c <HAL_I2C_Init+0xe8>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	4a69      	ldr	r2, [pc, #420]	; (8003138 <HAL_I2C_Init+0x284>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	099b      	lsrs	r3, r3, #6
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	495c      	ldr	r1, [pc, #368]	; (8003128 <HAL_I2C_Init+0x274>)
 8002fb8:	428b      	cmp	r3, r1
 8002fba:	d819      	bhi.n	8002ff0 <HAL_I2C_Init+0x13c>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1e59      	subs	r1, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fca:	1c59      	adds	r1, r3, #1
 8002fcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fd0:	400b      	ands	r3, r1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_I2C_Init+0x138>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1e59      	subs	r1, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fea:	e051      	b.n	8003090 <HAL_I2C_Init+0x1dc>
 8002fec:	2304      	movs	r3, #4
 8002fee:	e04f      	b.n	8003090 <HAL_I2C_Init+0x1dc>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d111      	bne.n	800301c <HAL_I2C_Init+0x168>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1e58      	subs	r0, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6859      	ldr	r1, [r3, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	440b      	add	r3, r1
 8003006:	fbb0 f3f3 	udiv	r3, r0, r3
 800300a:	3301      	adds	r3, #1
 800300c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e012      	b.n	8003042 <HAL_I2C_Init+0x18e>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e58      	subs	r0, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	0099      	lsls	r1, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003032:	3301      	adds	r3, #1
 8003034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Init+0x196>
 8003046:	2301      	movs	r3, #1
 8003048:	e022      	b.n	8003090 <HAL_I2C_Init+0x1dc>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10e      	bne.n	8003070 <HAL_I2C_Init+0x1bc>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1e58      	subs	r0, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6859      	ldr	r1, [r3, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	440b      	add	r3, r1
 8003060:	fbb0 f3f3 	udiv	r3, r0, r3
 8003064:	3301      	adds	r3, #1
 8003066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800306e:	e00f      	b.n	8003090 <HAL_I2C_Init+0x1dc>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e58      	subs	r0, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	0099      	lsls	r1, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	fbb0 f3f3 	udiv	r3, r0, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	6809      	ldr	r1, [r1, #0]
 8003094:	4313      	orrs	r3, r2
 8003096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6911      	ldr	r1, [r2, #16]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68d2      	ldr	r2, [r2, #12]
 80030ca:	4311      	orrs	r1, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	000186a0 	.word	0x000186a0
 800312c:	001e847f 	.word	0x001e847f
 8003130:	003d08ff 	.word	0x003d08ff
 8003134:	431bde83 	.word	0x431bde83
 8003138:	10624dd3 	.word	0x10624dd3

0800313c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	461a      	mov	r2, r3
 8003148:	460b      	mov	r3, r1
 800314a:	817b      	strh	r3, [r7, #10]
 800314c:	4613      	mov	r3, r2
 800314e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003150:	f7fe fb70 	bl	8001834 <HAL_GetTick>
 8003154:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b20      	cmp	r3, #32
 8003160:	f040 80e0 	bne.w	8003324 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2319      	movs	r3, #25
 800316a:	2201      	movs	r2, #1
 800316c:	4970      	ldr	r1, [pc, #448]	; (8003330 <HAL_I2C_Master_Transmit+0x1f4>)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f964 	bl	800343c <I2C_WaitOnFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
 800317c:	e0d3      	b.n	8003326 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_I2C_Master_Transmit+0x50>
 8003188:	2302      	movs	r3, #2
 800318a:	e0cc      	b.n	8003326 <HAL_I2C_Master_Transmit+0x1ea>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d007      	beq.n	80031b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2221      	movs	r2, #33	; 0x21
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2210      	movs	r2, #16
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	893a      	ldrh	r2, [r7, #8]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a50      	ldr	r2, [pc, #320]	; (8003334 <HAL_I2C_Master_Transmit+0x1f8>)
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031f4:	8979      	ldrh	r1, [r7, #10]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f89c 	bl	8003338 <I2C_MasterRequestWrite>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e08d      	b.n	8003326 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003220:	e066      	b.n	80032f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	6a39      	ldr	r1, [r7, #32]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f9de 	bl	80035e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b04      	cmp	r3, #4
 8003238:	d107      	bne.n	800324a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003248:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e06b      	b.n	8003326 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	781a      	ldrb	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b04      	cmp	r3, #4
 800328a:	d11b      	bne.n	80032c4 <HAL_I2C_Master_Transmit+0x188>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d017      	beq.n	80032c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	6a39      	ldr	r1, [r7, #32]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f9ce 	bl	800366a <I2C_WaitOnBTFFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d107      	bne.n	80032ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e01a      	b.n	8003326 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d194      	bne.n	8003222 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	00100002 	.word	0x00100002
 8003334:	ffff0000 	.word	0xffff0000

08003338 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	460b      	mov	r3, r1
 8003346:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d006      	beq.n	8003362 <I2C_MasterRequestWrite+0x2a>
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d003      	beq.n	8003362 <I2C_MasterRequestWrite+0x2a>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003360:	d108      	bne.n	8003374 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e00b      	b.n	800338c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	2b12      	cmp	r3, #18
 800337a:	d107      	bne.n	800338c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800338a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f84f 	bl	800343c <I2C_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00d      	beq.n	80033c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b2:	d103      	bne.n	80033bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e035      	b.n	800342c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c8:	d108      	bne.n	80033dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ca:	897b      	ldrh	r3, [r7, #10]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033d8:	611a      	str	r2, [r3, #16]
 80033da:	e01b      	b.n	8003414 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033dc:	897b      	ldrh	r3, [r7, #10]
 80033de:	11db      	asrs	r3, r3, #7
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f003 0306 	and.w	r3, r3, #6
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f063 030f 	orn	r3, r3, #15
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	490e      	ldr	r1, [pc, #56]	; (8003434 <I2C_MasterRequestWrite+0xfc>)
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f875 	bl	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e010      	b.n	800342c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800340a:	897b      	ldrh	r3, [r7, #10]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4907      	ldr	r1, [pc, #28]	; (8003438 <I2C_MasterRequestWrite+0x100>)
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f865 	bl	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	00010008 	.word	0x00010008
 8003438:	00010002 	.word	0x00010002

0800343c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800344c:	e025      	b.n	800349a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d021      	beq.n	800349a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003456:	f7fe f9ed 	bl	8001834 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d302      	bcc.n	800346c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d116      	bne.n	800349a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f043 0220 	orr.w	r2, r3, #32
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e023      	b.n	80034e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d10d      	bne.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	43da      	mvns	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4013      	ands	r3, r2
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bf0c      	ite	eq
 80034b6:	2301      	moveq	r3, #1
 80034b8:	2300      	movne	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	e00c      	b.n	80034da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4013      	ands	r3, r2
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf0c      	ite	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	2300      	movne	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d0b6      	beq.n	800344e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f8:	e051      	b.n	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003508:	d123      	bne.n	8003552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003518:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003522:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f043 0204 	orr.w	r2, r3, #4
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e046      	b.n	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d021      	beq.n	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355a:	f7fe f96b 	bl	8001834 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	429a      	cmp	r2, r3
 8003568:	d302      	bcc.n	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d116      	bne.n	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e020      	b.n	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d10c      	bne.n	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	43da      	mvns	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4013      	ands	r3, r2
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	bf14      	ite	ne
 80035ba:	2301      	movne	r3, #1
 80035bc:	2300      	moveq	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	e00b      	b.n	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d18d      	bne.n	80034fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f4:	e02d      	b.n	8003652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f878 	bl	80036ec <I2C_IsAcknowledgeFailed>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e02d      	b.n	8003662 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d021      	beq.n	8003652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe f911 	bl	8001834 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d116      	bne.n	8003652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f043 0220 	orr.w	r2, r3, #32
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e007      	b.n	8003662 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b80      	cmp	r3, #128	; 0x80
 800365e:	d1ca      	bne.n	80035f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003676:	e02d      	b.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 f837 	bl	80036ec <I2C_IsAcknowledgeFailed>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e02d      	b.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d021      	beq.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003690:	f7fe f8d0 	bl	8001834 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	429a      	cmp	r2, r3
 800369e:	d302      	bcc.n	80036a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d116      	bne.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e007      	b.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d1ca      	bne.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003702:	d11b      	bne.n	800373c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800370c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e267      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d075      	beq.n	8003856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800376a:	4b88      	ldr	r3, [pc, #544]	; (800398c <HAL_RCC_OscConfig+0x240>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d00c      	beq.n	8003790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003776:	4b85      	ldr	r3, [pc, #532]	; (800398c <HAL_RCC_OscConfig+0x240>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800377e:	2b08      	cmp	r3, #8
 8003780:	d112      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003782:	4b82      	ldr	r3, [pc, #520]	; (800398c <HAL_RCC_OscConfig+0x240>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378e:	d10b      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003790:	4b7e      	ldr	r3, [pc, #504]	; (800398c <HAL_RCC_OscConfig+0x240>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d05b      	beq.n	8003854 <HAL_RCC_OscConfig+0x108>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d157      	bne.n	8003854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e242      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b0:	d106      	bne.n	80037c0 <HAL_RCC_OscConfig+0x74>
 80037b2:	4b76      	ldr	r3, [pc, #472]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a75      	ldr	r2, [pc, #468]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e01d      	b.n	80037fc <HAL_RCC_OscConfig+0xb0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x98>
 80037ca:	4b70      	ldr	r3, [pc, #448]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a6f      	ldr	r2, [pc, #444]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80037d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b6d      	ldr	r3, [pc, #436]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a6c      	ldr	r2, [pc, #432]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e00b      	b.n	80037fc <HAL_RCC_OscConfig+0xb0>
 80037e4:	4b69      	ldr	r3, [pc, #420]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a68      	ldr	r2, [pc, #416]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b66      	ldr	r3, [pc, #408]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a65      	ldr	r2, [pc, #404]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7fe f816 	bl	8001834 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800380c:	f7fe f812 	bl	8001834 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e207      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	4b5b      	ldr	r3, [pc, #364]	; (800398c <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0xc0>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe f802 	bl	8001834 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003834:	f7fd fffe 	bl	8001834 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	; 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e1f3      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003846:	4b51      	ldr	r3, [pc, #324]	; (800398c <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0xe8>
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d063      	beq.n	800392a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003862:	4b4a      	ldr	r3, [pc, #296]	; (800398c <HAL_RCC_OscConfig+0x240>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_RCC_OscConfig+0x240>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003876:	2b08      	cmp	r3, #8
 8003878:	d11c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800387a:	4b44      	ldr	r3, [pc, #272]	; (800398c <HAL_RCC_OscConfig+0x240>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d116      	bne.n	80038b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_RCC_OscConfig+0x152>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e1c7      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389e:	4b3b      	ldr	r3, [pc, #236]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4937      	ldr	r1, [pc, #220]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b2:	e03a      	b.n	800392a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038bc:	4b34      	ldr	r3, [pc, #208]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fd ffb7 	bl	8001834 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fd ffb3 	bl	8001834 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e1a8      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	4b2b      	ldr	r3, [pc, #172]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e8:	4b28      	ldr	r3, [pc, #160]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4925      	ldr	r1, [pc, #148]	; (800398c <HAL_RCC_OscConfig+0x240>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]
 80038fc:	e015      	b.n	800392a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fe:	4b24      	ldr	r3, [pc, #144]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fd ff96 	bl	8001834 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390c:	f7fd ff92 	bl	8001834 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e187      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d036      	beq.n	80039a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d016      	beq.n	800396c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <HAL_RCC_OscConfig+0x248>)
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fd ff76 	bl	8001834 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394c:	f7fd ff72 	bl	8001834 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e167      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_OscConfig+0x240>)
 8003960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0x200>
 800396a:	e01b      	b.n	80039a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_OscConfig+0x248>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003972:	f7fd ff5f 	bl	8001834 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	e00e      	b.n	8003998 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800397a:	f7fd ff5b 	bl	8001834 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d907      	bls.n	8003998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e150      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
 800398c:	40023800 	.word	0x40023800
 8003990:	42470000 	.word	0x42470000
 8003994:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003998:	4b88      	ldr	r3, [pc, #544]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 800399a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ea      	bne.n	800397a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8097 	beq.w	8003ae0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b6:	4b81      	ldr	r3, [pc, #516]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	4b7d      	ldr	r3, [pc, #500]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	4a7c      	ldr	r2, [pc, #496]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d0:	6413      	str	r3, [r2, #64]	; 0x40
 80039d2:	4b7a      	ldr	r3, [pc, #488]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	4b77      	ldr	r3, [pc, #476]	; (8003bc0 <HAL_RCC_OscConfig+0x474>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d118      	bne.n	8003a20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ee:	4b74      	ldr	r3, [pc, #464]	; (8003bc0 <HAL_RCC_OscConfig+0x474>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a73      	ldr	r2, [pc, #460]	; (8003bc0 <HAL_RCC_OscConfig+0x474>)
 80039f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fa:	f7fd ff1b 	bl	8001834 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a02:	f7fd ff17 	bl	8001834 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e10c      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	4b6a      	ldr	r3, [pc, #424]	; (8003bc0 <HAL_RCC_OscConfig+0x474>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x2ea>
 8003a28:	4b64      	ldr	r3, [pc, #400]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	4a63      	ldr	r2, [pc, #396]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6713      	str	r3, [r2, #112]	; 0x70
 8003a34:	e01c      	b.n	8003a70 <HAL_RCC_OscConfig+0x324>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b05      	cmp	r3, #5
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x30c>
 8003a3e:	4b5f      	ldr	r3, [pc, #380]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a5e      	ldr	r2, [pc, #376]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4a:	4b5c      	ldr	r3, [pc, #368]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a5b      	ldr	r2, [pc, #364]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	6713      	str	r3, [r2, #112]	; 0x70
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0x324>
 8003a58:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	4a57      	ldr	r2, [pc, #348]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	6713      	str	r3, [r2, #112]	; 0x70
 8003a64:	4b55      	ldr	r3, [pc, #340]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a54      	ldr	r2, [pc, #336]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a6a:	f023 0304 	bic.w	r3, r3, #4
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d015      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a78:	f7fd fedc 	bl	8001834 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fd fed8 	bl	8001834 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e0cb      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a96:	4b49      	ldr	r3, [pc, #292]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ee      	beq.n	8003a80 <HAL_RCC_OscConfig+0x334>
 8003aa2:	e014      	b.n	8003ace <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa4:	f7fd fec6 	bl	8001834 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fd fec2 	bl	8001834 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0b5      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac2:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1ee      	bne.n	8003aac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad4:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	4a38      	ldr	r2, [pc, #224]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ade:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80a1 	beq.w	8003c2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aea:	4b34      	ldr	r3, [pc, #208]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d05c      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d141      	bne.n	8003b82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afe:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <HAL_RCC_OscConfig+0x478>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fd fe96 	bl	8001834 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fd fe92 	bl	8001834 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e087      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	4b27      	ldr	r3, [pc, #156]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	019b      	lsls	r3, r3, #6
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	3b01      	subs	r3, #1
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	491b      	ldr	r1, [pc, #108]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <HAL_RCC_OscConfig+0x478>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fd fe6b 	bl	8001834 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fd fe67 	bl	8001834 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e05c      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x416>
 8003b80:	e054      	b.n	8003c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <HAL_RCC_OscConfig+0x478>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fd fe54 	bl	8001834 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fd fe50 	bl	8001834 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e045      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x444>
 8003bae:	e03d      	b.n	8003c2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e038      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40007000 	.word	0x40007000
 8003bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <HAL_RCC_OscConfig+0x4ec>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d028      	beq.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d121      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d11a      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d111      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	3b01      	subs	r3, #1
 8003c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800

08003c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0cc      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c50:	4b68      	ldr	r3, [pc, #416]	; (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d90c      	bls.n	8003c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5e:	4b65      	ldr	r3, [pc, #404]	; (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b63      	ldr	r3, [pc, #396]	; (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0b8      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d020      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c90:	4b59      	ldr	r3, [pc, #356]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a58      	ldr	r2, [pc, #352]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ca8:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a52      	ldr	r2, [pc, #328]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb4:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	494d      	ldr	r1, [pc, #308]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d044      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d119      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e07f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfa:	4b3f      	ldr	r3, [pc, #252]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e06f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e067      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d1a:	4b37      	ldr	r3, [pc, #220]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f023 0203 	bic.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4934      	ldr	r1, [pc, #208]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d2c:	f7fd fd82 	bl	8001834 <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d34:	f7fd fd7e 	bl	8001834 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e04f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 020c 	and.w	r2, r3, #12
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d1eb      	bne.n	8003d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d20c      	bcs.n	8003d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b22      	ldr	r3, [pc, #136]	; (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e032      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d90:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4916      	ldr	r1, [pc, #88]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	490e      	ldr	r1, [pc, #56]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dc2:	f000 f821 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	490a      	ldr	r1, [pc, #40]	; (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003dd4:	5ccb      	ldrb	r3, [r1, r3]
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <HAL_RCC_ClockConfig+0x1c8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd fbee 	bl	80015c4 <HAL_InitTick>

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023c00 	.word	0x40023c00
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	08005268 	.word	0x08005268
 8003e00:	20000004 	.word	0x20000004
 8003e04:	20000008 	.word	0x20000008

08003e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e0c:	b094      	sub	sp, #80	; 0x50
 8003e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	647b      	str	r3, [r7, #68]	; 0x44
 8003e14:	2300      	movs	r3, #0
 8003e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e18:	2300      	movs	r3, #0
 8003e1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e20:	4b79      	ldr	r3, [pc, #484]	; (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d00d      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0x40>
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	f200 80e1 	bhi.w	8003ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x34>
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e3a:	e0db      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e3c:	4b73      	ldr	r3, [pc, #460]	; (800400c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e40:	e0db      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e42:	4b73      	ldr	r3, [pc, #460]	; (8004010 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e46:	e0d8      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e48:	4b6f      	ldr	r3, [pc, #444]	; (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e52:	4b6d      	ldr	r3, [pc, #436]	; (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d063      	beq.n	8003f26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5e:	4b6a      	ldr	r3, [pc, #424]	; (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	099b      	lsrs	r3, r3, #6
 8003e64:	2200      	movs	r2, #0
 8003e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e70:	633b      	str	r3, [r7, #48]	; 0x30
 8003e72:	2300      	movs	r3, #0
 8003e74:	637b      	str	r3, [r7, #52]	; 0x34
 8003e76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e7a:	4622      	mov	r2, r4
 8003e7c:	462b      	mov	r3, r5
 8003e7e:	f04f 0000 	mov.w	r0, #0
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	0159      	lsls	r1, r3, #5
 8003e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8c:	0150      	lsls	r0, r2, #5
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4621      	mov	r1, r4
 8003e94:	1a51      	subs	r1, r2, r1
 8003e96:	6139      	str	r1, [r7, #16]
 8003e98:	4629      	mov	r1, r5
 8003e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eac:	4659      	mov	r1, fp
 8003eae:	018b      	lsls	r3, r1, #6
 8003eb0:	4651      	mov	r1, sl
 8003eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	018a      	lsls	r2, r1, #6
 8003eba:	4651      	mov	r1, sl
 8003ebc:	ebb2 0801 	subs.w	r8, r2, r1
 8003ec0:	4659      	mov	r1, fp
 8003ec2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eda:	4690      	mov	r8, r2
 8003edc:	4699      	mov	r9, r3
 8003ede:	4623      	mov	r3, r4
 8003ee0:	eb18 0303 	adds.w	r3, r8, r3
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	462b      	mov	r3, r5
 8003ee8:	eb49 0303 	adc.w	r3, r9, r3
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003efa:	4629      	mov	r1, r5
 8003efc:	024b      	lsls	r3, r1, #9
 8003efe:	4621      	mov	r1, r4
 8003f00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f04:	4621      	mov	r1, r4
 8003f06:	024a      	lsls	r2, r1, #9
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0e:	2200      	movs	r2, #0
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f18:	f7fc f95c 	bl	80001d4 <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4613      	mov	r3, r2
 8003f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f24:	e058      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f26:	4b38      	ldr	r3, [pc, #224]	; (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	099b      	lsrs	r3, r3, #6
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	4611      	mov	r1, r2
 8003f32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f36:	623b      	str	r3, [r7, #32]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f40:	4642      	mov	r2, r8
 8003f42:	464b      	mov	r3, r9
 8003f44:	f04f 0000 	mov.w	r0, #0
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	0159      	lsls	r1, r3, #5
 8003f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f52:	0150      	lsls	r0, r2, #5
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4641      	mov	r1, r8
 8003f5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f5e:	4649      	mov	r1, r9
 8003f60:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f78:	ebb2 040a 	subs.w	r4, r2, sl
 8003f7c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	00eb      	lsls	r3, r5, #3
 8003f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f8e:	00e2      	lsls	r2, r4, #3
 8003f90:	4614      	mov	r4, r2
 8003f92:	461d      	mov	r5, r3
 8003f94:	4643      	mov	r3, r8
 8003f96:	18e3      	adds	r3, r4, r3
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	eb45 0303 	adc.w	r3, r5, r3
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fae:	4629      	mov	r1, r5
 8003fb0:	028b      	lsls	r3, r1, #10
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fb8:	4621      	mov	r1, r4
 8003fba:	028a      	lsls	r2, r1, #10
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	61fa      	str	r2, [r7, #28]
 8003fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fcc:	f7fc f902 	bl	80001d4 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff2:	e002      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_GetSysClockFreq+0x204>)
 8003ff6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3750      	adds	r7, #80	; 0x50
 8004000:	46bd      	mov	sp, r7
 8004002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	00f42400 	.word	0x00f42400
 8004010:	007a1200 	.word	0x007a1200

08004014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_RCC_GetHCLKFreq+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000004 	.word	0x20000004

0800402c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004030:	f7ff fff0 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0a9b      	lsrs	r3, r3, #10
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4903      	ldr	r1, [pc, #12]	; (8004050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40023800 	.word	0x40023800
 8004050:	08005278 	.word	0x08005278

08004054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004058:	f7ff ffdc 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 800405c:	4602      	mov	r2, r0
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	0b5b      	lsrs	r3, r3, #13
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	4903      	ldr	r1, [pc, #12]	; (8004078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800406a:	5ccb      	ldrb	r3, [r1, r3]
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40023800 	.word	0x40023800
 8004078:	08005278 	.word	0x08005278

0800407c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	220f      	movs	r2, #15
 800408a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800408c:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <HAL_RCC_GetClockConfig+0x5c>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0203 	and.w	r2, r3, #3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <HAL_RCC_GetClockConfig+0x5c>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <HAL_RCC_GetClockConfig+0x5c>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <HAL_RCC_GetClockConfig+0x5c>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	08db      	lsrs	r3, r3, #3
 80040b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <HAL_RCC_GetClockConfig+0x60>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0207 	and.w	r2, r3, #7
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	601a      	str	r2, [r3, #0]
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40023800 	.word	0x40023800
 80040dc:	40023c00 	.word	0x40023c00

080040e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e041      	b.n	8004176 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd f9f2 	bl	80014f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3304      	adds	r3, #4
 800411c:	4619      	mov	r1, r3
 800411e:	4610      	mov	r0, r2
 8004120:	f000 fa44 	bl	80045ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	f241 1311 	movw	r3, #4369	; 0x1111
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <HAL_TIM_Base_DeInit+0x40>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a1a      	ldr	r2, [r3, #32]
 80041a4:	f240 4344 	movw	r3, #1092	; 0x444
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <HAL_TIM_Base_DeInit+0x40>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd f9be 	bl	8001540 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d001      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e044      	b.n	80042ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d018      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426a:	d013      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1a      	ldr	r2, [pc, #104]	; (80042dc <HAL_TIM_Base_Start_IT+0xb4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00e      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a17      	ldr	r2, [pc, #92]	; (80042e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d111      	bne.n	80042b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d010      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	e007      	b.n	80042c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40014000 	.word	0x40014000

080042ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6a1a      	ldr	r2, [r3, #32]
 800430a:	f241 1311 	movw	r3, #4369	; 0x1111
 800430e:	4013      	ands	r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10f      	bne.n	8004334 <HAL_TIM_Base_Stop_IT+0x48>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6a1a      	ldr	r2, [r3, #32]
 800431a:	f240 4344 	movw	r3, #1092	; 0x444
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_TIM_Base_Stop_IT+0x48>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0201 	bic.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b02      	cmp	r3, #2
 800435e:	d122      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b02      	cmp	r3, #2
 800436c:	d11b      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f06f 0202 	mvn.w	r2, #2
 8004376:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f8ee 	bl	800456e <HAL_TIM_IC_CaptureCallback>
 8004392:	e005      	b.n	80043a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f8e0 	bl	800455a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f8f1 	bl	8004582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d122      	bne.n	80043fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d11b      	bne.n	80043fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f06f 0204 	mvn.w	r2, #4
 80043ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8c4 	bl	800456e <HAL_TIM_IC_CaptureCallback>
 80043e6:	e005      	b.n	80043f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f8b6 	bl	800455a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8c7 	bl	8004582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b08      	cmp	r3, #8
 8004406:	d122      	bne.n	800444e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b08      	cmp	r3, #8
 8004414:	d11b      	bne.n	800444e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f06f 0208 	mvn.w	r2, #8
 800441e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2204      	movs	r2, #4
 8004424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f89a 	bl	800456e <HAL_TIM_IC_CaptureCallback>
 800443a:	e005      	b.n	8004448 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f88c 	bl	800455a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f89d 	bl	8004582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b10      	cmp	r3, #16
 800445a:	d122      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b10      	cmp	r3, #16
 8004468:	d11b      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f06f 0210 	mvn.w	r2, #16
 8004472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2208      	movs	r2, #8
 8004478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f870 	bl	800456e <HAL_TIM_IC_CaptureCallback>
 800448e:	e005      	b.n	800449c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f862 	bl	800455a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f873 	bl	8004582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d10e      	bne.n	80044ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d107      	bne.n	80044ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f06f 0201 	mvn.w	r2, #1
 80044c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fc ff09 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b80      	cmp	r3, #128	; 0x80
 80044da:	d10e      	bne.n	80044fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	2b80      	cmp	r3, #128	; 0x80
 80044e8:	d107      	bne.n	80044fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f8e3 	bl	80046c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	d10e      	bne.n	8004526 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d107      	bne.n	8004526 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800451e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f838 	bl	8004596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b20      	cmp	r3, #32
 8004532:	d10e      	bne.n	8004552 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b20      	cmp	r3, #32
 8004540:	d107      	bne.n	8004552 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f06f 0220 	mvn.w	r2, #32
 800454a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f8ad 	bl	80046ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a34      	ldr	r2, [pc, #208]	; (8004690 <TIM_Base_SetConfig+0xe4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00f      	beq.n	80045e4 <TIM_Base_SetConfig+0x38>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ca:	d00b      	beq.n	80045e4 <TIM_Base_SetConfig+0x38>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a31      	ldr	r2, [pc, #196]	; (8004694 <TIM_Base_SetConfig+0xe8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d007      	beq.n	80045e4 <TIM_Base_SetConfig+0x38>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a30      	ldr	r2, [pc, #192]	; (8004698 <TIM_Base_SetConfig+0xec>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d003      	beq.n	80045e4 <TIM_Base_SetConfig+0x38>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a2f      	ldr	r2, [pc, #188]	; (800469c <TIM_Base_SetConfig+0xf0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d108      	bne.n	80045f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a25      	ldr	r2, [pc, #148]	; (8004690 <TIM_Base_SetConfig+0xe4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01b      	beq.n	8004636 <TIM_Base_SetConfig+0x8a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d017      	beq.n	8004636 <TIM_Base_SetConfig+0x8a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a22      	ldr	r2, [pc, #136]	; (8004694 <TIM_Base_SetConfig+0xe8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <TIM_Base_SetConfig+0x8a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a21      	ldr	r2, [pc, #132]	; (8004698 <TIM_Base_SetConfig+0xec>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00f      	beq.n	8004636 <TIM_Base_SetConfig+0x8a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a20      	ldr	r2, [pc, #128]	; (800469c <TIM_Base_SetConfig+0xf0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00b      	beq.n	8004636 <TIM_Base_SetConfig+0x8a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <TIM_Base_SetConfig+0xf4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d007      	beq.n	8004636 <TIM_Base_SetConfig+0x8a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <TIM_Base_SetConfig+0xf8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_Base_SetConfig+0x8a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <TIM_Base_SetConfig+0xfc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d108      	bne.n	8004648 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a08      	ldr	r2, [pc, #32]	; (8004690 <TIM_Base_SetConfig+0xe4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d103      	bne.n	800467c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	615a      	str	r2, [r3, #20]
}
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40010000 	.word	0x40010000
 8004694:	40000400 	.word	0x40000400
 8004698:	40000800 	.word	0x40000800
 800469c:	40000c00 	.word	0x40000c00
 80046a0:	40014000 	.word	0x40014000
 80046a4:	40014400 	.word	0x40014400
 80046a8:	40014800 	.word	0x40014800

080046ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e016      	b.n	8004714 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc ff44 	bl	8001574 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046f8:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	ea42 0103 	orr.w	r1, r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	68d2      	ldr	r2, [r2, #12]
 800472c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004752:	d10e      	bne.n	8004772 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b01      	cmp	r3, #1
 8004760:	d107      	bne.n	8004772 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f06f 0201 	mvn.w	r2, #1
 800476a:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f804 	bl	800477a <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <MONITOR_I_Start>:

void MONITOR_I_Start(const uint32_t TASK_ID,
					  const uint32_t TASK_WCET_us,
					  const uint32_t TASK_BCET_us,
					  const uint32_t ALLOWED_TIMING_VARIATION_us)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
	Task_ID_G = TASK_ID;
 800479e:	4a0f      	ldr	r2, [pc, #60]	; (80047dc <MONITOR_I_Start+0x4c>)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6013      	str	r3, [r2, #0]
	Task_BCET_G = TASK_BCET_us;
 80047a4:	4a0e      	ldr	r2, [pc, #56]	; (80047e0 <MONITOR_I_Start+0x50>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6013      	str	r3, [r2, #0]
	Task_t_variation_G = ALLOWED_TIMING_VARIATION_us;
 80047aa:	4a0e      	ldr	r2, [pc, #56]	; (80047e4 <MONITOR_I_Start+0x54>)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6013      	str	r3, [r2, #0]

	TimerInitFlag = 1;
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <MONITOR_I_Start+0x58>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_DeInit(&htim11);
 80047b6:	480d      	ldr	r0, [pc, #52]	; (80047ec <MONITOR_I_Start+0x5c>)
 80047b8:	f7ff fce1 	bl	800417e <HAL_TIM_Base_DeInit>
	htim11.Init.Period = TASK_WCET_us + ALLOWED_TIMING_VARIATION_us;
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	4413      	add	r3, r2
 80047c2:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <MONITOR_I_Start+0x5c>)
 80047c4:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Init(&htim11);
 80047c6:	4809      	ldr	r0, [pc, #36]	; (80047ec <MONITOR_I_Start+0x5c>)
 80047c8:	f7ff fc8a 	bl	80040e0 <HAL_TIM_Base_Init>

	HAL_TIM_Base_Start_IT(&htim11);
 80047cc:	4807      	ldr	r0, [pc, #28]	; (80047ec <MONITOR_I_Start+0x5c>)
 80047ce:	f7ff fd2b 	bl	8004228 <HAL_TIM_Base_Start_IT>
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20002228 	.word	0x20002228
 80047e0:	2000222c 	.word	0x2000222c
 80047e4:	20002230 	.word	0x20002230
 80047e8:	20002234 	.word	0x20002234
 80047ec:	20000180 	.word	0x20000180

080047f0 <MONITOR_I_Stop>:

uint32_t MONITOR_I_Stop(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
	uint32_t Execution_time_us;
	sTask *actual;

	// Check BCET (read timer value)
	// This value is in microseconds
	Execution_time_us = __HAL_TIM_GET_COUNTER(&htim11);
 80047f6:	4b13      	ldr	r3, [pc, #76]	; (8004844 <MONITOR_I_Stop+0x54>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	607b      	str	r3, [r7, #4]

	// Stop the timer
	HAL_TIM_Base_Stop_IT(&htim11);
 80047fe:	4811      	ldr	r0, [pc, #68]	; (8004844 <MONITOR_I_Stop+0x54>)
 8004800:	f7ff fd74 	bl	80042ec <HAL_TIM_Base_Stop_IT>

	if ((Execution_time_us + Task_t_variation_G) < Task_BCET_G)
 8004804:	4b10      	ldr	r3, [pc, #64]	; (8004848 <MONITOR_I_Stop+0x58>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	441a      	add	r2, r3
 800480c:	4b0f      	ldr	r3, [pc, #60]	; (800484c <MONITOR_I_Stop+0x5c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d211      	bcs.n	8004838 <MONITOR_I_Stop+0x48>
	{
		// Task has completed too quickly
		// => Change mode
		SYSTEM_Change_Mode_Fault(FAULT_TASK_TIMING);
 8004814:	2002      	movs	r0, #2
 8004816:	f000 fc3f 	bl	8005098 <SYSTEM_Change_Mode_Fault>

		// Not storing task ID here
		// Not distinguishing BCET / WCET faults
		// => either / both this can be done here, if required
		actual = SCH_Get_Current_Task_Pointer();
 800481a:	f000 fb3f 	bl	8004e9c <SCH_Get_Current_Task_Pointer>
 800481e:	6038      	str	r0, [r7, #0]
		actual->Debug.BCET = Execution_time_us;
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	619a      	str	r2, [r3, #24]
		actual->Debug.LET = Execution_time_us;
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	61da      	str	r2, [r3, #28]
		actual->Debug.State |= SCH_DEBUG_TASK_UNDERRUN;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	f043 0202 	orr.w	r2, r3, #2
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return Execution_time_us;
 8004838:	687b      	ldr	r3, [r7, #4]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000180 	.word	0x20000180
 8004848:	20002230 	.word	0x20002230
 800484c:	2000222c 	.word	0x2000222c

08004850 <MONITOR_I_Disable>:

void MONITOR_I_Disable(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim11);
 8004854:	4802      	ldr	r0, [pc, #8]	; (8004860 <MONITOR_I_Disable+0x10>)
 8004856:	f7ff fd49 	bl	80042ec <HAL_TIM_Base_Stop_IT>
}
 800485a:	bf00      	nop
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000180 	.word	0x20000180

08004864 <MONITOR_IRQHandler>:

void MONITOR_IRQHandler(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
	if(TimerInitFlag)
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <MONITOR_IRQHandler+0x48>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <MONITOR_IRQHandler+0x16>
	{
		TimerInitFlag = 0;
 8004872:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <MONITOR_IRQHandler+0x48>)
 8004874:	2200      	movs	r2, #0
 8004876:	701a      	strb	r2, [r3, #0]
		return;
 8004878:	e015      	b.n	80048a6 <MONITOR_IRQHandler+0x42>
	}
	sTask *actual;
	// Task has completed too slowly
	// => Change mode
	SYSTEM_Change_Mode_Fault(FAULT_TASK_TIMING);
 800487a:	2002      	movs	r0, #2
 800487c:	f000 fc0c 	bl	8005098 <SYSTEM_Change_Mode_Fault>

	// Not storing task ID here
	// Not distinguishing BCET / WCET faults
	// => either / both this can be done here, if required
	actual = SCH_Get_Current_Task_Pointer();
 8004880:	f000 fb0c 	bl	8004e9c <SCH_Get_Current_Task_Pointer>
 8004884:	6078      	str	r0, [r7, #4]
	actual->Debug.LET = actual->WCET;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	461a      	mov	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	61da      	str	r2, [r3, #28]
	actual->Debug.WCET = actual->WCET;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	461a      	mov	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	615a      	str	r2, [r3, #20]
	actual->Debug.State |= SCH_DEBUG_TASK_OVERRUN;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	f043 0204 	orr.w	r2, r3, #4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20002234 	.word	0x20002234

080048b0 <__NVIC_SetPriority>:
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	6039      	str	r1, [r7, #0]
 80048ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	db0a      	blt.n	80048da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	490c      	ldr	r1, [pc, #48]	; (80048fc <__NVIC_SetPriority+0x4c>)
 80048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ce:	0112      	lsls	r2, r2, #4
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	440b      	add	r3, r1
 80048d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80048d8:	e00a      	b.n	80048f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	4908      	ldr	r1, [pc, #32]	; (8004900 <__NVIC_SetPriority+0x50>)
 80048e0:	79fb      	ldrb	r3, [r7, #7]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	3b04      	subs	r3, #4
 80048e8:	0112      	lsls	r2, r2, #4
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	440b      	add	r3, r1
 80048ee:	761a      	strb	r2, [r3, #24]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	e000e100 	.word	0xe000e100
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3b01      	subs	r3, #1
 8004910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004914:	d301      	bcc.n	800491a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004916:	2301      	movs	r3, #1
 8004918:	e00f      	b.n	800493a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800491a:	4a0a      	ldr	r2, [pc, #40]	; (8004944 <SysTick_Config+0x40>)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3b01      	subs	r3, #1
 8004920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004922:	210f      	movs	r1, #15
 8004924:	f04f 30ff 	mov.w	r0, #4294967295
 8004928:	f7ff ffc2 	bl	80048b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <SysTick_Config+0x40>)
 800492e:	2200      	movs	r2, #0
 8004930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004932:	4b04      	ldr	r3, [pc, #16]	; (8004944 <SysTick_Config+0x40>)
 8004934:	2207      	movs	r2, #7
 8004936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	e000e010 	.word	0xe000e010

08004948 <DWT_Init>:
);
void SCH_SysTick_Handler(void);
sTask* SCH_Get_Current_Task_Pointer(void);

static inline void DWT_Init(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
	DWT->CTRL |=DWT_CTRL_CYCCNTENA_Msk;
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <DWT_Init+0x20>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a05      	ldr	r2, [pc, #20]	; (8004968 <DWT_Init+0x20>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT=0;
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <DWT_Init+0x20>)
 800495a:	2200      	movs	r2, #0
 800495c:	605a      	str	r2, [r3, #4]
}
 800495e:	bf00      	nop
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	e0001000 	.word	0xe0001000

0800496c <DWT_GetTime>:

static inline uint32_t DWT_GetTime(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
	return (10 * DWT->CYCCNT);		// (10E9 / SystemCoreClock) => nS
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <DWT_GetTime+0x1c>)
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	e0001000 	.word	0xe0001000

0800498c <DWT_Clear>:

static inline void DWT_Clear(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
	DWT->CYCCNT=0;
 8004990:	4b03      	ldr	r3, [pc, #12]	; (80049a0 <DWT_Clear+0x14>)
 8004992:	2200      	movs	r2, #0
 8004994:	605a      	str	r2, [r3, #4]
}
 8004996:	bf00      	nop
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	e0001000 	.word	0xe0001000

080049a4 <SCH_Dispatch_Tasks>:

static void SCH_Go_To_Sleep(void);

void SysTick_Handler(void);

void SCH_Dispatch_Tasks(void) {
 80049a4:	b590      	push	{r4, r7, lr}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
	uint32_t Index;
	uint32_t Update_required = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 80049ae:	b672      	cpsid	i
}
 80049b0:	bf00      	nop
	uint32_t time_SCH;

	__disable_irq(); // Protect shared resource (Tick_count_G)
	if (Tick_count_G > 0)
 80049b2:	4ba1      	ldr	r3, [pc, #644]	; (8004c38 <SCH_Dispatch_Tasks+0x294>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d006      	beq.n	80049c8 <SCH_Dispatch_Tasks+0x24>
		{
		Tick_count_G--;
 80049ba:	4b9f      	ldr	r3, [pc, #636]	; (8004c38 <SCH_Dispatch_Tasks+0x294>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3b01      	subs	r3, #1
 80049c0:	4a9d      	ldr	r2, [pc, #628]	; (8004c38 <SCH_Dispatch_Tasks+0x294>)
 80049c2:	6013      	str	r3, [r2, #0]
		Update_required = 1;
 80049c4:	2301      	movs	r3, #1
 80049c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80049c8:	b662      	cpsie	i
}
 80049ca:	bf00      	nop
	}
	__enable_irq();

	while (Update_required)
 80049cc:	e120      	b.n	8004c10 <SCH_Dispatch_Tasks+0x26c>
		{
		// Go through the task array
		for (Index = 0; Index < SCH_MAX_TASKS; Index++)
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e107      	b.n	8004be4 <SCH_Dispatch_Tasks+0x240>
			{
			// Check if there is a task at this location
			if (SCH_tasks_G[Index].pTask)
 80049d4:	4999      	ldr	r1, [pc, #612]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	440b      	add	r3, r1
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80fa 	beq.w	8004bde <SCH_Dispatch_Tasks+0x23a>
				{
				if (--SCH_tasks_G[Index].Delay == 0)
 80049ea:	4994      	ldr	r1, [pc, #592]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	440b      	add	r3, r1
 80049f8:	3304      	adds	r3, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	1e59      	subs	r1, r3, #1
 80049fe:	488f      	ldr	r0, [pc, #572]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4403      	add	r3, r0
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	6019      	str	r1, [r3, #0]
 8004a10:	498a      	ldr	r1, [pc, #552]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3304      	adds	r3, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f040 80db 	bne.w	8004bde <SCH_Dispatch_Tasks+0x23a>
					{
						// Start of Task Dispatch Time Measurement
						DWT_Clear();
 8004a28:	f7ff ffb0 	bl	800498c <DWT_Clear>

						ITask = Index;
 8004a2c:	4a84      	ldr	r2, [pc, #528]	; (8004c40 <SCH_Dispatch_Tasks+0x29c>)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6013      	str	r3, [r2, #0]
						SCH_tasks_G[Index].Debug.State = 0;
 8004a32:	4982      	ldr	r1, [pc, #520]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	440b      	add	r3, r1
 8004a40:	3324      	adds	r3, #36	; 0x24
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]

						MONITOR_I_Start((uint32_t)SCH_tasks_G[Index].pTask,
 8004a46:	497d      	ldr	r1, [pc, #500]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	440b      	add	r3, r1
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	461c      	mov	r4, r3
 8004a58:	4978      	ldr	r1, [pc, #480]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	440b      	add	r3, r1
 8004a66:	330c      	adds	r3, #12
 8004a68:	6819      	ldr	r1, [r3, #0]
 8004a6a:	4874      	ldr	r0, [pc, #464]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4403      	add	r3, r0
 8004a78:	3310      	adds	r3, #16
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	2314      	movs	r3, #20
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f7ff fe86 	bl	8004790 <MONITOR_I_Start>
								SCH_tasks_G[Index].WCET,
								SCH_tasks_G[Index].BCET,
								ALLOWED_TIMING_VARIATION_us);

						(*SCH_tasks_G[Index].pTask)(); // Run the task
 8004a84:	496d      	ldr	r1, [pc, #436]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	440b      	add	r3, r1
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4798      	blx	r3

						// All tasks are periodic in this design
						// - schedule task to run again

						SCH_tasks_G[Index].Debug.LET = MONITOR_I_Stop();
 8004a96:	f7ff feab 	bl	80047f0 <MONITOR_I_Stop>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	4967      	ldr	r1, [pc, #412]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	440b      	add	r3, r1
 8004aac:	331c      	adds	r3, #28
 8004aae:	6018      	str	r0, [r3, #0]
						SCH_tasks_G[Index].Debug.State |= SCH_DEBUG_TASK_RUN_OK;
 8004ab0:	4962      	ldr	r1, [pc, #392]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	440b      	add	r3, r1
 8004abe:	3324      	adds	r3, #36	; 0x24
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f043 0101 	orr.w	r1, r3, #1
 8004ac6:	485d      	ldr	r0, [pc, #372]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	4403      	add	r3, r0
 8004ad4:	3324      	adds	r3, #36	; 0x24
 8004ad6:	6019      	str	r1, [r3, #0]
						SCH_tasks_G[Index].Debug.RunTimes++;
 8004ad8:	4958      	ldr	r1, [pc, #352]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	440b      	add	r3, r1
 8004ae6:	3320      	adds	r3, #32
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	4853      	ldr	r0, [pc, #332]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4403      	add	r3, r0
 8004afa:	3320      	adds	r3, #32
 8004afc:	6019      	str	r1, [r3, #0]

						if(SCH_tasks_G[Index].Debug.LET < SCH_tasks_G[Index].Debug.BCET)
 8004afe:	494f      	ldr	r1, [pc, #316]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	440b      	add	r3, r1
 8004b0c:	331c      	adds	r3, #28
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	484a      	ldr	r0, [pc, #296]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4403      	add	r3, r0
 8004b1e:	3318      	adds	r3, #24
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4299      	cmp	r1, r3
 8004b24:	da11      	bge.n	8004b4a <SCH_Dispatch_Tasks+0x1a6>
							SCH_tasks_G[Index].Debug.BCET = SCH_tasks_G[Index].Debug.LET;
 8004b26:	4945      	ldr	r1, [pc, #276]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	440b      	add	r3, r1
 8004b34:	331c      	adds	r3, #28
 8004b36:	6819      	ldr	r1, [r3, #0]
 8004b38:	4840      	ldr	r0, [pc, #256]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4403      	add	r3, r0
 8004b46:	3318      	adds	r3, #24
 8004b48:	6019      	str	r1, [r3, #0]

						if(SCH_tasks_G[Index].Debug.LET > SCH_tasks_G[Index].Debug.WCET)
 8004b4a:	493c      	ldr	r1, [pc, #240]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	440b      	add	r3, r1
 8004b58:	331c      	adds	r3, #28
 8004b5a:	6819      	ldr	r1, [r3, #0]
 8004b5c:	4837      	ldr	r0, [pc, #220]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	4403      	add	r3, r0
 8004b6a:	3314      	adds	r3, #20
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4299      	cmp	r1, r3
 8004b70:	dd11      	ble.n	8004b96 <SCH_Dispatch_Tasks+0x1f2>
							SCH_tasks_G[Index].Debug.WCET = SCH_tasks_G[Index].Debug.LET;
 8004b72:	4932      	ldr	r1, [pc, #200]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	440b      	add	r3, r1
 8004b80:	331c      	adds	r3, #28
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	482d      	ldr	r0, [pc, #180]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4403      	add	r3, r0
 8004b92:	3314      	adds	r3, #20
 8004b94:	6019      	str	r1, [r3, #0]

						SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8004b96:	4929      	ldr	r1, [pc, #164]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	440b      	add	r3, r1
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	6819      	ldr	r1, [r3, #0]
 8004ba8:	4824      	ldr	r0, [pc, #144]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4403      	add	r3, r0
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	6019      	str	r1, [r3, #0]

						// Stop of Task Dispatch Time Measurement
						time_SCH = DWT_GetTime()/1000 - SCH_tasks_G[Index].Debug.LET;
 8004bba:	f7ff fed7 	bl	800496c <DWT_GetTime>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	4a20      	ldr	r2, [pc, #128]	; (8004c44 <SCH_Dispatch_Tasks+0x2a0>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	0999      	lsrs	r1, r3, #6
 8004bc8:	481c      	ldr	r0, [pc, #112]	; (8004c3c <SCH_Dispatch_Tasks+0x298>)
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4403      	add	r3, r0
 8004bd6:	331c      	adds	r3, #28
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	1acb      	subs	r3, r1, r3
 8004bdc:	607b      	str	r3, [r7, #4]
		for (Index = 0; Index < SCH_MAX_TASKS; Index++)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3301      	adds	r3, #1
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b13      	cmp	r3, #19
 8004be8:	f67f aef4 	bls.w	80049d4 <SCH_Dispatch_Tasks+0x30>
  __ASM volatile ("cpsid i" : : : "memory");
 8004bec:	b672      	cpsid	i
}
 8004bee:	bf00      	nop
					}
				}
			}
		__disable_irq();
		if (Tick_count_G > 0)
 8004bf0:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <SCH_Dispatch_Tasks+0x294>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <SCH_Dispatch_Tasks+0x264>
			{
			Tick_count_G--;
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <SCH_Dispatch_Tasks+0x294>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	4a0e      	ldr	r2, [pc, #56]	; (8004c38 <SCH_Dispatch_Tasks+0x294>)
 8004c00:	6013      	str	r3, [r2, #0]
			Update_required = 1;
 8004c02:	2301      	movs	r3, #1
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	e001      	b.n	8004c0c <SCH_Dispatch_Tasks+0x268>
			}
		else
			{
			Update_required = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c0c:	b662      	cpsie	i
}
 8004c0e:	bf00      	nop
	while (Update_required)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f47f aedb 	bne.w	80049ce <SCH_Dispatch_Tasks+0x2a>
			}
		__enable_irq();
		}

		if(SYSTEM_Get_Mode() == FAIL_SILENT)
 8004c18:	f000 fa4e 	bl	80050b8 <SYSTEM_Get_Mode>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <SCH_Dispatch_Tasks+0x286>
		{
			MONITOR_I_Disable();
 8004c22:	f7ff fe15 	bl	8004850 <MONITOR_I_Disable>
			SYSTEM_Perform_Safe_Shutdown();
 8004c26:	f000 f9dd 	bl	8004fe4 <SYSTEM_Perform_Safe_Shutdown>
		}
	SCH_Go_To_Sleep();
 8004c2a:	f000 f87f 	bl	8004d2c <SCH_Go_To_Sleep>
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd90      	pop	{r4, r7, pc}
 8004c36:	bf00      	nop
 8004c38:	2000255c 	.word	0x2000255c
 8004c3c:	2000223c 	.word	0x2000223c
 8004c40:	20002560 	.word	0x20002560
 8004c44:	10624dd3 	.word	0x10624dd3

08004c48 <SCH_Init>:

void SCH_Init(const uint32_t TICKms)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
    int i;
    // Reset the global fault variable
    Fault_code_G = 0;
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <SCH_Init+0xa0>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]

    for (i = 0; i < SCH_MAX_TASKS; i++)
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	e019      	b.n	8004c90 <SCH_Init+0x48>
    {
    	SCH_tasks_G[i].pTask = 0;
 8004c5c:	4923      	ldr	r1, [pc, #140]	; (8004cec <SCH_Init+0xa4>)
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	440b      	add	r3, r1
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
    	memset(&(SCH_tasks_G[i].Debug),0,sizeof(debugInfo));
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	3310      	adds	r3, #16
 8004c7a:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <SCH_Init+0xa4>)
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3304      	adds	r3, #4
 8004c80:	2214      	movs	r2, #20
 8004c82:	2100      	movs	r1, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fa61 	bl	800514c <memset>
    for (i = 0; i < SCH_MAX_TASKS; i++)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b13      	cmp	r3, #19
 8004c94:	dde2      	ble.n	8004c5c <SCH_Init+0x14>

    // Must check board oscillator frequency, etc
    //
    // *If* these values have been set correctly for your hardware
    // SystemCoreClock gives the system operating frequency (in Hz)
    if (SystemCoreClock != Required_SystemCoreClock)
 8004c96:	4b16      	ldr	r3, [pc, #88]	; (8004cf0 <SCH_Init+0xa8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <SCH_Init+0xac>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d001      	beq.n	8004ca4 <SCH_Init+0x5c>
    {
    	// Fatal fault
    	SYSTEM_Perform_Safe_Shutdown();
 8004ca0:	f000 f9a0 	bl	8004fe4 <SYSTEM_Perform_Safe_Shutdown>
    }

    // Now to set up SysTick timer for "ticks" at interval TICKms
    if (SysTick_Config(TICKms * SystemCoreClock / SysTick_RateHz))
 8004ca4:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <SCH_Init+0xa8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <SCH_Init+0xb0>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	099b      	lsrs	r3, r3, #6
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fe24 	bl	8004904 <SysTick_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <SCH_Init+0x7e>
    {
    	// Fatal fault
    	SYSTEM_Perform_Safe_Shutdown();
 8004cc2:	f000 f98f 	bl	8004fe4 <SYSTEM_Perform_Safe_Shutdown>
    }

    NVIC_SetPriority(SysTick_IRQn, 0x0);
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	f7ff fdf0 	bl	80048b0 <__NVIC_SetPriority>

    // Timer is started by SysTick_Config():
    // we need to disable SysTick timer and SysTick interrupt until
    // all tasks have been added to the schedule.
    SysTick->CTRL &= 0xFFFFFFFC;
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <SCH_Init+0xb4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <SCH_Init+0xb4>)
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	6013      	str	r3, [r2, #0]

    // Inicialize Data Watchpoint and Trace System Clock Counter
    DWT_Init();
 8004cdc:	f7ff fe34 	bl	8004948 <DWT_Init>
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20002238 	.word	0x20002238
 8004cec:	2000223c 	.word	0x2000223c
 8004cf0:	20000004 	.word	0x20000004
 8004cf4:	0501bd00 	.word	0x0501bd00
 8004cf8:	10624dd3 	.word	0x10624dd3
 8004cfc:	e000e010 	.word	0xe000e010

08004d00 <SCH_Start>:

void SCH_Start(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
    // Enable SysTick timer
    SysTick->CTRL |= 0x01;
 8004d04:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <SCH_Start+0x28>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a07      	ldr	r2, [pc, #28]	; (8004d28 <SCH_Start+0x28>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	6013      	str	r3, [r2, #0]

    // Enable SysTick interrupt
    SysTick->CTRL |= 0x02;
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <SCH_Start+0x28>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a04      	ldr	r2, [pc, #16]	; (8004d28 <SCH_Start+0x28>)
 8004d16:	f043 0302 	orr.w	r3, r3, #2
 8004d1a:	6013      	str	r3, [r2, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	e000e010 	.word	0xe000e010

08004d2c <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep()
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
	// Enter sleep mode = "Wait For Interrupt"
	__WFI();
 8004d30:	bf30      	wfi
}
 8004d32:	bf00      	nop
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <SCH_Add_Task>:
					  const uint32_t PERIOD,
					  const uint32_t WCET,
					  const uint32_t BCET
					  )

	{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
	uint32_t Return_value = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]
	uint32_t Index = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]

	// First find a gap in the array (if there is one)
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8004d52:	e002      	b.n	8004d5a <SCH_Add_Task+0x1e>
		{
		Index++;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	3301      	adds	r3, #1
 8004d58:	613b      	str	r3, [r7, #16]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8004d5a:	4947      	ldr	r1, [pc, #284]	; (8004e78 <SCH_Add_Task+0x13c>)
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	440b      	add	r3, r1
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <SCH_Add_Task+0x38>
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b13      	cmp	r3, #19
 8004d72:	d9ef      	bls.n	8004d54 <SCH_Add_Task+0x18>
	}

	// Have we reached the end of the list?
	if (Index == SCH_MAX_TASKS)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b14      	cmp	r3, #20
 8004d78:	d104      	bne.n	8004d84 <SCH_Add_Task+0x48>
		{
		// Task list is full
		//
		// Set the global fault variable
		Fault_code_G = FAULT_SCH_TOO_MANY_TASKS;
 8004d7a:	4b40      	ldr	r3, [pc, #256]	; (8004e7c <SCH_Add_Task+0x140>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

		// Also return a fault code
		Return_value = SCH_MAX_TASKS;
 8004d80:	2314      	movs	r3, #20
 8004d82:	617b      	str	r3, [r7, #20]
		}

	// Check for "one shot" tasks
	// - not permitted in this design
	if (PERIOD == 0)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <SCH_Add_Task+0x58>
		{
		// Set the global fault variable
		Fault_code_G = FAULT_SCH_ONE_SHOT_TASK;
 8004d8a:	4b3c      	ldr	r3, [pc, #240]	; (8004e7c <SCH_Add_Task+0x140>)
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	601a      	str	r2, [r3, #0]

		// Also return a fault code
		Return_value = SCH_MAX_TASKS;
 8004d90:	2314      	movs	r3, #20
 8004d92:	617b      	str	r3, [r7, #20]
		}

	if (Return_value != SCH_MAX_TASKS)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2b14      	cmp	r3, #20
 8004d98:	d066      	beq.n	8004e68 <SCH_Add_Task+0x12c>
		{

		// If we're here, there is a space in the task array
		// and the task to be added is periodic
		SCH_tasks_G[Index].pTask = pTask;
 8004d9a:	4937      	ldr	r1, [pc, #220]	; (8004e78 <SCH_Add_Task+0x13c>)
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	440b      	add	r3, r1
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	601a      	str	r2, [r3, #0]

		SCH_tasks_G[Index].Delay = DELAY + 1;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	1c59      	adds	r1, r3, #1
 8004db0:	4831      	ldr	r0, [pc, #196]	; (8004e78 <SCH_Add_Task+0x13c>)
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4403      	add	r3, r0
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Index].Period = PERIOD;
 8004dc2:	492d      	ldr	r1, [pc, #180]	; (8004e78 <SCH_Add_Task+0x13c>)
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	440b      	add	r3, r1
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].WCET = WCET;
 8004dd6:	4928      	ldr	r1, [pc, #160]	; (8004e78 <SCH_Add_Task+0x13c>)
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	440b      	add	r3, r1
 8004de4:	330c      	adds	r3, #12
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].BCET = BCET;
 8004dea:	4923      	ldr	r1, [pc, #140]	; (8004e78 <SCH_Add_Task+0x13c>)
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	440b      	add	r3, r1
 8004df8:	3310      	adds	r3, #16
 8004dfa:	6a3a      	ldr	r2, [r7, #32]
 8004dfc:	601a      	str	r2, [r3, #0]

		SCH_tasks_G[Index].Debug.LET = 0;
 8004dfe:	491e      	ldr	r1, [pc, #120]	; (8004e78 <SCH_Add_Task+0x13c>)
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	440b      	add	r3, r1
 8004e0c:	331c      	adds	r3, #28
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Debug.WCET = 0;
 8004e12:	4919      	ldr	r1, [pc, #100]	; (8004e78 <SCH_Add_Task+0x13c>)
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	440b      	add	r3, r1
 8004e20:	3314      	adds	r3, #20
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Debug.BCET = 0xFFFFFFFF;
 8004e26:	4914      	ldr	r1, [pc, #80]	; (8004e78 <SCH_Add_Task+0x13c>)
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	440b      	add	r3, r1
 8004e34:	3318      	adds	r3, #24
 8004e36:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3a:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Debug.State = 0;
 8004e3c:	490e      	ldr	r1, [pc, #56]	; (8004e78 <SCH_Add_Task+0x13c>)
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	440b      	add	r3, r1
 8004e4a:	3324      	adds	r3, #36	; 0x24
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Debug.RunTimes = 0;
 8004e50:	4909      	ldr	r1, [pc, #36]	; (8004e78 <SCH_Add_Task+0x13c>)
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	440b      	add	r3, r1
 8004e5e:	3320      	adds	r3, #32
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

		Return_value = Index;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	617b      	str	r3, [r7, #20]
		}

	return Return_value;
 8004e68:	697b      	ldr	r3, [r7, #20]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	2000223c 	.word	0x2000223c
 8004e7c:	20002238 	.word	0x20002238

08004e80 <SCH_SysTick_Handler>:

void SCH_SysTick_Handler(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
    // Increment tick count (only)
    Tick_count_G++;
 8004e84:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <SCH_SysTick_Handler+0x18>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	4a03      	ldr	r2, [pc, #12]	; (8004e98 <SCH_SysTick_Handler+0x18>)
 8004e8c:	6013      	str	r3, [r2, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	2000255c 	.word	0x2000255c

08004e9c <SCH_Get_Current_Task_Pointer>:

sTask* SCH_Get_Current_Task_Pointer(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
	return &SCH_tasks_G[ITask];
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <SCH_Get_Current_Task_Pointer+0x20>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <SCH_Get_Current_Task_Pointer+0x24>)
 8004eae:	4413      	add	r3, r2
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20002560 	.word	0x20002560
 8004ec0:	2000223c 	.word	0x2000223c

08004ec4 <SYSTEM_Init>:
eSystem_mode System_mode_G;

void SYSTEM_Identify_Required_Mode(void);
void SYSTEM_Configure_Required_Mode(void);

void SYSTEM_Init(void) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
	SYSTEM_Identify_Required_Mode();
 8004ec8:	f000 f804 	bl	8004ed4 <SYSTEM_Identify_Required_Mode>
	SYSTEM_Configure_Required_Mode();
 8004ecc:	f000 f820 	bl	8004f10 <SYSTEM_Configure_Required_Mode>
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <SYSTEM_Identify_Required_Mode>:

void SYSTEM_Identify_Required_Mode(void) {
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <SYSTEM_Identify_Required_Mode+0x34>)
 8004eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004edc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <SYSTEM_Identify_Required_Mode+0x24>
	{
		__HAL_RCC_CLEAR_RESET_FLAGS();
 8004ee4:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <SYSTEM_Identify_Required_Mode+0x34>)
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee8:	4a07      	ldr	r2, [pc, #28]	; (8004f08 <SYSTEM_Identify_Required_Mode+0x34>)
 8004eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eee:	6753      	str	r3, [r2, #116]	; 0x74
		System_mode_G = FAIL_SILENT;
 8004ef0:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <SYSTEM_Identify_Required_Mode+0x38>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
		return;
 8004ef6:	e002      	b.n	8004efe <SYSTEM_Identify_Required_Mode+0x2a>
	}
    System_mode_G = NORMAL;
 8004ef8:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <SYSTEM_Identify_Required_Mode+0x38>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	701a      	strb	r2, [r3, #0]
}
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	20002564 	.word	0x20002564

08004f10 <SYSTEM_Configure_Required_Mode>:

void SYSTEM_Configure_Required_Mode(void) {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af02      	add	r7, sp, #8
	switch (System_mode_G)
 8004f16:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <SYSTEM_Configure_Required_Mode+0xb4>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d007      	beq.n	8004f2e <SYSTEM_Configure_Required_Mode+0x1e>
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d002      	beq.n	8004f28 <SYSTEM_Configure_Required_Mode+0x18>
        default: // Default to "FAIL_SILENT"
        case FAIL_SILENT:
        {
            // Reset caused by WDT
            // Trigger "fail silent" behavior
            SYSTEM_Perform_Safe_Shutdown();
 8004f22:	f000 f85f 	bl	8004fe4 <SYSTEM_Perform_Safe_Shutdown>
            break;
 8004f26:	e04a      	b.n	8004fbe <SYSTEM_Configure_Required_Mode+0xae>
        }
        case FAULT_TASK_TIMING:
        {
            // Reset caused by WDT
            // Trigger "fail silent" behavior
            SYSTEM_Perform_Safe_Shutdown();
 8004f28:	f000 f85c 	bl	8004fe4 <SYSTEM_Perform_Safe_Shutdown>
            break;
 8004f2c:	e047      	b.n	8004fbe <SYSTEM_Configure_Required_Mode+0xae>
        }
        case NORMAL:
        {
        	// Set up scheduler for 1 ms ticks (tick interval in *ms*)
            SCH_Init(1);
 8004f2e:	2001      	movs	r0, #1
 8004f30:	f7ff fe8a 	bl	8004c48 <SCH_Init>

        	// Prepare for Heartbeat task
        	HEARTBEAT_Init();
 8004f34:	f7fb fe52 	bl	8000bdc <HEARTBEAT_Init>
        	WATCHDOG_Init();
 8004f38:	f7fb ffb0 	bl	8000e9c <WATCHDOG_Init>
        	ANTIRREBOTE_Init();
 8004f3c:	f7fb fec4 	bl	8000cc8 <ANTIRREBOTE_Init>
        	READ_ADC_Init();
 8004f40:	f7fb fca2 	bl	8000888 <READ_ADC_Init>
        	PULSADOR_MEDIR_Init();
 8004f44:	f7fb ff28 	bl	8000d98 <PULSADOR_MEDIR_Init>
            // 3. Task period (in ticks): Must be > 0
            // 4. Task WCET (in microseconds)
            // 5. Task BCET (in microseconds)

            // Add watchdog task first
            SCH_Add_Task(WATCHDOG_Update, 0, 10, 1, 1);
 8004f48:	2301      	movs	r3, #1
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	220a      	movs	r2, #10
 8004f50:	2100      	movs	r1, #0
 8004f52:	481d      	ldr	r0, [pc, #116]	; (8004fc8 <SYSTEM_Configure_Required_Mode+0xb8>)
 8004f54:	f7ff fef2 	bl	8004d3c <SCH_Add_Task>

            // Add Heartbeat task
            SCH_Add_Task(HEARTBEAT_Update, 0, 10, 1, 1);
 8004f58:	2301      	movs	r3, #1
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	220a      	movs	r2, #10
 8004f60:	2100      	movs	r1, #0
 8004f62:	481a      	ldr	r0, [pc, #104]	; (8004fcc <SYSTEM_Configure_Required_Mode+0xbc>)
 8004f64:	f7ff feea 	bl	8004d3c <SCH_Add_Task>

            // Agregar Task Antirrebote con LED
            SCH_Add_Task(ANTIRREBOTE_Update, 1, 10, 1, 1);
 8004f68:	2301      	movs	r3, #1
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	220a      	movs	r2, #10
 8004f70:	2101      	movs	r1, #1
 8004f72:	4817      	ldr	r0, [pc, #92]	; (8004fd0 <SYSTEM_Configure_Required_Mode+0xc0>)
 8004f74:	f7ff fee2 	bl	8004d3c <SCH_Add_Task>

            // Agregar Task Pulsador Medir
			SCH_Add_Task(PULSADOR_MEDIR_Update, 2, 10, 1, 1);
 8004f78:	2301      	movs	r3, #1
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	220a      	movs	r2, #10
 8004f80:	2102      	movs	r1, #2
 8004f82:	4814      	ldr	r0, [pc, #80]	; (8004fd4 <SYSTEM_Configure_Required_Mode+0xc4>)
 8004f84:	f7ff feda 	bl	8004d3c <SCH_Add_Task>

			// Agregar Task Mediciones
			SCH_Add_Task(MEDICIONES_Update, 3, 10, 1, 1);
 8004f88:	2301      	movs	r3, #1
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	220a      	movs	r2, #10
 8004f90:	2103      	movs	r1, #3
 8004f92:	4811      	ldr	r0, [pc, #68]	; (8004fd8 <SYSTEM_Configure_Required_Mode+0xc8>)
 8004f94:	f7ff fed2 	bl	8004d3c <SCH_Add_Task>

            // Agregar Task Lectura ADC
            SCH_Add_Task(READ_ADC_Update, 0, 10, 2000, 100);
 8004f98:	2364      	movs	r3, #100	; 0x64
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004fa0:	220a      	movs	r2, #10
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	480d      	ldr	r0, [pc, #52]	; (8004fdc <SYSTEM_Configure_Required_Mode+0xcc>)
 8004fa6:	f7ff fec9 	bl	8004d3c <SCH_Add_Task>

            // Agregar Task Display
			SCH_Add_Task(DISPLAY_Update, 0, 10, 6500, 200);
 8004faa:	23c8      	movs	r3, #200	; 0xc8
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	f641 1364 	movw	r3, #6500	; 0x1964
 8004fb2:	220a      	movs	r2, #10
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	480a      	ldr	r0, [pc, #40]	; (8004fe0 <SYSTEM_Configure_Required_Mode+0xd0>)
 8004fb8:	f7ff fec0 	bl	8004d3c <SCH_Add_Task>

            break;
 8004fbc:	bf00      	nop
        }
	}
}
 8004fbe:	bf00      	nop
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20002564 	.word	0x20002564
 8004fc8:	08000ead 	.word	0x08000ead
 8004fcc:	08000bf5 	.word	0x08000bf5
 8004fd0:	08000cd9 	.word	0x08000cd9
 8004fd4:	08000dd1 	.word	0x08000dd1
 8004fd8:	08000c0d 	.word	0x08000c0d
 8004fdc:	080008c5 	.word	0x080008c5
 8004fe0:	08000a71 	.word	0x08000a71

08004fe4 <SYSTEM_Perform_Safe_Shutdown>:

void SYSTEM_Perform_Safe_Shutdown(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af02      	add	r7, sp, #8
    // OTHER BEHAVIOUR IS LIKELY TO BE REQUIRED IN YOUR DESIGN
    // *************************************
    // NOTE: This function should NOT return
    // *************************************

    HEARTBEAT_Init();
 8004fea:	f7fb fdf7 	bl	8000bdc <HEARTBEAT_Init>
    Pin_Config(LD2_GPIO_Port, LD2_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	2120      	movs	r1, #32
 8004ff8:	4821      	ldr	r0, [pc, #132]	; (8005080 <SYSTEM_Perform_Safe_Shutdown+0x9c>)
 8004ffa:	f7fb fbf3 	bl	80007e4 <Pin_Config>
    Pin_Config(Heartbeat_GPIO_Port, Heartbeat_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8004ffe:	2300      	movs	r3, #0
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	2201      	movs	r2, #1
 8005006:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800500a:	481d      	ldr	r0, [pc, #116]	; (8005080 <SYSTEM_Perform_Safe_Shutdown+0x9c>)
 800500c:	f7fb fbea 	bl	80007e4 <Pin_Config>
    Pin_Write(LD2_GPIO_Port, LD2_Pin, ON);
 8005010:	2201      	movs	r2, #1
 8005012:	2120      	movs	r1, #32
 8005014:	481a      	ldr	r0, [pc, #104]	; (8005080 <SYSTEM_Perform_Safe_Shutdown+0x9c>)
 8005016:	f7fb fc06 	bl	8000826 <Pin_Write>

    HD44780_Clear();
 800501a:	f7fb fa5d 	bl	80004d8 <HD44780_Clear>
    HD44780_Cursor();
 800501e:	f7fb facd 	bl	80005bc <HD44780_Cursor>
	HD44780_SetCursor(0,0);
 8005022:	2100      	movs	r1, #0
 8005024:	2000      	movs	r0, #0
 8005026:	f7fb fa6b 	bl	8000500 <HD44780_SetCursor>
	HD44780_PrintStr("Falla");
 800502a:	4816      	ldr	r0, [pc, #88]	; (8005084 <SYSTEM_Perform_Safe_Shutdown+0xa0>)
 800502c:	f7fb fadc 	bl	80005e8 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 8005030:	2101      	movs	r1, #1
 8005032:	2000      	movs	r0, #0
 8005034:	f7fb fa64 	bl	8000500 <HD44780_SetCursor>
	if(System_mode_G == FAIL_SILENT)
 8005038:	4b13      	ldr	r3, [pc, #76]	; (8005088 <SYSTEM_Perform_Safe_Shutdown+0xa4>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d102      	bne.n	8005046 <SYSTEM_Perform_Safe_Shutdown+0x62>
	{
		HD44780_PrintStr("SILENT");
 8005040:	4812      	ldr	r0, [pc, #72]	; (800508c <SYSTEM_Perform_Safe_Shutdown+0xa8>)
 8005042:	f7fb fad1 	bl	80005e8 <HD44780_PrintStr>
	}
	if(System_mode_G == FAULT_TASK_TIMING)
 8005046:	4b10      	ldr	r3, [pc, #64]	; (8005088 <SYSTEM_Perform_Safe_Shutdown+0xa4>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d102      	bne.n	8005054 <SYSTEM_Perform_Safe_Shutdown+0x70>
	{
		HD44780_PrintStr("TASK_TIMING");
 800504e:	4810      	ldr	r0, [pc, #64]	; (8005090 <SYSTEM_Perform_Safe_Shutdown+0xac>)
 8005050:	f7fb faca 	bl	80005e8 <HD44780_PrintStr>
	}

    while(1)
	{
        // Flicker Heartbeat LED to indicate fault
    	for (Delay = 0; Delay < 200000; Delay++) j *= 3;
 8005054:	2300      	movs	r3, #0
 8005056:	607b      	str	r3, [r7, #4]
 8005058:	e007      	b.n	800506a <SYSTEM_Perform_Safe_Shutdown+0x86>
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4413      	add	r3, r2
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3301      	adds	r3, #1
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a09      	ldr	r2, [pc, #36]	; (8005094 <SYSTEM_Perform_Safe_Shutdown+0xb0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	ddf3      	ble.n	800505a <SYSTEM_Perform_Safe_Shutdown+0x76>

        	Pin_Toggle(LD2_GPIO_Port, LD2_Pin);
 8005072:	2120      	movs	r1, #32
 8005074:	4802      	ldr	r0, [pc, #8]	; (8005080 <SYSTEM_Perform_Safe_Shutdown+0x9c>)
 8005076:	f7fb fbe8 	bl	800084a <Pin_Toggle>
        	HEARTBEAT_Update();
 800507a:	f7fb fdbb 	bl	8000bf4 <HEARTBEAT_Update>
    	for (Delay = 0; Delay < 200000; Delay++) j *= 3;
 800507e:	e7e9      	b.n	8005054 <SYSTEM_Perform_Safe_Shutdown+0x70>
 8005080:	40020000 	.word	0x40020000
 8005084:	0800524c 	.word	0x0800524c
 8005088:	20002564 	.word	0x20002564
 800508c:	08005254 	.word	0x08005254
 8005090:	0800525c 	.word	0x0800525c
 8005094:	00030d3f 	.word	0x00030d3f

08005098 <SYSTEM_Change_Mode_Fault>:
	}

}

void SYSTEM_Change_Mode_Fault(eSystem_mode mode)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	71fb      	strb	r3, [r7, #7]
	System_mode_G = mode;
 80050a2:	4a04      	ldr	r2, [pc, #16]	; (80050b4 <SYSTEM_Change_Mode_Fault+0x1c>)
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	7013      	strb	r3, [r2, #0]
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	20002564 	.word	0x20002564

080050b8 <SYSTEM_Get_Mode>:


eSystem_mode SYSTEM_Get_Mode(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
	return System_mode_G;
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <SYSTEM_Get_Mode+0x14>)
 80050be:	781b      	ldrb	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	20002564 	.word	0x20002564

080050d0 <__libc_init_array>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	4d0d      	ldr	r5, [pc, #52]	; (8005108 <__libc_init_array+0x38>)
 80050d4:	4c0d      	ldr	r4, [pc, #52]	; (800510c <__libc_init_array+0x3c>)
 80050d6:	1b64      	subs	r4, r4, r5
 80050d8:	10a4      	asrs	r4, r4, #2
 80050da:	2600      	movs	r6, #0
 80050dc:	42a6      	cmp	r6, r4
 80050de:	d109      	bne.n	80050f4 <__libc_init_array+0x24>
 80050e0:	4d0b      	ldr	r5, [pc, #44]	; (8005110 <__libc_init_array+0x40>)
 80050e2:	4c0c      	ldr	r4, [pc, #48]	; (8005114 <__libc_init_array+0x44>)
 80050e4:	f000 f87c 	bl	80051e0 <_init>
 80050e8:	1b64      	subs	r4, r4, r5
 80050ea:	10a4      	asrs	r4, r4, #2
 80050ec:	2600      	movs	r6, #0
 80050ee:	42a6      	cmp	r6, r4
 80050f0:	d105      	bne.n	80050fe <__libc_init_array+0x2e>
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f8:	4798      	blx	r3
 80050fa:	3601      	adds	r6, #1
 80050fc:	e7ee      	b.n	80050dc <__libc_init_array+0xc>
 80050fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005102:	4798      	blx	r3
 8005104:	3601      	adds	r6, #1
 8005106:	e7f2      	b.n	80050ee <__libc_init_array+0x1e>
 8005108:	080052b8 	.word	0x080052b8
 800510c:	080052b8 	.word	0x080052b8
 8005110:	080052b8 	.word	0x080052b8
 8005114:	080052bc 	.word	0x080052bc

08005118 <__itoa>:
 8005118:	1e93      	subs	r3, r2, #2
 800511a:	2b22      	cmp	r3, #34	; 0x22
 800511c:	b510      	push	{r4, lr}
 800511e:	460c      	mov	r4, r1
 8005120:	d904      	bls.n	800512c <__itoa+0x14>
 8005122:	2300      	movs	r3, #0
 8005124:	700b      	strb	r3, [r1, #0]
 8005126:	461c      	mov	r4, r3
 8005128:	4620      	mov	r0, r4
 800512a:	bd10      	pop	{r4, pc}
 800512c:	2a0a      	cmp	r2, #10
 800512e:	d109      	bne.n	8005144 <__itoa+0x2c>
 8005130:	2800      	cmp	r0, #0
 8005132:	da07      	bge.n	8005144 <__itoa+0x2c>
 8005134:	232d      	movs	r3, #45	; 0x2d
 8005136:	700b      	strb	r3, [r1, #0]
 8005138:	4240      	negs	r0, r0
 800513a:	2101      	movs	r1, #1
 800513c:	4421      	add	r1, r4
 800513e:	f000 f80d 	bl	800515c <__utoa>
 8005142:	e7f1      	b.n	8005128 <__itoa+0x10>
 8005144:	2100      	movs	r1, #0
 8005146:	e7f9      	b.n	800513c <__itoa+0x24>

08005148 <itoa>:
 8005148:	f7ff bfe6 	b.w	8005118 <__itoa>

0800514c <memset>:
 800514c:	4402      	add	r2, r0
 800514e:	4603      	mov	r3, r0
 8005150:	4293      	cmp	r3, r2
 8005152:	d100      	bne.n	8005156 <memset+0xa>
 8005154:	4770      	bx	lr
 8005156:	f803 1b01 	strb.w	r1, [r3], #1
 800515a:	e7f9      	b.n	8005150 <memset+0x4>

0800515c <__utoa>:
 800515c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800515e:	4c1f      	ldr	r4, [pc, #124]	; (80051dc <__utoa+0x80>)
 8005160:	b08b      	sub	sp, #44	; 0x2c
 8005162:	4605      	mov	r5, r0
 8005164:	460b      	mov	r3, r1
 8005166:	466e      	mov	r6, sp
 8005168:	f104 0c20 	add.w	ip, r4, #32
 800516c:	6820      	ldr	r0, [r4, #0]
 800516e:	6861      	ldr	r1, [r4, #4]
 8005170:	4637      	mov	r7, r6
 8005172:	c703      	stmia	r7!, {r0, r1}
 8005174:	3408      	adds	r4, #8
 8005176:	4564      	cmp	r4, ip
 8005178:	463e      	mov	r6, r7
 800517a:	d1f7      	bne.n	800516c <__utoa+0x10>
 800517c:	7921      	ldrb	r1, [r4, #4]
 800517e:	7139      	strb	r1, [r7, #4]
 8005180:	1e91      	subs	r1, r2, #2
 8005182:	6820      	ldr	r0, [r4, #0]
 8005184:	6038      	str	r0, [r7, #0]
 8005186:	2922      	cmp	r1, #34	; 0x22
 8005188:	f04f 0100 	mov.w	r1, #0
 800518c:	d904      	bls.n	8005198 <__utoa+0x3c>
 800518e:	7019      	strb	r1, [r3, #0]
 8005190:	460b      	mov	r3, r1
 8005192:	4618      	mov	r0, r3
 8005194:	b00b      	add	sp, #44	; 0x2c
 8005196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005198:	1e58      	subs	r0, r3, #1
 800519a:	4684      	mov	ip, r0
 800519c:	fbb5 f7f2 	udiv	r7, r5, r2
 80051a0:	fb02 5617 	mls	r6, r2, r7, r5
 80051a4:	3628      	adds	r6, #40	; 0x28
 80051a6:	446e      	add	r6, sp
 80051a8:	460c      	mov	r4, r1
 80051aa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80051ae:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80051b2:	462e      	mov	r6, r5
 80051b4:	42b2      	cmp	r2, r6
 80051b6:	f101 0101 	add.w	r1, r1, #1
 80051ba:	463d      	mov	r5, r7
 80051bc:	d9ee      	bls.n	800519c <__utoa+0x40>
 80051be:	2200      	movs	r2, #0
 80051c0:	545a      	strb	r2, [r3, r1]
 80051c2:	1919      	adds	r1, r3, r4
 80051c4:	1aa5      	subs	r5, r4, r2
 80051c6:	42aa      	cmp	r2, r5
 80051c8:	dae3      	bge.n	8005192 <__utoa+0x36>
 80051ca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80051ce:	780e      	ldrb	r6, [r1, #0]
 80051d0:	7006      	strb	r6, [r0, #0]
 80051d2:	3201      	adds	r2, #1
 80051d4:	f801 5901 	strb.w	r5, [r1], #-1
 80051d8:	e7f4      	b.n	80051c4 <__utoa+0x68>
 80051da:	bf00      	nop
 80051dc:	08005288 	.word	0x08005288

080051e0 <_init>:
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e2:	bf00      	nop
 80051e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e6:	bc08      	pop	{r3}
 80051e8:	469e      	mov	lr, r3
 80051ea:	4770      	bx	lr

080051ec <_fini>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	bf00      	nop
 80051f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f2:	bc08      	pop	{r3}
 80051f4:	469e      	mov	lr, r3
 80051f6:	4770      	bx	lr
