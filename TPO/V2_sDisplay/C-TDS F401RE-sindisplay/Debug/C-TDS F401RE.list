
C-TDS F401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800425c  0800425c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800427c  0800427c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800427c  0800427c  0001427c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004284  08004284  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004288  08004288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800428c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002518  2000000c  08004298  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002524  08004298  00022524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001179a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e78  00000000  00000000  000317d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00034650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00035658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001881e  00000000  00000000  00036500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bff  00000000  00000000  0004ed1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000991d4  00000000  00000000  0006491d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdaf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004128  00000000  00000000  000fdb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004244 	.word	0x08004244

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004244 	.word	0x08004244

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Pin_Config>:
 */

#include <pin_functions_stm32f401.h>

void Pin_Config(GPIO_TypeDef *port, uint32_t pin, uint32_t mode, uint32_t pull, uint32_t speed)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	603b      	str	r3, [r7, #0]
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = pull;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = speed;
 8000502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000504:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	4619      	mov	r1, r3
 800050c:	68f8      	ldr	r0, [r7, #12]
 800050e:	f001 feff 	bl	8002310 <HAL_GPIO_Init>
}
 8000512:	bf00      	nop
 8000514:	3728      	adds	r7, #40	; 0x28
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <Pin_Write>:

void Pin_Write(GPIO_TypeDef *port, uint32_t pin, uint32_t state)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b084      	sub	sp, #16
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(port, pin, state);
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	b29b      	uxth	r3, r3
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	4619      	mov	r1, r3
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	f002 f889 	bl	8002648 <HAL_GPIO_WritePin>
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <Pin_Toggle>:

void Pin_Toggle(GPIO_TypeDef *port, uint32_t pin)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(port, pin);
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	b29b      	uxth	r3, r3
 800054c:	4619      	mov	r1, r3
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f002 f893 	bl	800267a <HAL_GPIO_TogglePin>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <Pin_Read>:

GPIO_PinState Pin_Read(GPIO_TypeDef *port, uint32_t pin)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
	return HAL_GPIO_ReadPin(port, pin);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	b29b      	uxth	r3, r3
 800056a:	4619      	mov	r1, r3
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f002 f853 	bl	8002618 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
}
 8000574:	4618      	mov	r0, r3
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <READ_ADC_Init>:
extern ADC_HandleTypeDef hadc1;
int flag_sumar_uno = 0;
int conteo_positivos = 0;

void READ_ADC_Init(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
	int i=0;
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
	for(i=0; i < ADC_BUF_LEN; i++)
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	e007      	b.n	800059c <READ_ADC_Init+0x20>
	{
		adc_buf[i]=0;
 800058c:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <READ_ADC_Init+0x38>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2100      	movs	r1, #0
 8000592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0; i < ADC_BUF_LEN; i++)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3301      	adds	r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005a2:	dbf3      	blt.n	800058c <READ_ADC_Init+0x10>
	}
	return;
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
	Pin_Write(LD2_GPIO_Port, LD2_Pin, OFF);
}
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000198 	.word	0x20000198

080005b8 <READ_ADC_Update>:
void READ_ADC_Update(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
	int i = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
	int suma = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
	uint32_t prom = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
	int resta = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]


	HAL_ADC_Stop_DMA(&hadc1);
 80005ce:	4827      	ldr	r0, [pc, #156]	; (800066c <READ_ADC_Update+0xb4>)
 80005d0:	f000 fe92 	bl	80012f8 <HAL_ADC_Stop_DMA>

	for(i=0; i < ADC_BUF_LEN; i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e013      	b.n	8000602 <READ_ADC_Update+0x4a>
	{
		resta =  ((int) adc_buf[i])-OFFSET;
 80005da:	4a25      	ldr	r2, [pc, #148]	; (8000670 <READ_ADC_Update+0xb8>)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e2:	f5a3 6348 	sub.w	r3, r3, #3200	; 0xc80
 80005e6:	607b      	str	r3, [r7, #4]

		if(resta<0)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	da02      	bge.n	80005f4 <READ_ADC_Update+0x3c>
		{
			resta *= -1;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	425b      	negs	r3, r3
 80005f2:	607b      	str	r3, [r7, #4]
		}
		suma += resta;
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
	for(i=0; i < ADC_BUF_LEN; i++)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	3301      	adds	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000608:	dbe7      	blt.n	80005da <READ_ADC_Update+0x22>

		//}
	}
	prom = suma/ADC_BUF_LEN;
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	da01      	bge.n	8000614 <READ_ADC_Update+0x5c>
 8000610:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000614:	131b      	asrs	r3, r3, #12
 8000616:	603b      	str	r3, [r7, #0]
	//Verificar si el promedio de datos capturados supera el umbral seteado
	if(prom > THRESHOLD)
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2b14      	cmp	r3, #20
 800061c:	d90a      	bls.n	8000634 <READ_ADC_Update+0x7c>
	{
		conteo_positivos++;
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <READ_ADC_Update+0xbc>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	3301      	adds	r3, #1
 8000624:	4a13      	ldr	r2, [pc, #76]	; (8000674 <READ_ADC_Update+0xbc>)
 8000626:	6013      	str	r3, [r2, #0]
		Pin_Write(LD2_GPIO_Port, LD2_Pin, ON);
 8000628:	2201      	movs	r2, #1
 800062a:	2120      	movs	r1, #32
 800062c:	4812      	ldr	r0, [pc, #72]	; (8000678 <READ_ADC_Update+0xc0>)
 800062e:	f7ff ff74 	bl	800051a <Pin_Write>
 8000632:	e007      	b.n	8000644 <READ_ADC_Update+0x8c>
	}
	else
	{
		conteo_positivos = 0;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <READ_ADC_Update+0xbc>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
		Pin_Write(LD2_GPIO_Port, LD2_Pin, OFF);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <READ_ADC_Update+0xc0>)
 8000640:	f7ff ff6b 	bl	800051a <Pin_Write>
	}

	if(conteo_positivos >=6)
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <READ_ADC_Update+0xbc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	dd05      	ble.n	8000658 <READ_ADC_Update+0xa0>
	{
		flag_sumar_uno = 1;	//este flag se debe poner en 0 al sumar al conteo de pulsos
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <READ_ADC_Update+0xc4>)
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
		conteo_positivos=0;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <READ_ADC_Update+0xbc>)
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buf, ADC_BUF_LEN);
 8000658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800065c:	4904      	ldr	r1, [pc, #16]	; (8000670 <READ_ADC_Update+0xb8>)
 800065e:	4803      	ldr	r0, [pc, #12]	; (800066c <READ_ADC_Update+0xb4>)
 8000660:	f000 fd5a 	bl	8001118 <HAL_ADC_Start_DMA>
	return;
 8000664:	bf00      	nop
}
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000040 	.word	0x20000040
 8000670:	20000198 	.word	0x20000198
 8000674:	2000002c 	.word	0x2000002c
 8000678:	40020000 	.word	0x40020000
 800067c:	20000028 	.word	0x20000028

08000680 <HEARTBEAT_Init>:
#include "task-heartbeat.h"

void HEARTBEAT_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	//Pin_Config(Heartbeat_GPIO_Port, Heartbeat_Pin, GPIO_MODE_OUTPUT_PP, GPIO_PULLDOWN, GPIO_SPEED_FREQ_LOW);
	Pin_Write(Heartbeat_GPIO_Port, Heartbeat_Pin, ON);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068a:	4802      	ldr	r0, [pc, #8]	; (8000694 <HEARTBEAT_Init+0x14>)
 800068c:	f7ff ff45 	bl	800051a <Pin_Write>
	return;
 8000690:	bf00      	nop
}
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40020000 	.word	0x40020000

08000698 <HEARTBEAT_Update>:

void HEARTBEAT_Update(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	Pin_Toggle(Heartbeat_GPIO_Port, Heartbeat_Pin);
 800069c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <HEARTBEAT_Update+0x14>)
 80006a2:	f7ff ff4c 	bl	800053e <Pin_Toggle>
	return;
 80006a6:	bf00      	nop
}
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020000 	.word	0x40020000

080006b0 <ANTIRREBOTE_Init>:
static GPIO_PinState estado_actual_B1;
GPIO_PinState estado_anterior_B1;
GPIO_PinState vector_entradas[] = {0,0,0,0,0};

void ANTIRREBOTE_Init(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <ANTIRREBOTE_Update>:

//Update cada 10 ms, 5 lecturas
void ANTIRREBOTE_Update(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
	GPIO_PinState entradaB1;

	int suma_entradas=0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
	int j=0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]

	entradaB1 = Pin_Read(B1_GPIO_Port, B1_Pin);
 80006ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d2:	4825      	ldr	r0, [pc, #148]	; (8000768 <ANTIRREBOTE_Update+0xa8>)
 80006d4:	f7ff ff42 	bl	800055c <Pin_Read>
 80006d8:	4603      	mov	r3, r0
 80006da:	71fb      	strb	r3, [r7, #7]

	//Agrego valor de entrada actual
	vector_entradas[cont_estados] = entradaB1;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <ANTIRREBOTE_Update+0xac>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4923      	ldr	r1, [pc, #140]	; (8000770 <ANTIRREBOTE_Update+0xb0>)
 80006e2:	79fa      	ldrb	r2, [r7, #7]
 80006e4:	54ca      	strb	r2, [r1, r3]
	cont_estados++;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <ANTIRREBOTE_Update+0xac>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a1f      	ldr	r2, [pc, #124]	; (800076c <ANTIRREBOTE_Update+0xac>)
 80006ee:	6013      	str	r3, [r2, #0]
	if(cont_estados>4)
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <ANTIRREBOTE_Update+0xac>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	dd02      	ble.n	80006fe <ANTIRREBOTE_Update+0x3e>
	{
		cont_estados = 0;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <ANTIRREBOTE_Update+0xac>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
	}

	//sumo todos los valores del vector
	for(j=0; j<5; j++)
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	e00a      	b.n	800071a <ANTIRREBOTE_Update+0x5a>
	{
		suma_entradas += vector_entradas[j];
 8000704:	4a1a      	ldr	r2, [pc, #104]	; (8000770 <ANTIRREBOTE_Update+0xb0>)
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	60fb      	str	r3, [r7, #12]
	for(j=0; j<5; j++)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	3301      	adds	r3, #1
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	2b04      	cmp	r3, #4
 800071e:	ddf1      	ble.n	8000704 <ANTIRREBOTE_Update+0x44>
	}

	//Comparo ultimos valores de entrada con la actual
	estado_anterior_B1 = estado_actual_B1;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <ANTIRREBOTE_Update+0xb4>)
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <ANTIRREBOTE_Update+0xb8>)
 8000726:	701a      	strb	r2, [r3, #0]
	if((estado_anterior_B1 == OFF) && (suma_entradas > 3))
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <ANTIRREBOTE_Update+0xb8>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d106      	bne.n	800073e <ANTIRREBOTE_Update+0x7e>
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b03      	cmp	r3, #3
 8000734:	dd03      	ble.n	800073e <ANTIRREBOTE_Update+0x7e>
	{
		estado_actual_B1 = ON;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <ANTIRREBOTE_Update+0xb4>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			j=j;
		}
	}
}
 800073c:	e00f      	b.n	800075e <ANTIRREBOTE_Update+0x9e>
	else if((estado_anterior_B1 == ON) && (suma_entradas < 2))
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <ANTIRREBOTE_Update+0xb8>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d10b      	bne.n	800075e <ANTIRREBOTE_Update+0x9e>
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b01      	cmp	r3, #1
 800074a:	dc08      	bgt.n	800075e <ANTIRREBOTE_Update+0x9e>
		estado_actual_B1 = OFF;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <ANTIRREBOTE_Update+0xb4>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
		Pin_Write(LD2_GPIO_Port, LD2_Pin, ON); //Parece que el pulsador on-board es normal cerrado
 8000752:	2201      	movs	r2, #1
 8000754:	2120      	movs	r1, #32
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <ANTIRREBOTE_Update+0xbc>)
 8000758:	f7ff fedf 	bl	800051a <Pin_Write>
			j=j;
 800075c:	e7fe      	b.n	800075c <ANTIRREBOTE_Update+0x9c>
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40020800 	.word	0x40020800
 800076c:	20000030 	.word	0x20000030
 8000770:	20000038 	.word	0x20000038
 8000774:	20000034 	.word	0x20000034
 8000778:	20000035 	.word	0x20000035
 800077c:	40020000 	.word	0x40020000

08000780 <WATCHDOG_Init>:
#include "task-watchdog.h"

extern WWDG_HandleTypeDef hwwdg;

void WATCHDOG_Init(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
	...

08000790 <WATCHDOG_Update>:

void WATCHDOG_Update(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	HAL_WWDG_Refresh(&hwwdg);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <WATCHDOG_Update+0x10>)
 8000796:	f003 f893 	bl	80038c0 <HAL_WWDG_Refresh>
	return;
 800079a:	bf00      	nop
}
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000184 	.word	0x20000184

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 fc30 	bl	800100c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f81e 	bl	80007ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SYSTEM_Init();
 80007b0:	f003 fc5a 	bl	8004068 <SYSTEM_Init>
  SCH_Start();
 80007b4:	f003 fb76 	bl	8003ea4 <SCH_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 f950 	bl	8000a5c <MX_GPIO_Init>
  MX_DMA_Init();
 80007bc:	f000 f92e 	bl	8000a1c <MX_DMA_Init>
  MX_TIM11_Init();
 80007c0:	f000 f900 	bl	80009c4 <MX_TIM11_Init>
  MX_WWDG_Init();
 80007c4:	f000 f922 	bl	8000a0c <MX_WWDG_Init>
  MX_ADC1_Init();
 80007c8:	f000 f87c 	bl	80008c4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80007cc:	f000 f8cc 	bl	8000968 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buf, ADC_BUF_LEN);
 80007d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007d4:	4903      	ldr	r1, [pc, #12]	; (80007e4 <main+0x40>)
 80007d6:	4804      	ldr	r0, [pc, #16]	; (80007e8 <main+0x44>)
 80007d8:	f000 fc9e 	bl	8001118 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 SCH_Dispatch_Tasks();
 80007dc:	f003 f9b4 	bl	8003b48 <SCH_Dispatch_Tasks>
 80007e0:	e7fc      	b.n	80007dc <main+0x38>
 80007e2:	bf00      	nop
 80007e4:	20000198 	.word	0x20000198
 80007e8:	20000040 	.word	0x20000040

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	; 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	2230      	movs	r2, #48	; 0x30
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fd1a 	bl	8004234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	4b29      	ldr	r3, [pc, #164]	; (80008bc <SystemClock_Config+0xd0>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a28      	ldr	r2, [pc, #160]	; (80008bc <SystemClock_Config+0xd0>)
 800081a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
 8000820:	4b26      	ldr	r3, [pc, #152]	; (80008bc <SystemClock_Config+0xd0>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <SystemClock_Config+0xd4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <SystemClock_Config+0xd4>)
 800083a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <SystemClock_Config+0xd4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084c:	2302      	movs	r3, #2
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000850:	2301      	movs	r3, #1
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	2310      	movs	r3, #16
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000858:	2302      	movs	r3, #2
 800085a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800085c:	2300      	movs	r3, #0
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000860:	2310      	movs	r3, #16
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000864:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800086a:	2304      	movs	r3, #4
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800086e:	2307      	movs	r3, #7
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	4618      	mov	r0, r3
 8000878:	f002 f85e 	bl	8002938 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000882:	f000 f991 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2102      	movs	r1, #2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fabf 	bl	8002e28 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80008b0:	f000 f97a 	bl	8000ba8 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3750      	adds	r7, #80	; 0x50
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ca:	463b      	mov	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_ADC1_Init+0x98>)
 80008d8:	4a21      	ldr	r2, [pc, #132]	; (8000960 <MX_ADC1_Init+0x9c>)
 80008da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_ADC1_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_ADC1_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_ADC1_Init+0x98>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_ADC1_Init+0x98>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_ADC1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_ADC1_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_ADC1_Init+0x98>)
 8000904:	4a17      	ldr	r2, [pc, #92]	; (8000964 <MX_ADC1_Init+0xa0>)
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_ADC1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_ADC1_Init+0x98>)
 8000910:	2201      	movs	r2, #1
 8000912:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_ADC1_Init+0x98>)
 8000916:	2201      	movs	r2, #1
 8000918:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_ADC1_Init+0x98>)
 800091e:	2201      	movs	r2, #1
 8000920:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000922:	480e      	ldr	r0, [pc, #56]	; (800095c <MX_ADC1_Init+0x98>)
 8000924:	f000 fbb4 	bl	8001090 <HAL_ADC_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 f93b 	bl	8000ba8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_ADC1_Init+0x98>)
 8000944:	f000 fd50 	bl	80013e8 <HAL_ADC_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800094e:	f000 f92b 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000040 	.word	0x20000040
 8000960:	40012000 	.word	0x40012000
 8000964:	0f000001 	.word	0x0f000001

08000968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_I2C1_Init+0x50>)
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <MX_I2C1_Init+0x54>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_I2C1_Init+0x50>)
 8000974:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <MX_I2C1_Init+0x58>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_I2C1_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_I2C1_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_I2C1_Init+0x50>)
 8000986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800098a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_I2C1_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_I2C1_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_I2C1_Init+0x50>)
 80009a6:	f001 fe83 	bl	80026b0 <HAL_I2C_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b0:	f000 f8fa 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000e8 	.word	0x200000e8
 80009bc:	40005400 	.word	0x40005400
 80009c0:	000186a0 	.word	0x000186a0

080009c4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_TIM11_Init+0x40>)
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <MX_TIM11_Init+0x44>)
 80009cc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_TIM11_Init+0x40>)
 80009d0:	2253      	movs	r2, #83	; 0x53
 80009d2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_TIM11_Init+0x40>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_TIM11_Init+0x40>)
 80009dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_TIM11_Init+0x40>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_TIM11_Init+0x40>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_TIM11_Init+0x40>)
 80009f0:	f002 fc6c 	bl	80032cc <HAL_TIM_Base_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80009fa:	f000 f8d5 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000013c 	.word	0x2000013c
 8000a08:	40014800 	.word	0x40014800

08000a0c <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN WWDG_Init 0 */
  if(!WWDG_ENABLED) {
	  return;
 8000a10:	bf00      	nop
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_DMA_Init+0x3c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <MX_DMA_Init+0x3c>)
 8000a2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_DMA_Init+0x3c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2038      	movs	r0, #56	; 0x38
 8000a44:	f001 f84c 	bl	8001ae0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a48:	2038      	movs	r0, #56	; 0x38
 8000a4a:	f001 f865 	bl	8001b18 <HAL_NVIC_EnableIRQ>

}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b3c      	ldr	r3, [pc, #240]	; (8000b68 <MX_GPIO_Init+0x10c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a3b      	ldr	r2, [pc, #236]	; (8000b68 <MX_GPIO_Init+0x10c>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <MX_GPIO_Init+0x10c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <MX_GPIO_Init+0x10c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a34      	ldr	r2, [pc, #208]	; (8000b68 <MX_GPIO_Init+0x10c>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <MX_GPIO_Init+0x10c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <MX_GPIO_Init+0x10c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a2d      	ldr	r2, [pc, #180]	; (8000b68 <MX_GPIO_Init+0x10c>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <MX_GPIO_Init+0x10c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <MX_GPIO_Init+0x10c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <MX_GPIO_Init+0x10c>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <MX_GPIO_Init+0x10c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Heartbeat_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ae8:	4820      	ldr	r0, [pc, #128]	; (8000b6c <MX_GPIO_Init+0x110>)
 8000aea:	f001 fdad 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	481a      	ldr	r0, [pc, #104]	; (8000b70 <MX_GPIO_Init+0x114>)
 8000b06:	f001 fc03 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <MX_GPIO_Init+0x110>)
 8000b22:	f001 fbf5 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : Heartbeat_Pin */
  GPIO_InitStruct.Pin = Heartbeat_Pin;
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Heartbeat_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0x110>)
 8000b40:	f001 fbe6 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_GPIO_Init+0x114>)
 8000b5a:	f001 fbd9 	bl	8002310 <HAL_GPIO_Init>

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020800 	.word	0x40020800

08000b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM11) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x16>
	MONITOR_IRQHandler();
 8000b86:	f002 ff3f 	bl	8003a08 <MONITOR_IRQHandler>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d101      	bne.n	8000b98 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8000b94:	f000 fa5c 	bl	8001050 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40014800 	.word	0x40014800
 8000ba4:	40010000 	.word	0x40010000

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x8>
	...

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf2:	2007      	movs	r0, #7
 8000bf4:	f000 ff69 	bl	8001aca <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a2f      	ldr	r2, [pc, #188]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d157      	bne.n	8000cd6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <HAL_ADC_MspInit+0xe0>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a2d      	ldr	r2, [pc, #180]	; (8000ce4 <HAL_ADC_MspInit+0xe0>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <HAL_ADC_MspInit+0xe0>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <HAL_ADC_MspInit+0xe0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a26      	ldr	r2, [pc, #152]	; (8000ce4 <HAL_ADC_MspInit+0xe0>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <HAL_ADC_MspInit+0xe0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c62:	2303      	movs	r3, #3
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <HAL_ADC_MspInit+0xe4>)
 8000c72:	f001 fb4d 	bl	8002310 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000c78:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <HAL_ADC_MspInit+0xec>)
 8000c7a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c94:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c9c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000ca0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000cbc:	f000 ff48 	bl	8001b50 <HAL_DMA_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000cc6:	f7ff ff6f 	bl	8000ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_ADC_MspInit+0xe8>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40012000 	.word	0x40012000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	20000088 	.word	0x20000088
 8000cf0:	40026410 	.word	0x40026410

08000cf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <HAL_I2C_MspInit+0x84>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12c      	bne.n	8000d70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d44:	2304      	movs	r3, #4
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480c      	ldr	r0, [pc, #48]	; (8000d80 <HAL_I2C_MspInit+0x8c>)
 8000d50:	f001 fade 	bl	8002310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020400 	.word	0x40020400

08000d84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_TIM_Base_MspInit+0x48>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d115      	bne.n	8000dc2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_TIM_Base_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <HAL_TIM_Base_MspInit+0x4c>)
 8000da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_TIM_Base_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	201a      	movs	r0, #26
 8000db8:	f000 fe92 	bl	8001ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000dbc:	201a      	movs	r0, #26
 8000dbe:	f000 feab 	bl	8001b18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40014800 	.word	0x40014800
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_TIM_Base_MspDeInit+0x2c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d108      	bne.n	8000df8 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM11_MspDeInit 0 */

  /* USER CODE END TIM11_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM11_CLK_DISABLE();
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <HAL_TIM_Base_MspDeInit+0x30>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <HAL_TIM_Base_MspDeInit+0x30>)
 8000dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44

    /* TIM11 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000df2:	201a      	movs	r0, #26
 8000df4:	f000 fe9e 	bl	8001b34 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM11_MspDeInit 1 */

  /* USER CODE END TIM11_MspDeInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40014800 	.word	0x40014800
 8000e04:	40023800 	.word	0x40023800

08000e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_InitTick+0xd4>)
 8000e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e20:	4a2e      	ldr	r2, [pc, #184]	; (8000edc <HAL_InitTick+0xd4>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6453      	str	r3, [r2, #68]	; 0x44
 8000e28:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <HAL_InitTick+0xd4>)
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e34:	f107 020c 	add.w	r2, r7, #12
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fa12 	bl	8003268 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e44:	f002 f9fc 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	4a23      	ldr	r2, [pc, #140]	; (8000ee0 <HAL_InitTick+0xd8>)
 8000e52:	fba2 2303 	umull	r2, r3, r2, r3
 8000e56:	0c9b      	lsrs	r3, r3, #18
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e5c:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <HAL_InitTick+0xdc>)
 8000e5e:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <HAL_InitTick+0xe0>)
 8000e60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <HAL_InitTick+0xdc>)
 8000e64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <HAL_InitTick+0xdc>)
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_InitTick+0xdc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <HAL_InitTick+0xdc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_InitTick+0xdc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e82:	4818      	ldr	r0, [pc, #96]	; (8000ee4 <HAL_InitTick+0xdc>)
 8000e84:	f002 fa22 	bl	80032cc <HAL_TIM_Base_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d11b      	bne.n	8000ece <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e96:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <HAL_InitTick+0xdc>)
 8000e98:	f002 fabc 	bl	8003414 <HAL_TIM_Base_Start_IT>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d111      	bne.n	8000ece <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000eaa:	2019      	movs	r0, #25
 8000eac:	f000 fe34 	bl	8001b18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	d808      	bhi.n	8000ec8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	2019      	movs	r0, #25
 8000ebc:	f000 fe10 	bl	8001ae0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_InitTick+0xe4>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e002      	b.n	8000ece <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3730      	adds	r7, #48	; 0x30
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	431bde83 	.word	0x431bde83
 8000ee4:	20002198 	.word	0x20002198
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	20000004 	.word	0x20000004

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SCH_SysTick_Handler();
 8000f3c:	f003 f872 	bl	8004024 <SCH_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <WWDG_IRQHandler+0x10>)
 8000f4a:	f002 fcc9 	bl	80038e0 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000184 	.word	0x20000184

08000f58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f5e:	f002 faea 	bl	8003536 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20002198 	.word	0x20002198

08000f6c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000f72:	f002 fae0 	bl	8003536 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000013c 	.word	0x2000013c

08000f80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA2_Stream0_IRQHandler+0x10>)
 8000f86:	f000 ff59 	bl	8001e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000088 	.word	0x20000088

08000f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fbe:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd4:	4c0b      	ldr	r4, [pc, #44]	; (8001004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe2:	f7ff ffd7 	bl	8000f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f003 f901 	bl	80041ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fbdb 	bl	80007a4 <main>
  bx  lr    
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ff0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ffc:	0800428c 	.word	0x0800428c
  ldr r2, =_sbss
 8001000:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001004:	20002524 	.word	0x20002524

08001008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <HAL_Init+0x40>)
 8001016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_Init+0x40>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x40>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 fd48 	bl	8001aca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fee4 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fdb8 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	200021e0 	.word	0x200021e0

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200021e0 	.word	0x200021e0

08001090 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e033      	b.n	800110e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d109      	bne.n	80010c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fda8 	bl	8000c04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d118      	bne.n	8001100 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010d6:	f023 0302 	bic.w	r3, r3, #2
 80010da:	f043 0202 	orr.w	r2, r3, #2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 faa2 	bl	800162c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f023 0303 	bic.w	r3, r3, #3
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40
 80010fe:	e001      	b.n	8001104 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800112e:	2b01      	cmp	r3, #1
 8001130:	d101      	bne.n	8001136 <HAL_ADC_Start_DMA+0x1e>
 8001132:	2302      	movs	r3, #2
 8001134:	e0ce      	b.n	80012d4 <HAL_ADC_Start_DMA+0x1bc>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b01      	cmp	r3, #1
 800114a:	d018      	beq.n	800117e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0201 	orr.w	r2, r2, #1
 800115a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800115c:	4b5f      	ldr	r3, [pc, #380]	; (80012dc <HAL_ADC_Start_DMA+0x1c4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a5f      	ldr	r2, [pc, #380]	; (80012e0 <HAL_ADC_Start_DMA+0x1c8>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	0c9a      	lsrs	r2, r3, #18
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001170:	e002      	b.n	8001178 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	3b01      	subs	r3, #1
 8001176:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f9      	bne.n	8001172 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800118c:	d107      	bne.n	800119e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800119c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	f040 8086 	bne.w	80012ba <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011b6:	f023 0301 	bic.w	r3, r3, #1
 80011ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ec:	d106      	bne.n	80011fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f023 0206 	bic.w	r2, r3, #6
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
 80011fa:	e002      	b.n	8001202 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800120a:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <HAL_ADC_Start_DMA+0x1cc>)
 800120c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	4a35      	ldr	r2, [pc, #212]	; (80012e8 <HAL_ADC_Start_DMA+0x1d0>)
 8001214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121a:	4a34      	ldr	r2, [pc, #208]	; (80012ec <HAL_ADC_Start_DMA+0x1d4>)
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001222:	4a33      	ldr	r2, [pc, #204]	; (80012f0 <HAL_ADC_Start_DMA+0x1d8>)
 8001224:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800122e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800123e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800124e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	334c      	adds	r3, #76	; 0x4c
 800125a:	4619      	mov	r1, r3
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f000 fd24 	bl	8001cac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10f      	bne.n	8001290 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d129      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	e020      	b.n	80012d2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <HAL_ADC_Start_DMA+0x1dc>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d11b      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x1ba>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d114      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	e00b      	b.n	80012d2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f043 0210 	orr.w	r2, r3, #16
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000000 	.word	0x20000000
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	40012300 	.word	0x40012300
 80012e8:	08001825 	.word	0x08001825
 80012ec:	080018df 	.word	0x080018df
 80012f0:	080018fb 	.word	0x080018fb
 80012f4:	40012000 	.word	0x40012000

080012f8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HAL_ADC_Stop_DMA+0x1a>
 800130e:	2302      	movs	r3, #2
 8001310:	e048      	b.n	80013a4 <HAL_ADC_Stop_DMA+0xac>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0201 	bic.w	r2, r2, #1
 8001328:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d130      	bne.n	800139a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001346:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d10f      	bne.n	8001376 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fcfe 	bl	8001d5c <HAL_DMA_Abort>
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001384:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800138e:	f023 0301 	bic.w	r3, r3, #1
 8001392:	f043 0201 	orr.w	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1c>
 8001400:	2302      	movs	r3, #2
 8001402:	e105      	b.n	8001610 <HAL_ADC_ConfigChannel+0x228>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b09      	cmp	r3, #9
 8001412:	d925      	bls.n	8001460 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68d9      	ldr	r1, [r3, #12]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	3b1e      	subs	r3, #30
 800142a:	2207      	movs	r2, #7
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43da      	mvns	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	400a      	ands	r2, r1
 8001438:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68d9      	ldr	r1, [r3, #12]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	4603      	mov	r3, r0
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4403      	add	r3, r0
 8001452:	3b1e      	subs	r3, #30
 8001454:	409a      	lsls	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	e022      	b.n	80014a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6919      	ldr	r1, [r3, #16]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	2207      	movs	r2, #7
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	400a      	ands	r2, r1
 8001482:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6919      	ldr	r1, [r3, #16]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	4603      	mov	r3, r0
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4403      	add	r3, r0
 800149c:	409a      	lsls	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d824      	bhi.n	80014f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	3b05      	subs	r3, #5
 80014c0:	221f      	movs	r2, #31
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	400a      	ands	r2, r1
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	3b05      	subs	r3, #5
 80014ea:	fa00 f203 	lsl.w	r2, r0, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34
 80014f6:	e04c      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	d824      	bhi.n	800154a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b23      	subs	r3, #35	; 0x23
 8001512:	221f      	movs	r2, #31
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43da      	mvns	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	400a      	ands	r2, r1
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	3b23      	subs	r3, #35	; 0x23
 800153c:	fa00 f203 	lsl.w	r2, r0, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
 8001548:	e023      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	3b41      	subs	r3, #65	; 0x41
 800155c:	221f      	movs	r2, #31
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	400a      	ands	r2, r1
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	3b41      	subs	r3, #65	; 0x41
 8001586:	fa00 f203 	lsl.w	r2, r0, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <HAL_ADC_ConfigChannel+0x234>)
 8001594:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a21      	ldr	r2, [pc, #132]	; (8001620 <HAL_ADC_ConfigChannel+0x238>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d109      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x1cc>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b12      	cmp	r3, #18
 80015a6:	d105      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_ADC_ConfigChannel+0x238>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d123      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x21e>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d003      	beq.n	80015ce <HAL_ADC_ConfigChannel+0x1e6>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b11      	cmp	r3, #17
 80015cc:	d11b      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b10      	cmp	r3, #16
 80015e0:	d111      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_ADC_ConfigChannel+0x23c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <HAL_ADC_ConfigChannel+0x240>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	0c9a      	lsrs	r2, r3, #18
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015f8:	e002      	b.n	8001600 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f9      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40012300 	.word	0x40012300
 8001620:	40012000 	.word	0x40012000
 8001624:	20000000 	.word	0x20000000
 8001628:	431bde83 	.word	0x431bde83

0800162c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001634:	4b79      	ldr	r3, [pc, #484]	; (800181c <ADC_Init+0x1f0>)
 8001636:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	431a      	orrs	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	021a      	lsls	r2, r3, #8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6899      	ldr	r1, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	4a58      	ldr	r2, [pc, #352]	; (8001820 <ADC_Init+0x1f4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d022      	beq.n	800170a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6899      	ldr	r1, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6899      	ldr	r1, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	e00f      	b.n	800172a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001728:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0202 	bic.w	r2, r2, #2
 8001738:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6899      	ldr	r1, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e1b      	ldrb	r3, [r3, #24]
 8001744:	005a      	lsls	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d01b      	beq.n	8001790 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001766:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001776:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6859      	ldr	r1, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	3b01      	subs	r3, #1
 8001784:	035a      	lsls	r2, r3, #13
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	e007      	b.n	80017a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800179e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	051a      	lsls	r2, r3, #20
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6899      	ldr	r1, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017e2:	025a      	lsls	r2, r3, #9
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6899      	ldr	r1, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	029a      	lsls	r2, r3, #10
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	609a      	str	r2, [r3, #8]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40012300 	.word	0x40012300
 8001820:	0f000001 	.word	0x0f000001

08001824 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001830:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800183a:	2b00      	cmp	r3, #0
 800183c:	d13c      	bne.n	80018b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d12b      	bne.n	80018b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800185c:	2b00      	cmp	r3, #0
 800185e:	d127      	bne.n	80018b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001878:	2b00      	cmp	r3, #0
 800187a:	d119      	bne.n	80018b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0220 	bic.w	r2, r2, #32
 800188a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f043 0201 	orr.w	r2, r3, #1
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7ff fd7b 	bl	80013ac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018b6:	e00e      	b.n	80018d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f7ff fd85 	bl	80013d4 <HAL_ADC_ErrorCallback>
}
 80018ca:	e004      	b.n	80018d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	4798      	blx	r3
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff fd67 	bl	80013c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001906:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2240      	movs	r2, #64	; 0x40
 800190c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f043 0204 	orr.w	r2, r3, #4
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f7ff fd5a 	bl	80013d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <__NVIC_EnableIRQ+0x38>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db12      	blt.n	8001a00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	490a      	ldr	r1, [pc, #40]	; (8001a0c <__NVIC_DisableIRQ+0x44>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	3320      	adds	r3, #32
 80019f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019f4:	f3bf 8f4f 	dsb	sy
}
 80019f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019fa:	f3bf 8f6f 	isb	sy
}
 80019fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ff28 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af2:	f7ff ff3d 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001af6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	6978      	ldr	r0, [r7, #20]
 8001afe:	f7ff ffb1 	bl	8001a64 <NVIC_EncodePriority>
 8001b02:	4602      	mov	r2, r0
 8001b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff80 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b10:	bf00      	nop
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff30 	bl	800198c <__NVIC_EnableIRQ>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff40 	bl	80019c8 <__NVIC_DisableIRQ>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff fa8c 	bl	8001078 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e099      	b.n	8001ca0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b8c:	e00f      	b.n	8001bae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b8e:	f7ff fa73 	bl	8001078 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d908      	bls.n	8001bae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e078      	b.n	8001ca0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e8      	bne.n	8001b8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <HAL_DMA_Init+0x158>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d107      	bne.n	8001c18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	4313      	orrs	r3, r2
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f023 0307 	bic.w	r3, r3, #7
 8001c2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d117      	bne.n	8001c72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00e      	beq.n	8001c72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fadf 	bl	8002218 <DMA_CheckFifoParam>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e016      	b.n	8001ca0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fa96 	bl	80021ac <DMA_CalcBaseAndBitshift>
 8001c80:	4603      	mov	r3, r0
 8001c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	223f      	movs	r2, #63	; 0x3f
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	f010803f 	.word	0xf010803f

08001cac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_DMA_Start_IT+0x26>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e040      	b.n	8001d54 <HAL_DMA_Start_IT+0xa8>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d12f      	bne.n	8001d46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 fa28 	bl	8002150 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	223f      	movs	r2, #63	; 0x3f
 8001d06:	409a      	lsls	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0216 	orr.w	r2, r2, #22
 8001d1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0208 	orr.w	r2, r2, #8
 8001d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e005      	b.n	8001d52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d6a:	f7ff f985 	bl	8001078 <HAL_GetTick>
 8001d6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d008      	beq.n	8001d8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e052      	b.n	8001e34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0216 	bic.w	r2, r2, #22
 8001d9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <HAL_DMA_Abort+0x62>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0208 	bic.w	r2, r2, #8
 8001dcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0201 	bic.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dde:	e013      	b.n	8001e08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de0:	f7ff f94a 	bl	8001078 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d90c      	bls.n	8001e08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2220      	movs	r2, #32
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e015      	b.n	8001e34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1e4      	bne.n	8001de0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	223f      	movs	r2, #63	; 0x3f
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e48:	4b8e      	ldr	r3, [pc, #568]	; (8002084 <HAL_DMA_IRQHandler+0x248>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a8e      	ldr	r2, [pc, #568]	; (8002088 <HAL_DMA_IRQHandler+0x24c>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0a9b      	lsrs	r3, r3, #10
 8001e54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	2208      	movs	r2, #8
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d01a      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0204 	bic.w	r2, r2, #4
 8001e8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e94:	2208      	movs	r2, #8
 8001e96:	409a      	lsls	r2, r3
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	2201      	movs	r2, #1
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d012      	beq.n	8001ede <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eca:	2201      	movs	r2, #1
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed6:	f043 0202 	orr.w	r2, r3, #2
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d012      	beq.n	8001f14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00b      	beq.n	8001f14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	2204      	movs	r2, #4
 8001f02:	409a      	lsls	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	f043 0204 	orr.w	r2, r3, #4
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f18:	2210      	movs	r2, #16
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d043      	beq.n	8001fac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d03c      	beq.n	8001fac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f36:	2210      	movs	r2, #16
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d018      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d108      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d024      	beq.n	8001fac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	4798      	blx	r3
 8001f6a:	e01f      	b.n	8001fac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01b      	beq.n	8001fac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
 8001f7c:	e016      	b.n	8001fac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d107      	bne.n	8001f9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0208 	bic.w	r2, r2, #8
 8001f9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 808f 	beq.w	80020dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 8087 	beq.w	80020dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d136      	bne.n	8002054 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0216 	bic.w	r2, r2, #22
 8001ff4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695a      	ldr	r2, [r3, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002004:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d103      	bne.n	8002016 <HAL_DMA_IRQHandler+0x1da>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0208 	bic.w	r2, r2, #8
 8002024:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	223f      	movs	r2, #63	; 0x3f
 800202c:	409a      	lsls	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002046:	2b00      	cmp	r3, #0
 8002048:	d07e      	beq.n	8002148 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
        }
        return;
 8002052:	e079      	b.n	8002148 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01d      	beq.n	800209e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10d      	bne.n	800208c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	2b00      	cmp	r3, #0
 8002076:	d031      	beq.n	80020dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
 8002080:	e02c      	b.n	80020dc <HAL_DMA_IRQHandler+0x2a0>
 8002082:	bf00      	nop
 8002084:	20000000 	.word	0x20000000
 8002088:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	2b00      	cmp	r3, #0
 8002092:	d023      	beq.n	80020dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
 800209c:	e01e      	b.n	80020dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10f      	bne.n	80020cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0210 	bic.w	r2, r2, #16
 80020ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d032      	beq.n	800214a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d022      	beq.n	8002136 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2205      	movs	r2, #5
 80020f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	3301      	adds	r3, #1
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	429a      	cmp	r2, r3
 8002112:	d307      	bcc.n	8002124 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f2      	bne.n	8002108 <HAL_DMA_IRQHandler+0x2cc>
 8002122:	e000      	b.n	8002126 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002124:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
 8002146:	e000      	b.n	800214a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002148:	bf00      	nop
    }
  }
}
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800216c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b40      	cmp	r3, #64	; 0x40
 800217c:	d108      	bne.n	8002190 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800218e:	e007      	b.n	80021a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	3b10      	subs	r3, #16
 80021bc:	4a14      	ldr	r2, [pc, #80]	; (8002210 <DMA_CalcBaseAndBitshift+0x64>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <DMA_CalcBaseAndBitshift+0x68>)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d909      	bls.n	80021ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021e2:	f023 0303 	bic.w	r3, r3, #3
 80021e6:	1d1a      	adds	r2, r3, #4
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	659a      	str	r2, [r3, #88]	; 0x58
 80021ec:	e007      	b.n	80021fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021f6:	f023 0303 	bic.w	r3, r3, #3
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	aaaaaaab 	.word	0xaaaaaaab
 8002214:	08004274 	.word	0x08004274

08002218 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d11f      	bne.n	8002272 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d856      	bhi.n	80022e6 <DMA_CheckFifoParam+0xce>
 8002238:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <DMA_CheckFifoParam+0x28>)
 800223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223e:	bf00      	nop
 8002240:	08002251 	.word	0x08002251
 8002244:	08002263 	.word	0x08002263
 8002248:	08002251 	.word	0x08002251
 800224c:	080022e7 	.word	0x080022e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d046      	beq.n	80022ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002260:	e043      	b.n	80022ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800226a:	d140      	bne.n	80022ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002270:	e03d      	b.n	80022ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800227a:	d121      	bne.n	80022c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d837      	bhi.n	80022f2 <DMA_CheckFifoParam+0xda>
 8002282:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <DMA_CheckFifoParam+0x70>)
 8002284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002288:	08002299 	.word	0x08002299
 800228c:	0800229f 	.word	0x0800229f
 8002290:	08002299 	.word	0x08002299
 8002294:	080022b1 	.word	0x080022b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
      break;
 800229c:	e030      	b.n	8002300 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d025      	beq.n	80022f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ae:	e022      	b.n	80022f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022b8:	d11f      	bne.n	80022fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022be:	e01c      	b.n	80022fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d903      	bls.n	80022ce <DMA_CheckFifoParam+0xb6>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d003      	beq.n	80022d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022cc:	e018      	b.n	8002300 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
      break;
 80022d2:	e015      	b.n	8002300 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00e      	beq.n	80022fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
      break;
 80022e4:	e00b      	b.n	80022fe <DMA_CheckFifoParam+0xe6>
      break;
 80022e6:	bf00      	nop
 80022e8:	e00a      	b.n	8002300 <DMA_CheckFifoParam+0xe8>
      break;
 80022ea:	bf00      	nop
 80022ec:	e008      	b.n	8002300 <DMA_CheckFifoParam+0xe8>
      break;
 80022ee:	bf00      	nop
 80022f0:	e006      	b.n	8002300 <DMA_CheckFifoParam+0xe8>
      break;
 80022f2:	bf00      	nop
 80022f4:	e004      	b.n	8002300 <DMA_CheckFifoParam+0xe8>
      break;
 80022f6:	bf00      	nop
 80022f8:	e002      	b.n	8002300 <DMA_CheckFifoParam+0xe8>
      break;   
 80022fa:	bf00      	nop
 80022fc:	e000      	b.n	8002300 <DMA_CheckFifoParam+0xe8>
      break;
 80022fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	e159      	b.n	80025e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	f040 8148 	bne.w	80025da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d005      	beq.n	8002362 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235e:	2b02      	cmp	r3, #2
 8002360:	d130      	bne.n	80023c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 0201 	and.w	r2, r3, #1
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d017      	beq.n	8002400 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d123      	bne.n	8002454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	69b9      	ldr	r1, [r7, #24]
 8002450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0203 	and.w	r2, r3, #3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a2 	beq.w	80025da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b57      	ldr	r3, [pc, #348]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a56      	ldr	r2, [pc, #344]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b54      	ldr	r3, [pc, #336]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b2:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_GPIO_Init+0x2ec>)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	220f      	movs	r2, #15
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a49      	ldr	r2, [pc, #292]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d019      	beq.n	8002512 <HAL_GPIO_Init+0x202>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a48      	ldr	r2, [pc, #288]	; (8002604 <HAL_GPIO_Init+0x2f4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0x1fe>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a47      	ldr	r2, [pc, #284]	; (8002608 <HAL_GPIO_Init+0x2f8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00d      	beq.n	800250a <HAL_GPIO_Init+0x1fa>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a46      	ldr	r2, [pc, #280]	; (800260c <HAL_GPIO_Init+0x2fc>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x1f6>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a45      	ldr	r2, [pc, #276]	; (8002610 <HAL_GPIO_Init+0x300>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_GPIO_Init+0x1f2>
 80024fe:	2304      	movs	r3, #4
 8002500:	e008      	b.n	8002514 <HAL_GPIO_Init+0x204>
 8002502:	2307      	movs	r3, #7
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x204>
 8002506:	2303      	movs	r3, #3
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x204>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x204>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x204>
 8002512:	2300      	movs	r3, #0
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002524:	4935      	ldr	r1, [pc, #212]	; (80025fc <HAL_GPIO_Init+0x2ec>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002532:	4b38      	ldr	r3, [pc, #224]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002556:	4a2f      	ldr	r2, [pc, #188]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_GPIO_Init+0x304>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002580:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002586:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025aa:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	f67f aea2 	bls.w	800232c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40013800 	.word	0x40013800
 8002600:	40020000 	.word	0x40020000
 8002604:	40020400 	.word	0x40020400
 8002608:	40020800 	.word	0x40020800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40021000 	.word	0x40021000
 8002614:	40013c00 	.word	0x40013c00

08002618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
 8002634:	e001      	b.n	800263a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800263a:	7bfb      	ldrb	r3, [r7, #15]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
 8002654:	4613      	mov	r3, r2
 8002656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002664:	e003      	b.n	800266e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	041a      	lsls	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	619a      	str	r2, [r3, #24]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267a:	b480      	push	{r7}
 800267c:	b085      	sub	sp, #20
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800268c:	887a      	ldrh	r2, [r7, #2]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4013      	ands	r3, r2
 8002692:	041a      	lsls	r2, r3, #16
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	43d9      	mvns	r1, r3
 8002698:	887b      	ldrh	r3, [r7, #2]
 800269a:	400b      	ands	r3, r1
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	619a      	str	r2, [r3, #24]
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e12b      	b.n	800291a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fb0c 	bl	8000cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	; 0x24
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002714:	f000 fd80 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8002718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a81      	ldr	r2, [pc, #516]	; (8002924 <HAL_I2C_Init+0x274>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d807      	bhi.n	8002734 <HAL_I2C_Init+0x84>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a80      	ldr	r2, [pc, #512]	; (8002928 <HAL_I2C_Init+0x278>)
 8002728:	4293      	cmp	r3, r2
 800272a:	bf94      	ite	ls
 800272c:	2301      	movls	r3, #1
 800272e:	2300      	movhi	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e006      	b.n	8002742 <HAL_I2C_Init+0x92>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4a7d      	ldr	r2, [pc, #500]	; (800292c <HAL_I2C_Init+0x27c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	bf94      	ite	ls
 800273c:	2301      	movls	r3, #1
 800273e:	2300      	movhi	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0e7      	b.n	800291a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4a78      	ldr	r2, [pc, #480]	; (8002930 <HAL_I2C_Init+0x280>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9b      	lsrs	r3, r3, #18
 8002754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a6a      	ldr	r2, [pc, #424]	; (8002924 <HAL_I2C_Init+0x274>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d802      	bhi.n	8002784 <HAL_I2C_Init+0xd4>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	3301      	adds	r3, #1
 8002782:	e009      	b.n	8002798 <HAL_I2C_Init+0xe8>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	4a69      	ldr	r2, [pc, #420]	; (8002934 <HAL_I2C_Init+0x284>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	3301      	adds	r3, #1
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	430b      	orrs	r3, r1
 800279e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	495c      	ldr	r1, [pc, #368]	; (8002924 <HAL_I2C_Init+0x274>)
 80027b4:	428b      	cmp	r3, r1
 80027b6:	d819      	bhi.n	80027ec <HAL_I2C_Init+0x13c>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e59      	subs	r1, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c6:	1c59      	adds	r1, r3, #1
 80027c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027cc:	400b      	ands	r3, r1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_I2C_Init+0x138>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1e59      	subs	r1, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e6:	e051      	b.n	800288c <HAL_I2C_Init+0x1dc>
 80027e8:	2304      	movs	r3, #4
 80027ea:	e04f      	b.n	800288c <HAL_I2C_Init+0x1dc>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d111      	bne.n	8002818 <HAL_I2C_Init+0x168>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e58      	subs	r0, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	440b      	add	r3, r1
 8002802:	fbb0 f3f3 	udiv	r3, r0, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	e012      	b.n	800283e <HAL_I2C_Init+0x18e>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1e58      	subs	r0, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	0099      	lsls	r1, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	fbb0 f3f3 	udiv	r3, r0, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_Init+0x196>
 8002842:	2301      	movs	r3, #1
 8002844:	e022      	b.n	800288c <HAL_I2C_Init+0x1dc>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10e      	bne.n	800286c <HAL_I2C_Init+0x1bc>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1e58      	subs	r0, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	440b      	add	r3, r1
 800285c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002860:	3301      	adds	r3, #1
 8002862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286a:	e00f      	b.n	800288c <HAL_I2C_Init+0x1dc>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1e58      	subs	r0, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	0099      	lsls	r1, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002882:	3301      	adds	r3, #1
 8002884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	6809      	ldr	r1, [r1, #0]
 8002890:	4313      	orrs	r3, r2
 8002892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69da      	ldr	r2, [r3, #28]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6911      	ldr	r1, [r2, #16]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68d2      	ldr	r2, [r2, #12]
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	000186a0 	.word	0x000186a0
 8002928:	001e847f 	.word	0x001e847f
 800292c:	003d08ff 	.word	0x003d08ff
 8002930:	431bde83 	.word	0x431bde83
 8002934:	10624dd3 	.word	0x10624dd3

08002938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e267      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d075      	beq.n	8002a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002956:	4b88      	ldr	r3, [pc, #544]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b04      	cmp	r3, #4
 8002960:	d00c      	beq.n	800297c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002962:	4b85      	ldr	r3, [pc, #532]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800296a:	2b08      	cmp	r3, #8
 800296c:	d112      	bne.n	8002994 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296e:	4b82      	ldr	r3, [pc, #520]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800297a:	d10b      	bne.n	8002994 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	4b7e      	ldr	r3, [pc, #504]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d05b      	beq.n	8002a40 <HAL_RCC_OscConfig+0x108>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d157      	bne.n	8002a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e242      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d106      	bne.n	80029ac <HAL_RCC_OscConfig+0x74>
 800299e:	4b76      	ldr	r3, [pc, #472]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a75      	ldr	r2, [pc, #468]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e01d      	b.n	80029e8 <HAL_RCC_OscConfig+0xb0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x98>
 80029b6:	4b70      	ldr	r3, [pc, #448]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6f      	ldr	r2, [pc, #444]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b6d      	ldr	r3, [pc, #436]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6c      	ldr	r2, [pc, #432]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0xb0>
 80029d0:	4b69      	ldr	r3, [pc, #420]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a68      	ldr	r2, [pc, #416]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b66      	ldr	r3, [pc, #408]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a65      	ldr	r2, [pc, #404]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fe fb42 	bl	8001078 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f8:	f7fe fb3e 	bl	8001078 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e207      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	4b5b      	ldr	r3, [pc, #364]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0xc0>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe fb2e 	bl	8001078 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe fb2a 	bl	8001078 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1f3      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	4b51      	ldr	r3, [pc, #324]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0xe8>
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d063      	beq.n	8002b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a4e:	4b4a      	ldr	r3, [pc, #296]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a5a:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d11c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a66:	4b44      	ldr	r3, [pc, #272]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d116      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a72:	4b41      	ldr	r3, [pc, #260]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_RCC_OscConfig+0x152>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e1c7      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4937      	ldr	r1, [pc, #220]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9e:	e03a      	b.n	8002b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa8:	4b34      	ldr	r3, [pc, #208]	; (8002b7c <HAL_RCC_OscConfig+0x244>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7fe fae3 	bl	8001078 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab6:	f7fe fadf 	bl	8001078 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e1a8      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad4:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4925      	ldr	r1, [pc, #148]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]
 8002ae8:	e015      	b.n	8002b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_RCC_OscConfig+0x244>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fac2 	bl	8001078 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af8:	f7fe fabe 	bl	8001078 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e187      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d036      	beq.n	8002b90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_RCC_OscConfig+0x248>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe faa2 	bl	8001078 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b38:	f7fe fa9e 	bl	8001078 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e167      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x200>
 8002b56:	e01b      	b.n	8002b90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_OscConfig+0x248>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe fa8b 	bl	8001078 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b64:	e00e      	b.n	8002b84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b66:	f7fe fa87 	bl	8001078 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d907      	bls.n	8002b84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e150      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	42470000 	.word	0x42470000
 8002b80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b84:	4b88      	ldr	r3, [pc, #544]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ea      	bne.n	8002b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8097 	beq.w	8002ccc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba2:	4b81      	ldr	r3, [pc, #516]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	4b7d      	ldr	r3, [pc, #500]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a7c      	ldr	r2, [pc, #496]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b7a      	ldr	r3, [pc, #488]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	4b77      	ldr	r3, [pc, #476]	; (8002dac <HAL_RCC_OscConfig+0x474>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d118      	bne.n	8002c0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bda:	4b74      	ldr	r3, [pc, #464]	; (8002dac <HAL_RCC_OscConfig+0x474>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a73      	ldr	r2, [pc, #460]	; (8002dac <HAL_RCC_OscConfig+0x474>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fa47 	bl	8001078 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bee:	f7fe fa43 	bl	8001078 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e10c      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	4b6a      	ldr	r3, [pc, #424]	; (8002dac <HAL_RCC_OscConfig+0x474>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2ea>
 8002c14:	4b64      	ldr	r3, [pc, #400]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a63      	ldr	r2, [pc, #396]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c20:	e01c      	b.n	8002c5c <HAL_RCC_OscConfig+0x324>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x30c>
 8002c2a:	4b5f      	ldr	r3, [pc, #380]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	4a5e      	ldr	r2, [pc, #376]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70
 8002c36:	4b5c      	ldr	r3, [pc, #368]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a5b      	ldr	r2, [pc, #364]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0x324>
 8002c44:	4b58      	ldr	r3, [pc, #352]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a57      	ldr	r2, [pc, #348]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	4b55      	ldr	r3, [pc, #340]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a54      	ldr	r2, [pc, #336]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f023 0304 	bic.w	r3, r3, #4
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d015      	beq.n	8002c90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe fa08 	bl	8001078 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fa04 	bl	8001078 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e0cb      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c82:	4b49      	ldr	r3, [pc, #292]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0ee      	beq.n	8002c6c <HAL_RCC_OscConfig+0x334>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c90:	f7fe f9f2 	bl	8001078 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe f9ee 	bl	8001078 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e0b5      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cae:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1ee      	bne.n	8002c98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc0:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	4a38      	ldr	r2, [pc, #224]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80a1 	beq.w	8002e18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd6:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d05c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d141      	bne.n	8002d6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cea:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <HAL_RCC_OscConfig+0x478>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe f9c2 	bl	8001078 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe f9be 	bl	8001078 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e087      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	019b      	lsls	r3, r3, #6
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	491b      	ldr	r1, [pc, #108]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_RCC_OscConfig+0x478>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe f997 	bl	8001078 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe f993 	bl	8001078 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e05c      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x416>
 8002d6c:	e054      	b.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <HAL_RCC_OscConfig+0x478>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe f980 	bl	8001078 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe f97c 	bl	8001078 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e045      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x444>
 8002d9a:	e03d      	b.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e038      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40007000 	.word	0x40007000
 8002db0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_RCC_OscConfig+0x4ec>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d028      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d121      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d11a      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002de4:	4013      	ands	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d111      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800

08002e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0cc      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b68      	ldr	r3, [pc, #416]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d90c      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b65      	ldr	r3, [pc, #404]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0b8      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e7c:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e94:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a52      	ldr	r2, [pc, #328]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b50      	ldr	r3, [pc, #320]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	494d      	ldr	r1, [pc, #308]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d044      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d119      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e07f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee6:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e06f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e067      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f06:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 0203 	bic.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4934      	ldr	r1, [pc, #208]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f18:	f7fe f8ae 	bl	8001078 <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f20:	f7fe f8aa 	bl	8001078 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e04f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 020c 	and.w	r2, r3, #12
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d1eb      	bne.n	8002f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f48:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d20c      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e032      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4916      	ldr	r1, [pc, #88]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	490e      	ldr	r1, [pc, #56]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fae:	f000 f821 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	490a      	ldr	r1, [pc, #40]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	5ccb      	ldrb	r3, [r1, r3]
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd ff1a 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023c00 	.word	0x40023c00
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	0800425c 	.word	0x0800425c
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff8:	b094      	sub	sp, #80	; 0x50
 8002ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8003000:	2300      	movs	r3, #0
 8003002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003004:	2300      	movs	r3, #0
 8003006:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800300c:	4b79      	ldr	r3, [pc, #484]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b08      	cmp	r3, #8
 8003016:	d00d      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x40>
 8003018:	2b08      	cmp	r3, #8
 800301a:	f200 80e1 	bhi.w	80031e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x34>
 8003022:	2b04      	cmp	r3, #4
 8003024:	d003      	beq.n	800302e <HAL_RCC_GetSysClockFreq+0x3a>
 8003026:	e0db      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003028:	4b73      	ldr	r3, [pc, #460]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800302a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800302c:	e0db      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302e:	4b73      	ldr	r3, [pc, #460]	; (80031fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003030:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003032:	e0d8      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003034:	4b6f      	ldr	r3, [pc, #444]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800303c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303e:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d063      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304a:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	099b      	lsrs	r3, r3, #6
 8003050:	2200      	movs	r2, #0
 8003052:	63bb      	str	r3, [r7, #56]	; 0x38
 8003054:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
 800305e:	2300      	movs	r3, #0
 8003060:	637b      	str	r3, [r7, #52]	; 0x34
 8003062:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003066:	4622      	mov	r2, r4
 8003068:	462b      	mov	r3, r5
 800306a:	f04f 0000 	mov.w	r0, #0
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	0159      	lsls	r1, r3, #5
 8003074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003078:	0150      	lsls	r0, r2, #5
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4621      	mov	r1, r4
 8003080:	1a51      	subs	r1, r2, r1
 8003082:	6139      	str	r1, [r7, #16]
 8003084:	4629      	mov	r1, r5
 8003086:	eb63 0301 	sbc.w	r3, r3, r1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003098:	4659      	mov	r1, fp
 800309a:	018b      	lsls	r3, r1, #6
 800309c:	4651      	mov	r1, sl
 800309e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030a2:	4651      	mov	r1, sl
 80030a4:	018a      	lsls	r2, r1, #6
 80030a6:	4651      	mov	r1, sl
 80030a8:	ebb2 0801 	subs.w	r8, r2, r1
 80030ac:	4659      	mov	r1, fp
 80030ae:	eb63 0901 	sbc.w	r9, r3, r1
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030c6:	4690      	mov	r8, r2
 80030c8:	4699      	mov	r9, r3
 80030ca:	4623      	mov	r3, r4
 80030cc:	eb18 0303 	adds.w	r3, r8, r3
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	462b      	mov	r3, r5
 80030d4:	eb49 0303 	adc.w	r3, r9, r3
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030e6:	4629      	mov	r1, r5
 80030e8:	024b      	lsls	r3, r1, #9
 80030ea:	4621      	mov	r1, r4
 80030ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030f0:	4621      	mov	r1, r4
 80030f2:	024a      	lsls	r2, r1, #9
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030fa:	2200      	movs	r2, #0
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003104:	f7fd f866 	bl	80001d4 <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4613      	mov	r3, r2
 800310e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003110:	e058      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003112:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	2200      	movs	r2, #0
 800311a:	4618      	mov	r0, r3
 800311c:	4611      	mov	r1, r2
 800311e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
 8003128:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800312c:	4642      	mov	r2, r8
 800312e:	464b      	mov	r3, r9
 8003130:	f04f 0000 	mov.w	r0, #0
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	0159      	lsls	r1, r3, #5
 800313a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800313e:	0150      	lsls	r0, r2, #5
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4641      	mov	r1, r8
 8003146:	ebb2 0a01 	subs.w	sl, r2, r1
 800314a:	4649      	mov	r1, r9
 800314c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800315c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003160:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003164:	ebb2 040a 	subs.w	r4, r2, sl
 8003168:	eb63 050b 	sbc.w	r5, r3, fp
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	00eb      	lsls	r3, r5, #3
 8003176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800317a:	00e2      	lsls	r2, r4, #3
 800317c:	4614      	mov	r4, r2
 800317e:	461d      	mov	r5, r3
 8003180:	4643      	mov	r3, r8
 8003182:	18e3      	adds	r3, r4, r3
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	464b      	mov	r3, r9
 8003188:	eb45 0303 	adc.w	r3, r5, r3
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800319a:	4629      	mov	r1, r5
 800319c:	028b      	lsls	r3, r1, #10
 800319e:	4621      	mov	r1, r4
 80031a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031a4:	4621      	mov	r1, r4
 80031a6:	028a      	lsls	r2, r1, #10
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ae:	2200      	movs	r2, #0
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	61fa      	str	r2, [r7, #28]
 80031b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b8:	f7fd f80c 	bl	80001d4 <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4613      	mov	r3, r2
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	3301      	adds	r3, #1
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031de:	e002      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3750      	adds	r7, #80	; 0x50
 80031ec:	46bd      	mov	sp, r7
 80031ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	00f42400 	.word	0x00f42400
 80031fc:	007a1200 	.word	0x007a1200

08003200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <HAL_RCC_GetHCLKFreq+0x14>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000000 	.word	0x20000000

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800321c:	f7ff fff0 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	0a9b      	lsrs	r3, r3, #10
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	; (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40023800 	.word	0x40023800
 800323c:	0800426c 	.word	0x0800426c

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff ffdc 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0b5b      	lsrs	r3, r3, #13
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40023800 	.word	0x40023800
 8003264:	0800426c 	.word	0x0800426c

08003268 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	220f      	movs	r2, #15
 8003276:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003278:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800329c:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <HAL_RCC_GetClockConfig+0x60>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0207 	and.w	r2, r3, #7
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	601a      	str	r2, [r3, #0]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40023c00 	.word	0x40023c00

080032cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e041      	b.n	8003362 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fd fd46 	bl	8000d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f000 fa44 	bl	8003798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6a1a      	ldr	r2, [r3, #32]
 8003380:	f241 1311 	movw	r3, #4369	; 0x1111
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <HAL_TIM_Base_DeInit+0x40>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6a1a      	ldr	r2, [r3, #32]
 8003390:	f240 4344 	movw	r3, #1092	; 0x444
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d107      	bne.n	80033aa <HAL_TIM_Base_DeInit+0x40>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fd fd12 	bl	8000dd4 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d001      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e044      	b.n	80034b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d018      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x6c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003456:	d013      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x6c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1a      	ldr	r2, [pc, #104]	; (80034c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00e      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x6c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_TIM_Base_Start_IT+0xb8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d009      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x6c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x6c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d111      	bne.n	80034a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b06      	cmp	r3, #6
 8003490:	d010      	beq.n	80034b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0201 	orr.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a2:	e007      	b.n	80034b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40014000 	.word	0x40014000

080034d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a1a      	ldr	r2, [r3, #32]
 80034f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10f      	bne.n	8003520 <HAL_TIM_Base_Stop_IT+0x48>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6a1a      	ldr	r2, [r3, #32]
 8003506:	f240 4344 	movw	r3, #1092	; 0x444
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <HAL_TIM_Base_Stop_IT+0x48>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b02      	cmp	r3, #2
 800354a:	d122      	bne.n	8003592 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d11b      	bne.n	8003592 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f06f 0202 	mvn.w	r2, #2
 8003562:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f8ee 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 800357e:	e005      	b.n	800358c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f8e0 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8f1 	bl	800376e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d122      	bne.n	80035e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d11b      	bne.n	80035e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f06f 0204 	mvn.w	r2, #4
 80035b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f8c4 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 80035d2:	e005      	b.n	80035e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f8b6 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8c7 	bl	800376e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d122      	bne.n	800363a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d11b      	bne.n	800363a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f06f 0208 	mvn.w	r2, #8
 800360a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2204      	movs	r2, #4
 8003610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f89a 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 8003626:	e005      	b.n	8003634 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f88c 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f89d 	bl	800376e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b10      	cmp	r3, #16
 8003646:	d122      	bne.n	800368e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b10      	cmp	r3, #16
 8003654:	d11b      	bne.n	800368e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f06f 0210 	mvn.w	r2, #16
 800365e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2208      	movs	r2, #8
 8003664:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f870 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 800367a:	e005      	b.n	8003688 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f862 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f873 	bl	800376e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d10e      	bne.n	80036ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d107      	bne.n	80036ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f06f 0201 	mvn.w	r2, #1
 80036b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fd fa5d 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d10e      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b80      	cmp	r3, #128	; 0x80
 80036d4:	d107      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f8e3 	bl	80038ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d10e      	bne.n	8003712 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d107      	bne.n	8003712 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800370a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f838 	bl	8003782 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d10e      	bne.n	800373e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b20      	cmp	r3, #32
 800372c:	d107      	bne.n	800373e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f06f 0220 	mvn.w	r2, #32
 8003736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f8ad 	bl	8003898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a34      	ldr	r2, [pc, #208]	; (800387c <TIM_Base_SetConfig+0xe4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00f      	beq.n	80037d0 <TIM_Base_SetConfig+0x38>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b6:	d00b      	beq.n	80037d0 <TIM_Base_SetConfig+0x38>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a31      	ldr	r2, [pc, #196]	; (8003880 <TIM_Base_SetConfig+0xe8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d007      	beq.n	80037d0 <TIM_Base_SetConfig+0x38>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a30      	ldr	r2, [pc, #192]	; (8003884 <TIM_Base_SetConfig+0xec>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_Base_SetConfig+0x38>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a2f      	ldr	r2, [pc, #188]	; (8003888 <TIM_Base_SetConfig+0xf0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d108      	bne.n	80037e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a25      	ldr	r2, [pc, #148]	; (800387c <TIM_Base_SetConfig+0xe4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01b      	beq.n	8003822 <TIM_Base_SetConfig+0x8a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f0:	d017      	beq.n	8003822 <TIM_Base_SetConfig+0x8a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a22      	ldr	r2, [pc, #136]	; (8003880 <TIM_Base_SetConfig+0xe8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <TIM_Base_SetConfig+0x8a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a21      	ldr	r2, [pc, #132]	; (8003884 <TIM_Base_SetConfig+0xec>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00f      	beq.n	8003822 <TIM_Base_SetConfig+0x8a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a20      	ldr	r2, [pc, #128]	; (8003888 <TIM_Base_SetConfig+0xf0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00b      	beq.n	8003822 <TIM_Base_SetConfig+0x8a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1f      	ldr	r2, [pc, #124]	; (800388c <TIM_Base_SetConfig+0xf4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d007      	beq.n	8003822 <TIM_Base_SetConfig+0x8a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <TIM_Base_SetConfig+0xf8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d003      	beq.n	8003822 <TIM_Base_SetConfig+0x8a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <TIM_Base_SetConfig+0xfc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d108      	bne.n	8003834 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a08      	ldr	r2, [pc, #32]	; (800387c <TIM_Base_SetConfig+0xe4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d103      	bne.n	8003868 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	615a      	str	r2, [r3, #20]
}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40010000 	.word	0x40010000
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40000c00 	.word	0x40000c00
 800388c:	40014000 	.word	0x40014000
 8003890:	40014400 	.word	0x40014400
 8003894:	40014800 	.word	0x40014800

08003898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	68d2      	ldr	r2, [r2, #12]
 80038d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f6:	d10e      	bne.n	8003916 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f06f 0201 	mvn.w	r2, #1
 800390e:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f804 	bl	800391e <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <MONITOR_I_Start>:

void MONITOR_I_Start(const uint32_t TASK_ID,
					  const uint32_t TASK_WCET_us,
					  const uint32_t TASK_BCET_us,
					  const uint32_t ALLOWED_TIMING_VARIATION_us)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
	Task_ID_G = TASK_ID;
 8003942:	4a0f      	ldr	r2, [pc, #60]	; (8003980 <MONITOR_I_Start+0x4c>)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6013      	str	r3, [r2, #0]
	Task_BCET_G = TASK_BCET_us;
 8003948:	4a0e      	ldr	r2, [pc, #56]	; (8003984 <MONITOR_I_Start+0x50>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6013      	str	r3, [r2, #0]
	Task_t_variation_G = ALLOWED_TIMING_VARIATION_us;
 800394e:	4a0e      	ldr	r2, [pc, #56]	; (8003988 <MONITOR_I_Start+0x54>)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	6013      	str	r3, [r2, #0]

	TimerInitFlag = 1;
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <MONITOR_I_Start+0x58>)
 8003956:	2201      	movs	r2, #1
 8003958:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_DeInit(&htim11);
 800395a:	480d      	ldr	r0, [pc, #52]	; (8003990 <MONITOR_I_Start+0x5c>)
 800395c:	f7ff fd05 	bl	800336a <HAL_TIM_Base_DeInit>
	htim11.Init.Period = TASK_WCET_us + ALLOWED_TIMING_VARIATION_us;
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	4413      	add	r3, r2
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <MONITOR_I_Start+0x5c>)
 8003968:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Init(&htim11);
 800396a:	4809      	ldr	r0, [pc, #36]	; (8003990 <MONITOR_I_Start+0x5c>)
 800396c:	f7ff fcae 	bl	80032cc <HAL_TIM_Base_Init>

	HAL_TIM_Base_Start_IT(&htim11);
 8003970:	4807      	ldr	r0, [pc, #28]	; (8003990 <MONITOR_I_Start+0x5c>)
 8003972:	f7ff fd4f 	bl	8003414 <HAL_TIM_Base_Start_IT>
}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	200021e4 	.word	0x200021e4
 8003984:	200021e8 	.word	0x200021e8
 8003988:	200021ec 	.word	0x200021ec
 800398c:	200021f0 	.word	0x200021f0
 8003990:	2000013c 	.word	0x2000013c

08003994 <MONITOR_I_Stop>:

uint32_t MONITOR_I_Stop(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
	uint32_t Execution_time_us;
	sTask *actual;

	// Check BCET (read timer value)
	// This value is in microseconds
	Execution_time_us = __HAL_TIM_GET_COUNTER(&htim11);
 800399a:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <MONITOR_I_Stop+0x54>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	607b      	str	r3, [r7, #4]

	// Stop the timer
	HAL_TIM_Base_Stop_IT(&htim11);
 80039a2:	4811      	ldr	r0, [pc, #68]	; (80039e8 <MONITOR_I_Stop+0x54>)
 80039a4:	f7ff fd98 	bl	80034d8 <HAL_TIM_Base_Stop_IT>

	if ((Execution_time_us + Task_t_variation_G) < Task_BCET_G)
 80039a8:	4b10      	ldr	r3, [pc, #64]	; (80039ec <MONITOR_I_Stop+0x58>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	441a      	add	r2, r3
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <MONITOR_I_Stop+0x5c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d211      	bcs.n	80039dc <MONITOR_I_Stop+0x48>
	{
		// Task has completed too quickly
		// => Change mode
		SYSTEM_Change_Mode_Fault(FAULT_TASK_TIMING);
 80039b8:	2002      	movs	r0, #2
 80039ba:	f000 fbfb 	bl	80041b4 <SYSTEM_Change_Mode_Fault>

		// Not storing task ID here
		// Not distinguishing BCET / WCET faults
		// => either / both this can be done here, if required
		actual = SCH_Get_Current_Task_Pointer();
 80039be:	f000 fb3f 	bl	8004040 <SCH_Get_Current_Task_Pointer>
 80039c2:	6038      	str	r0, [r7, #0]
		actual->Debug.BCET = Execution_time_us;
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	619a      	str	r2, [r3, #24]
		actual->Debug.LET = Execution_time_us;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	61da      	str	r2, [r3, #28]
		actual->Debug.State |= SCH_DEBUG_TASK_UNDERRUN;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	f043 0202 	orr.w	r2, r3, #2
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return Execution_time_us;
 80039dc:	687b      	ldr	r3, [r7, #4]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	2000013c 	.word	0x2000013c
 80039ec:	200021ec 	.word	0x200021ec
 80039f0:	200021e8 	.word	0x200021e8

080039f4 <MONITOR_I_Disable>:

void MONITOR_I_Disable(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim11);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <MONITOR_I_Disable+0x10>)
 80039fa:	f7ff fd6d 	bl	80034d8 <HAL_TIM_Base_Stop_IT>
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	2000013c 	.word	0x2000013c

08003a08 <MONITOR_IRQHandler>:

void MONITOR_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
	if(TimerInitFlag)
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <MONITOR_IRQHandler+0x48>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <MONITOR_IRQHandler+0x16>
	{
		TimerInitFlag = 0;
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <MONITOR_IRQHandler+0x48>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
		return;
 8003a1c:	e015      	b.n	8003a4a <MONITOR_IRQHandler+0x42>
	}
	sTask *actual;
	// Task has completed too slowly
	// => Change mode
	SYSTEM_Change_Mode_Fault(FAULT_TASK_TIMING);
 8003a1e:	2002      	movs	r0, #2
 8003a20:	f000 fbc8 	bl	80041b4 <SYSTEM_Change_Mode_Fault>

	// Not storing task ID here
	// Not distinguishing BCET / WCET faults
	// => either / both this can be done here, if required
	actual = SCH_Get_Current_Task_Pointer();
 8003a24:	f000 fb0c 	bl	8004040 <SCH_Get_Current_Task_Pointer>
 8003a28:	6078      	str	r0, [r7, #4]
	actual->Debug.LET = actual->WCET;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	61da      	str	r2, [r3, #28]
	actual->Debug.WCET = actual->WCET;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	615a      	str	r2, [r3, #20]
	actual->Debug.State |= SCH_DEBUG_TASK_OVERRUN;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	f043 0204 	orr.w	r2, r3, #4
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200021f0 	.word	0x200021f0

08003a54 <__NVIC_SetPriority>:
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	6039      	str	r1, [r7, #0]
 8003a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	db0a      	blt.n	8003a7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	490c      	ldr	r1, [pc, #48]	; (8003aa0 <__NVIC_SetPriority+0x4c>)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	0112      	lsls	r2, r2, #4
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	440b      	add	r3, r1
 8003a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a7c:	e00a      	b.n	8003a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	4908      	ldr	r1, [pc, #32]	; (8003aa4 <__NVIC_SetPriority+0x50>)
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	3b04      	subs	r3, #4
 8003a8c:	0112      	lsls	r2, r2, #4
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	440b      	add	r3, r1
 8003a92:	761a      	strb	r2, [r3, #24]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000e100 	.word	0xe000e100
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ab8:	d301      	bcc.n	8003abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aba:	2301      	movs	r3, #1
 8003abc:	e00f      	b.n	8003ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <SysTick_Config+0x40>)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ac6:	210f      	movs	r1, #15
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8003acc:	f7ff ffc2 	bl	8003a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <SysTick_Config+0x40>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ad6:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <SysTick_Config+0x40>)
 8003ad8:	2207      	movs	r2, #7
 8003ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	e000e010 	.word	0xe000e010

08003aec <DWT_Init>:
);
void SCH_SysTick_Handler(void);
sTask* SCH_Get_Current_Task_Pointer(void);

static inline void DWT_Init(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
	DWT->CTRL |=DWT_CTRL_CYCCNTENA_Msk;
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <DWT_Init+0x20>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <DWT_Init+0x20>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT=0;
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <DWT_Init+0x20>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	605a      	str	r2, [r3, #4]
}
 8003b02:	bf00      	nop
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e0001000 	.word	0xe0001000

08003b10 <DWT_GetTime>:

static inline uint32_t DWT_GetTime(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
	return (10 * DWT->CYCCNT);		// (10E9 / SystemCoreClock) => nS
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <DWT_GetTime+0x1c>)
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	e0001000 	.word	0xe0001000

08003b30 <DWT_Clear>:

static inline void DWT_Clear(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
	DWT->CYCCNT=0;
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <DWT_Clear+0x14>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	605a      	str	r2, [r3, #4]
}
 8003b3a:	bf00      	nop
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	e0001000 	.word	0xe0001000

08003b48 <SCH_Dispatch_Tasks>:

static void SCH_Go_To_Sleep(void);

void SysTick_Handler(void);

void SCH_Dispatch_Tasks(void) {
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
	uint32_t Index;
	uint32_t Update_required = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b52:	b672      	cpsid	i
}
 8003b54:	bf00      	nop
	uint32_t time_SCH;

	__disable_irq(); // Protect shared resource (Tick_count_G)
	if (Tick_count_G > 0)
 8003b56:	4ba1      	ldr	r3, [pc, #644]	; (8003ddc <SCH_Dispatch_Tasks+0x294>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <SCH_Dispatch_Tasks+0x24>
		{
		Tick_count_G--;
 8003b5e:	4b9f      	ldr	r3, [pc, #636]	; (8003ddc <SCH_Dispatch_Tasks+0x294>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	4a9d      	ldr	r2, [pc, #628]	; (8003ddc <SCH_Dispatch_Tasks+0x294>)
 8003b66:	6013      	str	r3, [r2, #0]
		Update_required = 1;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b6c:	b662      	cpsie	i
}
 8003b6e:	bf00      	nop
	}
	__enable_irq();

	while (Update_required)
 8003b70:	e120      	b.n	8003db4 <SCH_Dispatch_Tasks+0x26c>
		{
		// Go through the task array
		for (Index = 0; Index < SCH_MAX_TASKS; Index++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	e107      	b.n	8003d88 <SCH_Dispatch_Tasks+0x240>
			{
			// Check if there is a task at this location
			if (SCH_tasks_G[Index].pTask)
 8003b78:	4999      	ldr	r1, [pc, #612]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	440b      	add	r3, r1
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80fa 	beq.w	8003d82 <SCH_Dispatch_Tasks+0x23a>
				{
				if (--SCH_tasks_G[Index].Delay == 0)
 8003b8e:	4994      	ldr	r1, [pc, #592]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	440b      	add	r3, r1
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	1e59      	subs	r1, r3, #1
 8003ba2:	488f      	ldr	r0, [pc, #572]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4403      	add	r3, r0
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	6019      	str	r1, [r3, #0]
 8003bb4:	498a      	ldr	r1, [pc, #552]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f040 80db 	bne.w	8003d82 <SCH_Dispatch_Tasks+0x23a>
					{
						// Start of Task Dispatch Time Measurement
						DWT_Clear();
 8003bcc:	f7ff ffb0 	bl	8003b30 <DWT_Clear>

						ITask = Index;
 8003bd0:	4a84      	ldr	r2, [pc, #528]	; (8003de4 <SCH_Dispatch_Tasks+0x29c>)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6013      	str	r3, [r2, #0]
						SCH_tasks_G[Index].Debug.State = 0;
 8003bd6:	4982      	ldr	r1, [pc, #520]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	440b      	add	r3, r1
 8003be4:	3324      	adds	r3, #36	; 0x24
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]

						MONITOR_I_Start((uint32_t)SCH_tasks_G[Index].pTask,
 8003bea:	497d      	ldr	r1, [pc, #500]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	440b      	add	r3, r1
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461c      	mov	r4, r3
 8003bfc:	4978      	ldr	r1, [pc, #480]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	440b      	add	r3, r1
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	4874      	ldr	r0, [pc, #464]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4403      	add	r3, r0
 8003c1c:	3310      	adds	r3, #16
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2314      	movs	r3, #20
 8003c22:	4620      	mov	r0, r4
 8003c24:	f7ff fe86 	bl	8003934 <MONITOR_I_Start>
								SCH_tasks_G[Index].WCET,
								SCH_tasks_G[Index].BCET,
								ALLOWED_TIMING_VARIATION_us);

						(*SCH_tasks_G[Index].pTask)(); // Run the task
 8003c28:	496d      	ldr	r1, [pc, #436]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	440b      	add	r3, r1
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4798      	blx	r3

						// All tasks are periodic in this design
						// - schedule task to run again

						SCH_tasks_G[Index].Debug.LET = MONITOR_I_Stop();
 8003c3a:	f7ff feab 	bl	8003994 <MONITOR_I_Stop>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4618      	mov	r0, r3
 8003c42:	4967      	ldr	r1, [pc, #412]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	440b      	add	r3, r1
 8003c50:	331c      	adds	r3, #28
 8003c52:	6018      	str	r0, [r3, #0]
						SCH_tasks_G[Index].Debug.State |= SCH_DEBUG_TASK_RUN_OK;
 8003c54:	4962      	ldr	r1, [pc, #392]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	440b      	add	r3, r1
 8003c62:	3324      	adds	r3, #36	; 0x24
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f043 0101 	orr.w	r1, r3, #1
 8003c6a:	485d      	ldr	r0, [pc, #372]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4403      	add	r3, r0
 8003c78:	3324      	adds	r3, #36	; 0x24
 8003c7a:	6019      	str	r1, [r3, #0]
						SCH_tasks_G[Index].Debug.RunTimes++;
 8003c7c:	4958      	ldr	r1, [pc, #352]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	440b      	add	r3, r1
 8003c8a:	3320      	adds	r3, #32
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	1c59      	adds	r1, r3, #1
 8003c90:	4853      	ldr	r0, [pc, #332]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4403      	add	r3, r0
 8003c9e:	3320      	adds	r3, #32
 8003ca0:	6019      	str	r1, [r3, #0]

						if(SCH_tasks_G[Index].Debug.LET < SCH_tasks_G[Index].Debug.BCET)
 8003ca2:	494f      	ldr	r1, [pc, #316]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	440b      	add	r3, r1
 8003cb0:	331c      	adds	r3, #28
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	484a      	ldr	r0, [pc, #296]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4299      	cmp	r1, r3
 8003cc8:	da11      	bge.n	8003cee <SCH_Dispatch_Tasks+0x1a6>
							SCH_tasks_G[Index].Debug.BCET = SCH_tasks_G[Index].Debug.LET;
 8003cca:	4945      	ldr	r1, [pc, #276]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	331c      	adds	r3, #28
 8003cda:	6819      	ldr	r1, [r3, #0]
 8003cdc:	4840      	ldr	r0, [pc, #256]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4403      	add	r3, r0
 8003cea:	3318      	adds	r3, #24
 8003cec:	6019      	str	r1, [r3, #0]

						if(SCH_tasks_G[Index].Debug.LET > SCH_tasks_G[Index].Debug.WCET)
 8003cee:	493c      	ldr	r1, [pc, #240]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	440b      	add	r3, r1
 8003cfc:	331c      	adds	r3, #28
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	4837      	ldr	r0, [pc, #220]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4403      	add	r3, r0
 8003d0e:	3314      	adds	r3, #20
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4299      	cmp	r1, r3
 8003d14:	dd11      	ble.n	8003d3a <SCH_Dispatch_Tasks+0x1f2>
							SCH_tasks_G[Index].Debug.WCET = SCH_tasks_G[Index].Debug.LET;
 8003d16:	4932      	ldr	r1, [pc, #200]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	440b      	add	r3, r1
 8003d24:	331c      	adds	r3, #28
 8003d26:	6819      	ldr	r1, [r3, #0]
 8003d28:	482d      	ldr	r0, [pc, #180]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4403      	add	r3, r0
 8003d36:	3314      	adds	r3, #20
 8003d38:	6019      	str	r1, [r3, #0]

						SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8003d3a:	4929      	ldr	r1, [pc, #164]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	440b      	add	r3, r1
 8003d48:	3308      	adds	r3, #8
 8003d4a:	6819      	ldr	r1, [r3, #0]
 8003d4c:	4824      	ldr	r0, [pc, #144]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4403      	add	r3, r0
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	6019      	str	r1, [r3, #0]

						// Stop of Task Dispatch Time Measurement
						time_SCH = DWT_GetTime()/1000 - SCH_tasks_G[Index].Debug.LET;
 8003d5e:	f7ff fed7 	bl	8003b10 <DWT_GetTime>
 8003d62:	4603      	mov	r3, r0
 8003d64:	4a20      	ldr	r2, [pc, #128]	; (8003de8 <SCH_Dispatch_Tasks+0x2a0>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	0999      	lsrs	r1, r3, #6
 8003d6c:	481c      	ldr	r0, [pc, #112]	; (8003de0 <SCH_Dispatch_Tasks+0x298>)
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4403      	add	r3, r0
 8003d7a:	331c      	adds	r3, #28
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	1acb      	subs	r3, r1, r3
 8003d80:	607b      	str	r3, [r7, #4]
		for (Index = 0; Index < SCH_MAX_TASKS; Index++)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3301      	adds	r3, #1
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b13      	cmp	r3, #19
 8003d8c:	f67f aef4 	bls.w	8003b78 <SCH_Dispatch_Tasks+0x30>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d90:	b672      	cpsid	i
}
 8003d92:	bf00      	nop
					}
				}
			}
		__disable_irq();
		if (Tick_count_G > 0)
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <SCH_Dispatch_Tasks+0x294>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <SCH_Dispatch_Tasks+0x264>
			{
			Tick_count_G--;
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <SCH_Dispatch_Tasks+0x294>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <SCH_Dispatch_Tasks+0x294>)
 8003da4:	6013      	str	r3, [r2, #0]
			Update_required = 1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	e001      	b.n	8003db0 <SCH_Dispatch_Tasks+0x268>
			}
		else
			{
			Update_required = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8003db0:	b662      	cpsie	i
}
 8003db2:	bf00      	nop
	while (Update_required)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f47f aedb 	bne.w	8003b72 <SCH_Dispatch_Tasks+0x2a>
			}
		__enable_irq();
		}

		if(SYSTEM_Get_Mode() == FAIL_SILENT)
 8003dbc:	f000 fa0a 	bl	80041d4 <SYSTEM_Get_Mode>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <SCH_Dispatch_Tasks+0x286>
		{
			MONITOR_I_Disable();
 8003dc6:	f7ff fe15 	bl	80039f4 <MONITOR_I_Disable>
			SYSTEM_Perform_Safe_Shutdown();
 8003dca:	f000 f9bb 	bl	8004144 <SYSTEM_Perform_Safe_Shutdown>
		}
	SCH_Go_To_Sleep();
 8003dce:	f000 f87f 	bl	8003ed0 <SCH_Go_To_Sleep>
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd90      	pop	{r4, r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20002518 	.word	0x20002518
 8003de0:	200021f8 	.word	0x200021f8
 8003de4:	2000251c 	.word	0x2000251c
 8003de8:	10624dd3 	.word	0x10624dd3

08003dec <SCH_Init>:

void SCH_Init(const uint32_t TICKms)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
    int i;
    // Reset the global fault variable
    Fault_code_G = 0;
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <SCH_Init+0xa0>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

    for (i = 0; i < SCH_MAX_TASKS; i++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	e019      	b.n	8003e34 <SCH_Init+0x48>
    {
    	SCH_tasks_G[i].pTask = 0;
 8003e00:	4923      	ldr	r1, [pc, #140]	; (8003e90 <SCH_Init+0xa4>)
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	440b      	add	r3, r1
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
    	memset(&(SCH_tasks_G[i].Debug),0,sizeof(debugInfo));
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	3310      	adds	r3, #16
 8003e1e:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <SCH_Init+0xa4>)
 8003e20:	4413      	add	r3, r2
 8003e22:	3304      	adds	r3, #4
 8003e24:	2214      	movs	r2, #20
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fa03 	bl	8004234 <memset>
    for (i = 0; i < SCH_MAX_TASKS; i++)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3301      	adds	r3, #1
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b13      	cmp	r3, #19
 8003e38:	dde2      	ble.n	8003e00 <SCH_Init+0x14>

    // Must check board oscillator frequency, etc
    //
    // *If* these values have been set correctly for your hardware
    // SystemCoreClock gives the system operating frequency (in Hz)
    if (SystemCoreClock != Required_SystemCoreClock)
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <SCH_Init+0xa8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <SCH_Init+0xac>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d001      	beq.n	8003e48 <SCH_Init+0x5c>
    {
    	// Fatal fault
    	SYSTEM_Perform_Safe_Shutdown();
 8003e44:	f000 f97e 	bl	8004144 <SYSTEM_Perform_Safe_Shutdown>
    }

    // Now to set up SysTick timer for "ticks" at interval TICKms
    if (SysTick_Config(TICKms * SystemCoreClock / SysTick_RateHz))
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <SCH_Init+0xa8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <SCH_Init+0xb0>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	099b      	lsrs	r3, r3, #6
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fe24 	bl	8003aa8 <SysTick_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <SCH_Init+0x7e>
    {
    	// Fatal fault
    	SYSTEM_Perform_Safe_Shutdown();
 8003e66:	f000 f96d 	bl	8004144 <SYSTEM_Perform_Safe_Shutdown>
    }

    NVIC_SetPriority(SysTick_IRQn, 0x0);
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e70:	f7ff fdf0 	bl	8003a54 <__NVIC_SetPriority>

    // Timer is started by SysTick_Config():
    // we need to disable SysTick timer and SysTick interrupt until
    // all tasks have been added to the schedule.
    SysTick->CTRL &= 0xFFFFFFFC;
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <SCH_Init+0xb4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <SCH_Init+0xb4>)
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	6013      	str	r3, [r2, #0]

    // Inicialize Data Watchpoint and Trace System Clock Counter
    DWT_Init();
 8003e80:	f7ff fe34 	bl	8003aec <DWT_Init>
}
 8003e84:	bf00      	nop
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	200021f4 	.word	0x200021f4
 8003e90:	200021f8 	.word	0x200021f8
 8003e94:	20000000 	.word	0x20000000
 8003e98:	0501bd00 	.word	0x0501bd00
 8003e9c:	10624dd3 	.word	0x10624dd3
 8003ea0:	e000e010 	.word	0xe000e010

08003ea4 <SCH_Start>:

void SCH_Start(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
    // Enable SysTick timer
    SysTick->CTRL |= 0x01;
 8003ea8:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <SCH_Start+0x28>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <SCH_Start+0x28>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6013      	str	r3, [r2, #0]

    // Enable SysTick interrupt
    SysTick->CTRL |= 0x02;
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <SCH_Start+0x28>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <SCH_Start+0x28>)
 8003eba:	f043 0302 	orr.w	r3, r3, #2
 8003ebe:	6013      	str	r3, [r2, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	e000e010 	.word	0xe000e010

08003ed0 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep()
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
	// Enter sleep mode = "Wait For Interrupt"
	__WFI();
 8003ed4:	bf30      	wfi
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <SCH_Add_Task>:
					  const uint32_t PERIOD,
					  const uint32_t WCET,
					  const uint32_t BCET
					  )

	{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
	uint32_t Return_value = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
	uint32_t Index = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]

	// First find a gap in the array (if there is one)
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8003ef6:	e002      	b.n	8003efe <SCH_Add_Task+0x1e>
		{
		Index++;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	3301      	adds	r3, #1
 8003efc:	613b      	str	r3, [r7, #16]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8003efe:	4947      	ldr	r1, [pc, #284]	; (800401c <SCH_Add_Task+0x13c>)
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	440b      	add	r3, r1
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <SCH_Add_Task+0x38>
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b13      	cmp	r3, #19
 8003f16:	d9ef      	bls.n	8003ef8 <SCH_Add_Task+0x18>
	}

	// Have we reached the end of the list?
	if (Index == SCH_MAX_TASKS)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b14      	cmp	r3, #20
 8003f1c:	d104      	bne.n	8003f28 <SCH_Add_Task+0x48>
		{
		// Task list is full
		//
		// Set the global fault variable
		Fault_code_G = FAULT_SCH_TOO_MANY_TASKS;
 8003f1e:	4b40      	ldr	r3, [pc, #256]	; (8004020 <SCH_Add_Task+0x140>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

		// Also return a fault code
		Return_value = SCH_MAX_TASKS;
 8003f24:	2314      	movs	r3, #20
 8003f26:	617b      	str	r3, [r7, #20]
		}

	// Check for "one shot" tasks
	// - not permitted in this design
	if (PERIOD == 0)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d104      	bne.n	8003f38 <SCH_Add_Task+0x58>
		{
		// Set the global fault variable
		Fault_code_G = FAULT_SCH_ONE_SHOT_TASK;
 8003f2e:	4b3c      	ldr	r3, [pc, #240]	; (8004020 <SCH_Add_Task+0x140>)
 8003f30:	2202      	movs	r2, #2
 8003f32:	601a      	str	r2, [r3, #0]

		// Also return a fault code
		Return_value = SCH_MAX_TASKS;
 8003f34:	2314      	movs	r3, #20
 8003f36:	617b      	str	r3, [r7, #20]
		}

	if (Return_value != SCH_MAX_TASKS)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b14      	cmp	r3, #20
 8003f3c:	d066      	beq.n	800400c <SCH_Add_Task+0x12c>
		{

		// If we're here, there is a space in the task array
		// and the task to be added is periodic
		SCH_tasks_G[Index].pTask = pTask;
 8003f3e:	4937      	ldr	r1, [pc, #220]	; (800401c <SCH_Add_Task+0x13c>)
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	440b      	add	r3, r1
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	601a      	str	r2, [r3, #0]

		SCH_tasks_G[Index].Delay = DELAY + 1;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	4831      	ldr	r0, [pc, #196]	; (800401c <SCH_Add_Task+0x13c>)
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4403      	add	r3, r0
 8003f62:	3304      	adds	r3, #4
 8003f64:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Index].Period = PERIOD;
 8003f66:	492d      	ldr	r1, [pc, #180]	; (800401c <SCH_Add_Task+0x13c>)
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	440b      	add	r3, r1
 8003f74:	3308      	adds	r3, #8
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].WCET = WCET;
 8003f7a:	4928      	ldr	r1, [pc, #160]	; (800401c <SCH_Add_Task+0x13c>)
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	440b      	add	r3, r1
 8003f88:	330c      	adds	r3, #12
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].BCET = BCET;
 8003f8e:	4923      	ldr	r1, [pc, #140]	; (800401c <SCH_Add_Task+0x13c>)
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3310      	adds	r3, #16
 8003f9e:	6a3a      	ldr	r2, [r7, #32]
 8003fa0:	601a      	str	r2, [r3, #0]

		SCH_tasks_G[Index].Debug.LET = 0;
 8003fa2:	491e      	ldr	r1, [pc, #120]	; (800401c <SCH_Add_Task+0x13c>)
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	440b      	add	r3, r1
 8003fb0:	331c      	adds	r3, #28
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Debug.WCET = 0;
 8003fb6:	4919      	ldr	r1, [pc, #100]	; (800401c <SCH_Add_Task+0x13c>)
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	440b      	add	r3, r1
 8003fc4:	3314      	adds	r3, #20
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Debug.BCET = 0xFFFFFFFF;
 8003fca:	4914      	ldr	r1, [pc, #80]	; (800401c <SCH_Add_Task+0x13c>)
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	440b      	add	r3, r1
 8003fd8:	3318      	adds	r3, #24
 8003fda:	f04f 32ff 	mov.w	r2, #4294967295
 8003fde:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Debug.State = 0;
 8003fe0:	490e      	ldr	r1, [pc, #56]	; (800401c <SCH_Add_Task+0x13c>)
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	440b      	add	r3, r1
 8003fee:	3324      	adds	r3, #36	; 0x24
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Debug.RunTimes = 0;
 8003ff4:	4909      	ldr	r1, [pc, #36]	; (800401c <SCH_Add_Task+0x13c>)
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	440b      	add	r3, r1
 8004002:	3320      	adds	r3, #32
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

		Return_value = Index;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	617b      	str	r3, [r7, #20]
		}

	return Return_value;
 800400c:	697b      	ldr	r3, [r7, #20]
}
 800400e:	4618      	mov	r0, r3
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	200021f8 	.word	0x200021f8
 8004020:	200021f4 	.word	0x200021f4

08004024 <SCH_SysTick_Handler>:

void SCH_SysTick_Handler(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
    // Increment tick count (only)
    Tick_count_G++;
 8004028:	4b04      	ldr	r3, [pc, #16]	; (800403c <SCH_SysTick_Handler+0x18>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	4a03      	ldr	r2, [pc, #12]	; (800403c <SCH_SysTick_Handler+0x18>)
 8004030:	6013      	str	r3, [r2, #0]
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	20002518 	.word	0x20002518

08004040 <SCH_Get_Current_Task_Pointer>:

sTask* SCH_Get_Current_Task_Pointer(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
	return &SCH_tasks_G[ITask];
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <SCH_Get_Current_Task_Pointer+0x20>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4a04      	ldr	r2, [pc, #16]	; (8004064 <SCH_Get_Current_Task_Pointer+0x24>)
 8004052:	4413      	add	r3, r2
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	2000251c 	.word	0x2000251c
 8004064:	200021f8 	.word	0x200021f8

08004068 <SYSTEM_Init>:
eSystem_mode System_mode_G;

void SYSTEM_Identify_Required_Mode(void);
void SYSTEM_Configure_Required_Mode(void);

void SYSTEM_Init(void) {
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
	SYSTEM_Identify_Required_Mode();
 800406c:	f000 f804 	bl	8004078 <SYSTEM_Identify_Required_Mode>
	SYSTEM_Configure_Required_Mode();
 8004070:	f000 f820 	bl	80040b4 <SYSTEM_Configure_Required_Mode>
}
 8004074:	bf00      	nop
 8004076:	bd80      	pop	{r7, pc}

08004078 <SYSTEM_Identify_Required_Mode>:

void SYSTEM_Identify_Required_Mode(void) {
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <SYSTEM_Identify_Required_Mode+0x34>)
 800407e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004080:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <SYSTEM_Identify_Required_Mode+0x24>
	{
		__HAL_RCC_CLEAR_RESET_FLAGS();
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <SYSTEM_Identify_Required_Mode+0x34>)
 800408a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408c:	4a07      	ldr	r2, [pc, #28]	; (80040ac <SYSTEM_Identify_Required_Mode+0x34>)
 800408e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004092:	6753      	str	r3, [r2, #116]	; 0x74
		System_mode_G = FAIL_SILENT;
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <SYSTEM_Identify_Required_Mode+0x38>)
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
		return;
 800409a:	e002      	b.n	80040a2 <SYSTEM_Identify_Required_Mode+0x2a>
	}
    System_mode_G = NORMAL;
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <SYSTEM_Identify_Required_Mode+0x38>)
 800409e:	2201      	movs	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
}
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	20002520 	.word	0x20002520

080040b4 <SYSTEM_Configure_Required_Mode>:

void SYSTEM_Configure_Required_Mode(void) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af02      	add	r7, sp, #8
	switch (System_mode_G)
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <SYSTEM_Configure_Required_Mode+0x7c>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d007      	beq.n	80040d2 <SYSTEM_Configure_Required_Mode+0x1e>
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d002      	beq.n	80040cc <SYSTEM_Configure_Required_Mode+0x18>
        default: // Default to "FAIL_SILENT"
        case FAIL_SILENT:
        {
            // Reset caused by WDT
            // Trigger "fail silent" behavior
            SYSTEM_Perform_Safe_Shutdown();
 80040c6:	f000 f83d 	bl	8004144 <SYSTEM_Perform_Safe_Shutdown>
            break;
 80040ca:	e02e      	b.n	800412a <SYSTEM_Configure_Required_Mode+0x76>
        }
        case FAULT_TASK_TIMING:
        {
            // Reset caused by WDT
            // Trigger "fail silent" behavior
            SYSTEM_Perform_Safe_Shutdown();
 80040cc:	f000 f83a 	bl	8004144 <SYSTEM_Perform_Safe_Shutdown>
            break;
 80040d0:	e02b      	b.n	800412a <SYSTEM_Configure_Required_Mode+0x76>
        }
        case NORMAL:
        {
        	// Set up scheduler for 1 ms ticks (tick interval in *ms*)
            SCH_Init(1);
 80040d2:	2001      	movs	r0, #1
 80040d4:	f7ff fe8a 	bl	8003dec <SCH_Init>

        	// Prepare for Heartbeat task
        	HEARTBEAT_Init();
 80040d8:	f7fc fad2 	bl	8000680 <HEARTBEAT_Init>
        	WATCHDOG_Init();
 80040dc:	f7fc fb50 	bl	8000780 <WATCHDOG_Init>
        	ANTIRREBOTE_Init();
 80040e0:	f7fc fae6 	bl	80006b0 <ANTIRREBOTE_Init>
        	READ_ADC_Init();
 80040e4:	f7fc fa4a 	bl	800057c <READ_ADC_Init>
            // 3. Task period (in ticks): Must be > 0
            // 4. Task WCET (in microseconds)
            // 5. Task BCET (in microseconds)

            // Add watchdog task first
            SCH_Add_Task(WATCHDOG_Update, 0, 1, 1, 1);
 80040e8:	2301      	movs	r3, #1
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2301      	movs	r3, #1
 80040ee:	2201      	movs	r2, #1
 80040f0:	2100      	movs	r1, #0
 80040f2:	4810      	ldr	r0, [pc, #64]	; (8004134 <SYSTEM_Configure_Required_Mode+0x80>)
 80040f4:	f7ff fef4 	bl	8003ee0 <SCH_Add_Task>

            // Add Heartbeat task
            SCH_Add_Task(HEARTBEAT_Update, 0, 10, 1, 1);
 80040f8:	2301      	movs	r3, #1
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	2301      	movs	r3, #1
 80040fe:	220a      	movs	r2, #10
 8004100:	2100      	movs	r1, #0
 8004102:	480d      	ldr	r0, [pc, #52]	; (8004138 <SYSTEM_Configure_Required_Mode+0x84>)
 8004104:	f7ff feec 	bl	8003ee0 <SCH_Add_Task>

            // Agregar Task Antirrebote con LED
            SCH_Add_Task(ANTIRREBOTE_Update, 1, 10, 1, 1);
 8004108:	2301      	movs	r3, #1
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	2301      	movs	r3, #1
 800410e:	220a      	movs	r2, #10
 8004110:	2101      	movs	r1, #1
 8004112:	480a      	ldr	r0, [pc, #40]	; (800413c <SYSTEM_Configure_Required_Mode+0x88>)
 8004114:	f7ff fee4 	bl	8003ee0 <SCH_Add_Task>

            // Agregar Task Lectura ADC
            SCH_Add_Task(READ_ADC_Update, 0, 10, 5, 0);
 8004118:	2300      	movs	r3, #0
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2305      	movs	r3, #5
 800411e:	220a      	movs	r2, #10
 8004120:	2100      	movs	r1, #0
 8004122:	4807      	ldr	r0, [pc, #28]	; (8004140 <SYSTEM_Configure_Required_Mode+0x8c>)
 8004124:	f7ff fedc 	bl	8003ee0 <SCH_Add_Task>

            break;
 8004128:	bf00      	nop
        }
	}
}
 800412a:	bf00      	nop
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20002520 	.word	0x20002520
 8004134:	08000791 	.word	0x08000791
 8004138:	08000699 	.word	0x08000699
 800413c:	080006c1 	.word	0x080006c1
 8004140:	080005b9 	.word	0x080005b9

08004144 <SYSTEM_Perform_Safe_Shutdown>:

void SYSTEM_Perform_Safe_Shutdown(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af02      	add	r7, sp, #8
    // Here we simply "fail silent" with rudimentary fault reporting
    // OTHER BEHAVIOUR IS LIKELY TO BE REQUIRED IN YOUR DESIGN
    // *************************************
    // NOTE: This function should NOT return
    // *************************************
    HEARTBEAT_Init();
 800414a:	f7fc fa99 	bl	8000680 <HEARTBEAT_Init>
    Pin_Config(LD2_GPIO_Port, LD2_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 800414e:	2300      	movs	r3, #0
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	2300      	movs	r3, #0
 8004154:	2201      	movs	r2, #1
 8004156:	2120      	movs	r1, #32
 8004158:	4814      	ldr	r0, [pc, #80]	; (80041ac <SYSTEM_Perform_Safe_Shutdown+0x68>)
 800415a:	f7fc f9bd 	bl	80004d8 <Pin_Config>
    Pin_Config(Heartbeat_GPIO_Port, Heartbeat_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 800415e:	2300      	movs	r3, #0
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	2300      	movs	r3, #0
 8004164:	2201      	movs	r2, #1
 8004166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800416a:	4810      	ldr	r0, [pc, #64]	; (80041ac <SYSTEM_Perform_Safe_Shutdown+0x68>)
 800416c:	f7fc f9b4 	bl	80004d8 <Pin_Config>
    Pin_Write(LD2_GPIO_Port, LD2_Pin, ON);
 8004170:	2201      	movs	r2, #1
 8004172:	2120      	movs	r1, #32
 8004174:	480d      	ldr	r0, [pc, #52]	; (80041ac <SYSTEM_Perform_Safe_Shutdown+0x68>)
 8004176:	f7fc f9d0 	bl	800051a <Pin_Write>

    while(1)
	{
        // Flicker Heartbeat LED to indicate fault
    	for (Delay = 0; Delay < 200000; Delay++) j *= 3;
 800417a:	2300      	movs	r3, #0
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	e007      	b.n	8004190 <SYSTEM_Perform_Safe_Shutdown+0x4c>
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3301      	adds	r3, #1
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a07      	ldr	r2, [pc, #28]	; (80041b0 <SYSTEM_Perform_Safe_Shutdown+0x6c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	ddf3      	ble.n	8004180 <SYSTEM_Perform_Safe_Shutdown+0x3c>

        	Pin_Toggle(LD2_GPIO_Port, LD2_Pin);
 8004198:	2120      	movs	r1, #32
 800419a:	4804      	ldr	r0, [pc, #16]	; (80041ac <SYSTEM_Perform_Safe_Shutdown+0x68>)
 800419c:	f7fc f9cf 	bl	800053e <Pin_Toggle>
        	HEARTBEAT_Update();
 80041a0:	f7fc fa7a 	bl	8000698 <HEARTBEAT_Update>

			SYSTEM_Change_Mode_Fault(NORMAL);
 80041a4:	2001      	movs	r0, #1
 80041a6:	f000 f805 	bl	80041b4 <SYSTEM_Change_Mode_Fault>
    	for (Delay = 0; Delay < 200000; Delay++) j *= 3;
 80041aa:	e7e6      	b.n	800417a <SYSTEM_Perform_Safe_Shutdown+0x36>
 80041ac:	40020000 	.word	0x40020000
 80041b0:	00030d3f 	.word	0x00030d3f

080041b4 <SYSTEM_Change_Mode_Fault>:
	}

}

void SYSTEM_Change_Mode_Fault(eSystem_mode mode)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	71fb      	strb	r3, [r7, #7]
	System_mode_G = mode;
 80041be:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <SYSTEM_Change_Mode_Fault+0x1c>)
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	7013      	strb	r3, [r2, #0]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	20002520 	.word	0x20002520

080041d4 <SYSTEM_Get_Mode>:


eSystem_mode SYSTEM_Get_Mode(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
	return System_mode_G;
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <SYSTEM_Get_Mode+0x14>)
 80041da:	781b      	ldrb	r3, [r3, #0]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20002520 	.word	0x20002520

080041ec <__libc_init_array>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	4d0d      	ldr	r5, [pc, #52]	; (8004224 <__libc_init_array+0x38>)
 80041f0:	4c0d      	ldr	r4, [pc, #52]	; (8004228 <__libc_init_array+0x3c>)
 80041f2:	1b64      	subs	r4, r4, r5
 80041f4:	10a4      	asrs	r4, r4, #2
 80041f6:	2600      	movs	r6, #0
 80041f8:	42a6      	cmp	r6, r4
 80041fa:	d109      	bne.n	8004210 <__libc_init_array+0x24>
 80041fc:	4d0b      	ldr	r5, [pc, #44]	; (800422c <__libc_init_array+0x40>)
 80041fe:	4c0c      	ldr	r4, [pc, #48]	; (8004230 <__libc_init_array+0x44>)
 8004200:	f000 f820 	bl	8004244 <_init>
 8004204:	1b64      	subs	r4, r4, r5
 8004206:	10a4      	asrs	r4, r4, #2
 8004208:	2600      	movs	r6, #0
 800420a:	42a6      	cmp	r6, r4
 800420c:	d105      	bne.n	800421a <__libc_init_array+0x2e>
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	f855 3b04 	ldr.w	r3, [r5], #4
 8004214:	4798      	blx	r3
 8004216:	3601      	adds	r6, #1
 8004218:	e7ee      	b.n	80041f8 <__libc_init_array+0xc>
 800421a:	f855 3b04 	ldr.w	r3, [r5], #4
 800421e:	4798      	blx	r3
 8004220:	3601      	adds	r6, #1
 8004222:	e7f2      	b.n	800420a <__libc_init_array+0x1e>
 8004224:	08004284 	.word	0x08004284
 8004228:	08004284 	.word	0x08004284
 800422c:	08004284 	.word	0x08004284
 8004230:	08004288 	.word	0x08004288

08004234 <memset>:
 8004234:	4402      	add	r2, r0
 8004236:	4603      	mov	r3, r0
 8004238:	4293      	cmp	r3, r2
 800423a:	d100      	bne.n	800423e <memset+0xa>
 800423c:	4770      	bx	lr
 800423e:	f803 1b01 	strb.w	r1, [r3], #1
 8004242:	e7f9      	b.n	8004238 <memset+0x4>

08004244 <_init>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	bf00      	nop
 8004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424a:	bc08      	pop	{r3}
 800424c:	469e      	mov	lr, r3
 800424e:	4770      	bx	lr

08004250 <_fini>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr
