
ledasm_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000188  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800031c  08000324  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800031c  0800031c  00010324  2**0
                  CONTENTS
  4 .ARM          00000000  0800031c  0800031c  00010324  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800031c  08000324  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800031c  0800031c  0001031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000320  08000320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000324  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000324  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010324  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000109  00000000  00000000  00010354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00000048  00000000  00000000  0001045d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000026  00000000  00000000  000104a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000104d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0000006b  00000000  00000000  00010518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  00010588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000002c  00000000  00000000  000105a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000304 	.word	0x08000304

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000304 	.word	0x08000304

080001d4 <main>:
/*	main NO TIENE QUE TERMINAR NUNCA	*/
/****************************************/
		.type		main, %function
main:
		//Inicializo el led y el pulsador de la placa.
		BL		board_init
 80001d4:	f000 f80f 	bl	80001f6 <board_init>

080001d8 <main_loop>:
main_loop:

		//Leo el pulsador B1 (azul)
		//Sí está presionado me quedo esperando que lo suelte.
							//Devuelve 0 cuando está presionado
		BL		b1_read		//Distinto de cero (1<<13) cuando está suelto.
 80001d8:	f000 f82a 	bl	8000230 <b1_read>
		CMP		R0,#0		//Comparo contra cero.
 80001dc:	2800      	cmp	r0, #0
		BEQ		main_loop	//Sí es cero espero que suelte.
 80001de:	d0fb      	beq.n	80001d8 <main_loop>

		//Enciendo el led.
		BL		led_set
 80001e0:	f000 f818 	bl	8000214 <led_set>
		//Demora
		LDR		R0,=#LOOP_COMPARE*10
 80001e4:	4818      	ldr	r0, [pc, #96]	; (8000248 <delay_dec+0x8>)
		BL		delay
 80001e6:	f000 f82a 	bl	800023e <delay>
		//Apago el led
		BL		led_reset
 80001ea:	f000 f81a 	bl	8000222 <led_reset>
		//Demora*8
		LDR		R0,=#LOOP_COMPARE*8
 80001ee:	4817      	ldr	r0, [pc, #92]	; (800024c <delay_dec+0xc>)
		BL		delay
 80001f0:	f000 f825 	bl	800023e <delay>
		//Volver a empezar...
		B		main_loop
 80001f4:	e7f0      	b.n	80001d8 <main_loop>

080001f6 <board_init>:
/*	Función led_init. 				 	*/
/*	Inicializa El LED					*/
/****************************************/
		.type	board_init, %function
board_init:
		PUSH	{R0, R1, R2, R3, LR}	// Mando a la pila los registros que modifico y LR
 80001f6:	b50f      	push	{r0, r1, r2, r3, lr}
		LDR		R0,	=#RCC_AHB1ENR		// Dirección de memoria para habilitar clk en GPIO
 80001f8:	4815      	ldr	r0, [pc, #84]	; (8000250 <delay_dec+0x10>)
		LDR		R3, [R0]				// Leo el registro
 80001fa:	6803      	ldr	r3, [r0, #0]
		LDR		R1, =#GPIOAEN			//
 80001fc:	4915      	ldr	r1, [pc, #84]	; (8000254 <delay_dec+0x14>)
		LDR		R2, =#GPIOCEN			// Bits para habilitar PORTC y PORTA
 80001fe:	4a16      	ldr	r2, [pc, #88]	; (8000258 <delay_dec+0x18>)
		ORRS	R3, R1					//
 8000200:	430b      	orrs	r3, r1
		ORRS	R3, R2					// Habilito los bits en cuestión
 8000202:	4313      	orrs	r3, r2
		STR		R3, [R0]				// Escribo el registro.
 8000204:	6003      	str	r3, [r0, #0]
		LDR		R0, =#PORTA_MODER
 8000206:	4815      	ldr	r0, [pc, #84]	; (800025c <delay_dec+0x1c>)
		LDR		R3, [R0]
 8000208:	6803      	ldr	r3, [r0, #0]
		MOVS	R1, #0x01
 800020a:	2101      	movs	r1, #1
		LSLS	R1, R1, #10
 800020c:	0289      	lsls	r1, r1, #10
		ORRS	R3, R1
 800020e:	430b      	orrs	r3, r1
		STR		R3, [R0]				//Leo la configuración de GPIOA y pongo A5 como salida
 8000210:	6003      	str	r3, [r0, #0]
		POP		{R0, R1, R2, R3, PC}
 8000212:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000214 <led_set>:
/*	Función led_set. 				 	*/
/*	Setea el led						*/
/****************************************/
		.type	led_set, %function
led_set:
		PUSH	{R0, R1}			// Mando a la pila todos los registros que modifico
 8000214:	b403      	push	{r0, r1}
		MOVS	R0,#1				// R1   = 0x01
 8000216:	2001      	movs	r0, #1
		LSLS	R0,R0,#5			// R0 <<= 5
 8000218:	0140      	lsls	r0, r0, #5
		ldr 	R1, =#PORTA_BSRR   	// Escribo la dirección de memoria para setear GPIOA
 800021a:	4911      	ldr	r1, [pc, #68]	; (8000260 <delay_dec+0x20>)
		STR 	R0, [R1]          	// Escribo el puerto de salida
 800021c:	6008      	str	r0, [r1, #0]
		POP		{R0, R1}			// Repongo los registros que toqué.
 800021e:	bc03      	pop	{r0, r1}
		BX		LR					// return
 8000220:	4770      	bx	lr

08000222 <led_reset>:
/*	Función led_reset. 				 	*/
/*	Resetea el led						*/
/****************************************/
		.type	led_reset, %function
led_reset:
		PUSH	{R0, R1}			// Mando a la pila todos los registros que modifico
 8000222:	b403      	push	{r0, r1}
		MOVS	R0,#1				// R1   = 0x01
 8000224:	2001      	movs	r0, #1
		LSLS	R0,R0,#21			// R0 <<= 21
 8000226:	0540      	lsls	r0, r0, #21
		LDR 	R1, =#PORTA_BSRR   	// Escribo la dirección de memoria para setear GPIOA
 8000228:	490d      	ldr	r1, [pc, #52]	; (8000260 <delay_dec+0x20>)
		STR 	R0, [R1]          	// Escribo el puerto de salida
 800022a:	6008      	str	r0, [r1, #0]
		POP		{R0, R1}			// Repongo los registros que toqué.
 800022c:	bc03      	pop	{r0, r1}
		BX		LR					// return
 800022e:	4770      	bx	lr

08000230 <b1_read>:
/*	Función b1_read. 				 	*/
/*	Lee el pulsador B1					*/
/****************************************/
		.type	b1_read, 	%function
b1_read:
		PUSH	{R1, R2, LR}		// Mando lo que modifico a la pila
 8000230:	b506      	push	{r1, r2, lr}
		LDR		R2, =#1				// R2 = 1 (se puede usar MOVS para 1)
 8000232:	4a08      	ldr	r2, [pc, #32]	; (8000254 <delay_dec+0x14>)
		LSLS	R2, R2,#13			// R2 = R2 <<13
 8000234:	0352      	lsls	r2, r2, #13
		LDR		R1, =#PORTC_IDR		// R1 dirección de memoria del registro para leer el GPIO
 8000236:	490b      	ldr	r1, [pc, #44]	; (8000264 <delay_dec+0x24>)
		LDR		R0, [R1]			// Me traigo el valor del registro a R1
 8000238:	6808      	ldr	r0, [r1, #0]
		ANDS	R0, R0, R2			// Enmascaro R0 = R0 & (1<<13)
 800023a:	4010      	ands	r0, r2
		POP		{R1, R2, PC}		// Devuelvo por R0 el valor del pin y repongo registros
 800023c:	bd06      	pop	{r1, r2, pc}

0800023e <delay>:
/*	Función delay. 				 		*/
/*	Recibe por R0 la demora				*/
/****************************************/
		.type	delay, %function
delay:
		PUSH	{R0, LR}			// Guardo el parámetro y LR en la pila.
 800023e:	b501      	push	{r0, lr}

08000240 <delay_dec>:
delay_dec:
        SUBS	R0, 1				//
 8000240:	3801      	subs	r0, #1
        BNE		delay_dec			// while(--R0);
 8000242:	d1fd      	bne.n	8000240 <delay_dec>
		POP		{R0, PC}			// repongo R0 y vuelvo.
 8000244:	bd01      	pop	{r0, pc}
 8000246:	0000      	.short	0x0000
		LDR		R0,=#LOOP_COMPARE*10
 8000248:	001dfff6 	.word	0x001dfff6
		LDR		R0,=#LOOP_COMPARE*8
 800024c:	0017fff8 	.word	0x0017fff8
		LDR		R0,	=#RCC_AHB1ENR		// Dirección de memoria para habilitar clk en GPIO
 8000250:	40023830 	.word	0x40023830
		LDR		R1, =#GPIOAEN			//
 8000254:	00000001 	.word	0x00000001
		LDR		R2, =#GPIOCEN			// Bits para habilitar PORTC y PORTA
 8000258:	00000004 	.word	0x00000004
		LDR		R0, =#PORTA_MODER
 800025c:	40020000 	.word	0x40020000
		ldr 	R1, =#PORTA_BSRR   	// Escribo la dirección de memoria para setear GPIOA
 8000260:	40020018 	.word	0x40020018
		LDR		R1, =#PORTC_IDR		// R1 dirección de memoria del registro para leer el GPIO
 8000264:	40020810 	.word	0x40020810

08000268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800026c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000272:	490d      	ldr	r1, [pc, #52]	; (80002a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <LoopForever+0xe>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000278:	e002      	b.n	8000280 <LoopCopyDataInit>

0800027a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800027c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027e:	3304      	adds	r3, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000284:	d3f9      	bcc.n	800027a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000286:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000288:	4c0a      	ldr	r4, [pc, #40]	; (80002b4 <LoopForever+0x16>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800028c:	e001      	b.n	8000292 <LoopFillZerobss>

0800028e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000290:	3204      	adds	r2, #4

08000292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000294:	d3fb      	bcc.n	800028e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000296:	f000 f811 	bl	80002bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029a:	f7ff ff9b 	bl	80001d4 <main>

0800029e <LoopForever>:

LoopForever:
    b LoopForever
 800029e:	e7fe      	b.n	800029e <LoopForever>
  ldr   r0, =_estack
 80002a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ac:	08000324 	.word	0x08000324
  ldr r2, =_sbss
 80002b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b4:	2000001c 	.word	0x2000001c

080002b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b8:	e7fe      	b.n	80002b8 <ADC_IRQHandler>
	...

080002bc <__libc_init_array>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	4d0d      	ldr	r5, [pc, #52]	; (80002f4 <__libc_init_array+0x38>)
 80002c0:	4c0d      	ldr	r4, [pc, #52]	; (80002f8 <__libc_init_array+0x3c>)
 80002c2:	1b64      	subs	r4, r4, r5
 80002c4:	10a4      	asrs	r4, r4, #2
 80002c6:	2600      	movs	r6, #0
 80002c8:	42a6      	cmp	r6, r4
 80002ca:	d109      	bne.n	80002e0 <__libc_init_array+0x24>
 80002cc:	4d0b      	ldr	r5, [pc, #44]	; (80002fc <__libc_init_array+0x40>)
 80002ce:	4c0c      	ldr	r4, [pc, #48]	; (8000300 <__libc_init_array+0x44>)
 80002d0:	f000 f818 	bl	8000304 <_init>
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	10a4      	asrs	r4, r4, #2
 80002d8:	2600      	movs	r6, #0
 80002da:	42a6      	cmp	r6, r4
 80002dc:	d105      	bne.n	80002ea <__libc_init_array+0x2e>
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e4:	4798      	blx	r3
 80002e6:	3601      	adds	r6, #1
 80002e8:	e7ee      	b.n	80002c8 <__libc_init_array+0xc>
 80002ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ee:	4798      	blx	r3
 80002f0:	3601      	adds	r6, #1
 80002f2:	e7f2      	b.n	80002da <__libc_init_array+0x1e>
 80002f4:	0800031c 	.word	0x0800031c
 80002f8:	0800031c 	.word	0x0800031c
 80002fc:	0800031c 	.word	0x0800031c
 8000300:	08000320 	.word	0x08000320

08000304 <_init>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr

08000310 <_fini>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr
