
assembly-project-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d4  080003d4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d4  080003d4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080003d4  080003d4  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d4  080003d4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080003dc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000008c  08000468  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08000468  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000001b4  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000006e  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000003a  00000000  00000000  000202de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00020318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0000007d  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  00020400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000002c  00000000  00000000  00020420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000008c 	.word	0x2000008c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003bc 	.word	0x080003bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000090 	.word	0x20000090
 80001d0:	080003bc 	.word	0x080003bc

080001d4 <main>:
/*------------------------------------------------------------------*/
 		.global		main
		.type		main, %function

main:
		PUSH	{LR}					// Save PC
 80001d4:	b500      	push	{lr}

    	BL		systemInit				// systemInit();
 80001d6:	f000 f81e 	bl	8000216 <systemInit>

		LDR		R2, =mainLoopCnt		// R2 <- address of mainLoopCnt
 80001da:	4a12      	ldr	r2, [pc, #72]	; (8000224 <systemInit+0xe>)
		MOVS	R3, #0					// R3 <- 0
 80001dc:	2300      	movs	r3, #0
		STR		R3, [R2]      			// mem[R1] <- R => mainLoopCnt = 0;
 80001de:	6013      	str	r3, [r2, #0]

		LDR		R2, =taskCnt			// R2 <- address of taskCnt
 80001e0:	4a11      	ldr	r2, [pc, #68]	; (8000228 <systemInit+0x12>)
		MOVS	R3, #0					// R3 <- 0
 80001e2:	2300      	movs	r3, #0
		STR		R3, [R2]      			// mem[R2] <- R3 => taskCnt = 0;
 80001e4:	6013      	str	r3, [r2, #0]

080001e6 <mainLoop>:

mainLoop:

		LDR		R2, =taskCnt			// R2 <- address of taskCnt
 80001e6:	4a10      	ldr	r2, [pc, #64]	; (8000228 <systemInit+0x12>)
  		LDR		R3, [R2]				// R3 <- mem[R1]
 80001e8:	6813      	ldr	r3, [r2, #0]
		//CMP		R3, #tasksTableParts
		//BHI		taskCntError			// Jump if (R0 > tasksTableParts)


		MOVS	R4, #tasksTablePartSize	// R2 <- tasksTablePartSize
 80001ea:	2418      	movs	r4, #24
		MULS	R3, R3, R4				// R0 <- R0 * R2
 80001ec:	4363      	muls	r3, r4
										// R0 <- taskCnt * tasksTablePartSize
		LDR		R2, =tasksTable			// R1 <- address of tasksTable
 80001ee:	4a0f      	ldr	r2, [pc, #60]	; (800022c <systemInit+0x16>)
		LDR		R4, [R2, R3]			// R2 <- mem[R1 + R0]
 80001f0:	58d4      	ldr	r4, [r2, r3]
		ADDS	R3, R3, taskSize
 80001f2:	3304      	adds	r3, #4
		MOVS	R0, 0
 80001f4:	2000      	movs	r0, #0
		ADDS	R0, R2, R3
 80001f6:	18d0      	adds	r0, r2, r3

		BLX		R4						// Branch to taskX
 80001f8:	47a0      	blx	r4

		LDR		R2, =taskCnt			// R1 <- address of taskCnt
 80001fa:	4a0b      	ldr	r2, [pc, #44]	; (8000228 <systemInit+0x12>)
  		LDR		R3, [R2]				// R0 <- mem[R1]			// R0 <- R0 + 1
 80001fc:	6813      	ldr	r3, [r2, #0]
		STR		R3, [R2]    			// mem[R1] <- R0 => taskCnt++;
 80001fe:	6013      	str	r3, [r2, #0]
		CMP		R3, #tasksTableParts
 8000200:	2b03      	cmp	r3, #3
		BLS 	mainLoopContinue		// Jump if (R0 < tasksTableParts)
 8000202:	d901      	bls.n	8000208 <mainLoopContinue>

		MOVS	R3, #0					// R0 <- 0
 8000204:	2300      	movs	r3, #0
		STR		R3, [R2]      			// mem[R1] <- R0 => taskCnt = 0;
 8000206:	6013      	str	r3, [r2, #0]

08000208 <mainLoopContinue>:

mainLoopContinue:

		LDR		R4, =mainLoopCnt		// R1 <- address of mainLoopCnt
 8000208:	4c06      	ldr	r4, [pc, #24]	; (8000224 <systemInit+0xe>)
  		LDR		R3, [R2]				// R0 <- mem[R1]
 800020a:	6813      	ldr	r3, [r2, #0]
		ADDS	R3, R3, #1				// R0 <- R0 + 1
 800020c:	3301      	adds	r3, #1
		STR		R3, [R2]      			// mem[R1] <- R0 => mainLoopCnt++;
 800020e:	6013      	str	r3, [r2, #0]

		B		mainLoop				// Continue forever
 8000210:	e7e9      	b.n	80001e6 <mainLoop>

08000212 <mainLoopEnd>:

mainLoopEnd:							// We should never reach here

		POP		{PC}
 8000212:	bd00      	pop	{pc}

08000214 <taskCntError>:
taskCntError:							// We should never reach here
		B		taskCntError
 8000214:	e7fe      	b.n	8000214 <taskCntError>

08000216 <systemInit>:
		.global	systemInit
		.type	systemInit, %function
systemInit:
		// R0, R1: argument / result / scratch register
		// R2, R3: argument / scratch register
		PUSH	{LR}					// Save PC
 8000216:	b500      	push	{lr}
										// HW & SW initialization here
		BL		task1Init				// task1Init();
 8000218:	f000 f80a 	bl	8000230 <task1Init>
		BL		task2Init				// task2Init();
 800021c:	f000 f817 	bl	800024e <task2Init>

		POP		{PC}					// Retun
 8000220:	bd00      	pop	{pc}
 8000222:	0000      	.short	0x0000
		LDR		R2, =mainLoopCnt		// R2 <- address of mainLoopCnt
 8000224:	200000ac 	.word	0x200000ac
		LDR		R2, =taskCnt			// R2 <- address of taskCnt
 8000228:	200000b0 	.word	0x200000b0
		LDR		R2, =tasksTable			// R1 <- address of tasksTable
 800022c:	20000044 	.word	0x20000044

08000230 <task1Init>:
		.type	task1Init, %function
		// R0, R1: argument / result / scratch register
		// R2, R3: argument / scratch register
		// R4 - R7: varaible register
task1Init:
		PUSH	{LR}					// Save PC
 8000230:	b500      	push	{lr}

		BL		ledInit					// ledInit();
 8000232:	f000 f84a 	bl	80002ca <ledInit>

		MOVS	R0, #LEDoN
 8000236:	2001      	movs	r0, #1
		BL		led						// led(LEDoN);
 8000238:	f000 f855 	bl	80002e6 <led>

0800023c <task1InitEnd>:

task1InitEnd:

		POP		{PC}					// Return
 800023c:	bd00      	pop	{pc}

0800023e <task1Update>:
		.type	task1Update, %function
		// R0, R1: argument / result / scratch register
		// R2, R3: argument / scratch register
		// R4 - R7: varaible register
task1Update:
		PUSH	{LR}					// Save PC
 800023e:	b500      	push	{lr}

		MOVS	R0, #LEDoN
 8000240:	2001      	movs	r0, #1
		BL		led						// led(LEDoN);
 8000242:	f000 f850 	bl	80002e6 <led>

        LDR		R0, =LEDoNdELAY
 8000246:	4830      	ldr	r0, [pc, #192]	; (8000308 <delayEnd>)
		BL		delay					// delay(LEDoNdELAY);
 8000248:	f000 f85a 	bl	8000300 <delay>

0800024c <task1UpdateEnd>:

task1UpdateEnd:

		POP		{PC}					// Return
 800024c:	bd00      	pop	{pc}

0800024e <task2Init>:
		.type	task2Init, %function
		// R0, R1: argument / result / scratch register
		// R2, R3: argument / scratch register
		// R4 - R7: varaible register
task2Init:
		PUSH	{LR}					// Save PC
 800024e:	b500      	push	{lr}

		BL		ledInit					// ledInit();
 8000250:	f000 f83b 	bl	80002ca <ledInit>

		MOVS	R0, #LEDoFF
 8000254:	2000      	movs	r0, #0
		BL		led						// led(LEDoFF);
 8000256:	f000 f846 	bl	80002e6 <led>

0800025a <task2InitEnd>:

task2InitEnd:

		POP		{PC}					// Return
 800025a:	bd00      	pop	{pc}

0800025c <task2Update>:
		.type	task2Update, %function
		// R0, R1: argument / result / scratch register
		// R2, R3: argument / scratch register
		// R4 - R7: varaible register
task2Update:
		PUSH	{LR}					// Save PC
 800025c:	b500      	push	{lr}

		MOVS	R0, #LEDoFF
 800025e:	2000      	movs	r0, #0
		BL		led						// led(LEDoFF);
 8000260:	f000 f841 	bl	80002e6 <led>

        LDR		R0, =LEDoFFdELAY
 8000264:	4829      	ldr	r0, [pc, #164]	; (800030c <delayEnd+0x4>)
		BL		delay					// delay(LEDoFFdELAY);
 8000266:	f000 f84b 	bl	8000300 <delay>

0800026a <task2UpdateEnd>:

task2UpdateEnd:

		POP		{PC}					// Return
 800026a:	bd00      	pop	{pc}

0800026c <task>:
/*------------------------------------------------------------------*/
		.global task
		.type task, %function

task:
		PUSH 	{LR}
 800026c:	b500      	push	{lr}
		PUSH 	{R1, R2, R3, R4,R5, R7}
 800026e:	b4be      	push	{r1, r2, r3, r4, r5, r7}

		LDR		R1, [R0,#4]
 8000270:	6841      	ldr	r1, [r0, #4]

		LDR 	R2, [R0,#8]
 8000272:	6882      	ldr	r2, [r0, #8]

		LDR 	R3, [R0, #12]
 8000274:	68c3      	ldr	r3, [r0, #12]

		LDR		R4, [R0, #16]
 8000276:	6904      	ldr	r4, [r0, #16]

		LDR		R0, [R0]
 8000278:	6800      	ldr	r0, [r0, #0]

		CMP		R1, #8
 800027a:	2908      	cmp	r1, #8
		BEQ		taskB
 800027c:	d003      	beq.n	8000286 <taskB>

		CMP		R1, #16
 800027e:	2910      	cmp	r1, #16
		BEQ 	task2B
 8000280:	d00b      	beq.n	800029a <task2B>

		CMP		R1, #32
 8000282:	2920      	cmp	r1, #32
		BEQ		task4B
 8000284:	d013      	beq.n	80002ae <task4B>

08000286 <taskB>:
		.type task, %function
		// R0 (LEDoN o LEDoFF, LEDdELAYoN o LEDdELAYoFF): argument
		// R2, R3: Argumento que envia el main
taskB:

		MOVS 	R4, R0
 8000286:	0004      	movs	r4, r0
		LDRB 	R6, [R4,R5]
 8000288:	5d66      	ldrb	r6, [r4, r5]
		CMP		R6, R3
 800028a:	429e      	cmp	r6, r3
		BEQ		taskBadd
 800028c:	d003      	beq.n	8000296 <taskBadd>
		CMP		R5, R2
 800028e:	4295      	cmp	r5, r2
		BHS 	taskEnd
 8000290:	d217      	bcs.n	80002c2 <taskEnd>

08000292 <taskBloop>:
taskBloop:

		ADDS	R5, #1
 8000292:	3501      	adds	r5, #1
		B		taskB
 8000294:	e7f7      	b.n	8000286 <taskB>

08000296 <taskBadd>:

taskBadd:

		ADDS 	R7, #1
 8000296:	3701      	adds	r7, #1
		B		taskBloop
 8000298:	e7fb      	b.n	8000292 <taskBloop>

0800029a <task2B>:
		.global task2B
		.type task, %function
		// R0 (LEDoN o LEDoFF, LEDdELAYoN o LEDdELAYoFF): argument
		// R2, R3: Argumento que envia el main
task2B:
		MOVS 	R4, R0
 800029a:	0004      	movs	r4, r0
		LDRB 	R6, [R4,R5]
 800029c:	5d66      	ldrb	r6, [r4, r5]
		CMP		R6, R3
 800029e:	429e      	cmp	r6, r3
		BEQ		task2Badd
 80002a0:	d003      	beq.n	80002aa <task2Badd>
		CMP		R5, R2
 80002a2:	4295      	cmp	r5, r2
		BHS 	taskEnd
 80002a4:	d20d      	bcs.n	80002c2 <taskEnd>

080002a6 <task2Bloop>:

task2Bloop:
		ADDS	R5, #2
 80002a6:	3502      	adds	r5, #2
		B		task2B
 80002a8:	e7f7      	b.n	800029a <task2B>

080002aa <task2Badd>:


task2Badd:

		ADDS 	R7, #1
 80002aa:	3701      	adds	r7, #1
		B		task2Bloop
 80002ac:	e7fb      	b.n	80002a6 <task2Bloop>

080002ae <task4B>:
		.global task4B
		.type task, %function
		// R0 (LEDoN o LEDoFF, LEDdELAYoN o LEDdELAYoFF): argument
		// R2, R3: Argumento que envia el main
task4B:
		MOVS 	R4, R0
 80002ae:	0004      	movs	r4, r0
		LDRB 	R6, [R4,R5]
 80002b0:	5d66      	ldrb	r6, [r4, r5]
		CMP		R6, R3
 80002b2:	429e      	cmp	r6, r3
		BEQ		task4Badd
 80002b4:	d003      	beq.n	80002be <task4Badd>
		CMP		R5, R2
 80002b6:	4295      	cmp	r5, r2
		BHS 	taskEnd
 80002b8:	d203      	bcs.n	80002c2 <taskEnd>

080002ba <task4Bloop>:

task4Bloop:
		ADDS	R5, #2
 80002ba:	3502      	adds	r5, #2
		B		task4B
 80002bc:	e7f7      	b.n	80002ae <task4B>

080002be <task4Badd>:
task4Badd:
		ADDS 	R7, #1
 80002be:	3701      	adds	r7, #1
		B		task4Bloop
 80002c0:	e7fb      	b.n	80002ba <task4Bloop>

080002c2 <taskEnd>:



taskEnd:
		STR 	R7, [R4]
 80002c2:	6027      	str	r7, [r4, #0]
		MOVS 	R0, R7
 80002c4:	0038      	movs	r0, r7

		POP {R7,R5, R4, R3, R2, R1}
 80002c6:	bcbe      	pop	{r1, r2, r3, r4, r5, r7}
		POP {PC}
 80002c8:	bd00      	pop	{pc}

080002ca <ledInit>:
		.type	ledInit, %function
		// R0, R1: argument / result / scratch register
		// R2, R3: argument / scratch register
		// R4 - R7: varaible register
ledInit:
		PUSH	{R0, R1, R3, LR}	// Mando a la pila los registros que modifico y LR
 80002ca:	b50b      	push	{r0, r1, r3, lr}
		LDR		R0,	=#RCC_AHB1ENR		// Dirección de memoria para habilitar clk en GPIO
 80002cc:	4810      	ldr	r0, [pc, #64]	; (8000310 <delayEnd+0x8>)
		LDR		R3, [R0]				// Leo el registro
 80002ce:	6803      	ldr	r3, [r0, #0]
		LDR		R1, =#GPIOAEN			//
 80002d0:	4910      	ldr	r1, [pc, #64]	; (8000314 <delayEnd+0xc>)
		ORRS	R3, R1					// Habilito el bit en cuestión
 80002d2:	430b      	orrs	r3, r1
		STR		R3, [R0]				// Escribo el registro.
 80002d4:	6003      	str	r3, [r0, #0]
		LDR		R0, =#PORTA_MODER
 80002d6:	4810      	ldr	r0, [pc, #64]	; (8000318 <delayEnd+0x10>)
		LDR		R3, [R0]
 80002d8:	6803      	ldr	r3, [r0, #0]
		MOVS	R1, #0x01
 80002da:	2101      	movs	r1, #1
		LSLS	R1, R1, #10
 80002dc:	0289      	lsls	r1, r1, #10
		ORRS	R3, R1
 80002de:	430b      	orrs	r3, r1
		STR		R3, [R0]				//Leo la configuración de GPIOA y pongo A5 como salida
 80002e0:	6003      	str	r3, [r0, #0]
		POP		{R0, R1, R3, PC}
 80002e2:	bd0b      	pop	{r0, r1, r3, pc}

080002e4 <ledInitEnd>:

ledInitEnd:

		POP		{PC}					// Retun
 80002e4:	bd00      	pop	{pc}

080002e6 <led>:
		// R0, R1: argument / result / scratch register
		// R2, R3: argument / scratch register
		// R4 - R7: varaible register
		// R0: LEDoN or LEDoFF
led:
		PUSH	{LR}					// Save PC
 80002e6:	b500      	push	{lr}

		CMP		R0, #LEDoN
 80002e8:	2801      	cmp	r0, #1
		BNE		ledOff					// Jump if (R0 != LEDoN)
 80002ea:	d104      	bne.n	80002f6 <ledOff>

080002ec <ledOn>:

ledOn:
		MOVS	R0,#1				// R1   = 0x01
 80002ec:	2001      	movs	r0, #1
		LSLS	R0,R0,#5			// R0 <<= 5
 80002ee:	0140      	lsls	r0, r0, #5
		ldr 	R1, =#PORTA_BSRR   	// Escribo la dirección de memoria para setear GPIOA
 80002f0:	490a      	ldr	r1, [pc, #40]	; (800031c <delayEnd+0x14>)
		STR 	R0, [R1]          	// Escribo el puerto de salida
 80002f2:	6008      	str	r0, [r1, #0]
									// LED ON
		B		ledEnd
 80002f4:	e003      	b.n	80002fe <ledEnd>

080002f6 <ledOff>:

ledOff:
        MOVS	R0,#1				// R1   = 0x01
 80002f6:	2001      	movs	r0, #1
		LSLS	R0,R0,#21			// R0 <<= 21
 80002f8:	0540      	lsls	r0, r0, #21
		LDR 	R1, =#PORTA_BSRR   	// Escribo la dirección de memoria para setear GPIOA
 80002fa:	4908      	ldr	r1, [pc, #32]	; (800031c <delayEnd+0x14>)
		STR 	R0, [R1]          	// Escribo el puerto de salida
 80002fc:	6008      	str	r0, [r1, #0]

080002fe <ledEnd>:
										// LED OFF

ledEnd:
		POP		{PC}					// Return
 80002fe:	bd00      	pop	{pc}

08000300 <delay>:
		// R0, R1: argument / result / scratch register
		// R2, R3: argument / scratch register
		// R4 - R7: varaible register
		// R0: LEDdELAY
delay:
		PUSH	{LR}					// Save PC
 8000300:	b500      	push	{lr}

08000302 <delay0>:

delay0:
        SUBS	R0, 1					// R0 <- R0 - 1
 8000302:	3801      	subs	r0, #1
        BNE		delay0					// Jump if (R0 != 0)
 8000304:	d1fd      	bne.n	8000302 <delay0>

		POP		{PC}					// Return
 8000306:	bd00      	pop	{pc}

08000308 <delayEnd>:
        LDR		R0, =LEDoNdELAY
 8000308:	00030d40 	.word	0x00030d40
        LDR		R0, =LEDoFFdELAY
 800030c:	00061a80 	.word	0x00061a80
		LDR		R0,	=#RCC_AHB1ENR		// Dirección de memoria para habilitar clk en GPIO
 8000310:	40023830 	.word	0x40023830
		LDR		R1, =#GPIOAEN			//
 8000314:	00000001 	.word	0x00000001
		LDR		R0, =#PORTA_MODER
 8000318:	40020000 	.word	0x40020000
		ldr 	R1, =#PORTA_BSRR   	// Escribo la dirección de memoria para setear GPIOA
 800031c:	40020018 	.word	0x40020018

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000324:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <LoopForever+0x6>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <LoopForever+0xe>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <LoopForever+0x16>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034e:	f000 f811 	bl	8000374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000352:	f7ff ff3f 	bl	80001d4 <main>

08000356 <LoopForever>:

LoopForever:
    b LoopForever
 8000356:	e7fe      	b.n	8000356 <LoopForever>
  ldr   r0, =_estack
 8000358:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000364:	080003dc 	.word	0x080003dc
  ldr r2, =_sbss
 8000368:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800036c:	200000b4 	.word	0x200000b4

08000370 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC_IRQHandler>
	...

08000374 <__libc_init_array>:
 8000374:	b570      	push	{r4, r5, r6, lr}
 8000376:	4d0d      	ldr	r5, [pc, #52]	; (80003ac <__libc_init_array+0x38>)
 8000378:	4c0d      	ldr	r4, [pc, #52]	; (80003b0 <__libc_init_array+0x3c>)
 800037a:	1b64      	subs	r4, r4, r5
 800037c:	10a4      	asrs	r4, r4, #2
 800037e:	2600      	movs	r6, #0
 8000380:	42a6      	cmp	r6, r4
 8000382:	d109      	bne.n	8000398 <__libc_init_array+0x24>
 8000384:	4d0b      	ldr	r5, [pc, #44]	; (80003b4 <__libc_init_array+0x40>)
 8000386:	4c0c      	ldr	r4, [pc, #48]	; (80003b8 <__libc_init_array+0x44>)
 8000388:	f000 f818 	bl	80003bc <_init>
 800038c:	1b64      	subs	r4, r4, r5
 800038e:	10a4      	asrs	r4, r4, #2
 8000390:	2600      	movs	r6, #0
 8000392:	42a6      	cmp	r6, r4
 8000394:	d105      	bne.n	80003a2 <__libc_init_array+0x2e>
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f855 3b04 	ldr.w	r3, [r5], #4
 800039c:	4798      	blx	r3
 800039e:	3601      	adds	r6, #1
 80003a0:	e7ee      	b.n	8000380 <__libc_init_array+0xc>
 80003a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a6:	4798      	blx	r3
 80003a8:	3601      	adds	r6, #1
 80003aa:	e7f2      	b.n	8000392 <__libc_init_array+0x1e>
 80003ac:	080003d4 	.word	0x080003d4
 80003b0:	080003d4 	.word	0x080003d4
 80003b4:	080003d4 	.word	0x080003d4
 80003b8:	080003d8 	.word	0x080003d8

080003bc <_init>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr

080003c8 <_fini>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr
